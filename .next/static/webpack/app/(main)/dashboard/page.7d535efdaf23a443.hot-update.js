"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(main)/dashboard/page",{

/***/ "(app-pages-browser)/./app/(main)/dashboard/page.jsx":
/*!***************************************!*\
  !*** ./app/(main)/dashboard/page.jsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ dashboard)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n// // 'use client';\n// // import { useState } from 'react';\n// // import { useAuth } from '@clerk/nextjs';\n// // import axios from 'axios';\n// // export default function TestInterface() {\n// //   const { getToken, userId } = useAuth();\n// //   const [saveData, setSaveData] = useState({ selected_type: '', text: '' });\n// //   const [tweetData, setTweetData] = useState({ tweetUrl: '' });\n// //   const [pdfFile, setPdfFile] = useState(null); // New state for PDF file\n// //   const [queryData, setQueryData] = useState({ text: '', sessionId: '' });\n// //   const [saveResponse, setSaveResponse] = useState(null);\n// //   const [tweetSaveResponse, setTweetSaveResponse] = useState(null);\n// //   const [pdfSaveResponse, setPdfSaveResponse] = useState(null); // New state for PDF response\n// //   const [queryResponse, setQueryResponse] = useState(null);\n// //   const apiUrl = process.env.NEXT_PUBLIC_API_URL;\n// //   const handleSave = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const token = await getToken();\n// //       const response = await axios.post(\n// //         `${apiUrl}/api/save`,\n// //         { ...saveData, user_id: userId },\n// //         { headers: { Authorization: `Bearer ${token}` } }\n// //       );\n// //       setSaveResponse(response.data);\n// //     } catch (error) {\n// //       setSaveResponse({ error: error.response?.data?.error || 'Failed to save data' });\n// //     }\n// //   };\n// //   const handleSaveTweet = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const token = await getToken();\n// //       const response = await axios.post(\n// //         `${apiUrl}/api/save-tweet`,\n// //         { tweetUrl: tweetData.tweetUrl },\n// //         { headers: { Authorization: `Bearer ${token}` } }\n// //       );\n// //       setTweetSaveResponse(response.data);\n// //     } catch (error) {\n// //       setTweetSaveResponse({ error: error.response?.data?.error || 'Failed to save tweet' });\n// //     }\n// //   };\n// //   const handleSavePdf = async (e) => {\n// //     e.preventDefault();\n// //     if (!pdfFile) {\n// //       setPdfSaveResponse({ error: 'No PDF file selected' });\n// //       return;\n// //     }\n// //     try {\n// //       const token = await getToken();\n// //       const formData = new FormData();\n// //       formData.append('pdf', pdfFile); // Match the key expected by the backend\n// //       const response = await axios.post(\n// //         `${apiUrl}/api/save-pdf`,\n// //         formData,\n// //         {\n// //           headers: {\n// //             Authorization: `Bearer ${token}`,\n// //             'Content-Type': 'multipart/form-data', // Required for file uploads\n// //           },\n// //         }\n// //       );\n// //       setPdfSaveResponse(response.data);\n// //     } catch (error) {\n// //       setPdfSaveResponse({ error: error.response?.data?.error || 'Failed to save PDF' });\n// //     }\n// //   };\n// //   const handleQuery = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const token = await getToken();\n// //       const response = await axios.post(\n// //         `${apiUrl}/api/query`,\n// //         { ...queryData, userId },\n// //         { headers: { Authorization: `Bearer ${token}` } }\n// //       );\n// //       setQueryResponse(response.data);\n// //     } catch (error) {\n// //       setQueryResponse({ error: error.response?.data?.error || 'Failed to query data' });\n// //     }\n// //   };\n// //   return (\n// //     <div className=\"test-interface\">\n// //       <section>\n// //         <h2>Save Data</h2>\n// //         <form onSubmit={handleSave}>\n// //           <div>\n// //             <label>Type:</label>\n// //             <input\n// //               type=\"text\"\n// //               value={saveData.selected_type}\n// //               onChange={(e) => setSaveData({ ...saveData, selected_type: e.target.value })}\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Text:</label>\n// //             <textarea\n// //               value={saveData.text}\n// //               onChange={(e) => setSaveData({ ...saveData, text: e.target.value })}\n// //             />\n// //           </div>\n// //           <button type=\"submit\">Save</button>\n// //         </form>\n// //         {saveResponse && (\n// //           <pre>{JSON.stringify(saveResponse, null, 2)}</pre>\n// //         )}\n// //       </section>\n// //       <section>\n// //         <h2>Save Tweet</h2>\n// //         <form onSubmit={handleSaveTweet}>\n// //           <div>\n// //             <label>Tweet URL:</label>\n// //             <input\n// //               type=\"text\"\n// //               value={tweetData.tweetUrl}\n// //               onChange={(e) => setTweetData({ ...tweetData, tweetUrl: e.target.value })}\n// //               placeholder=\"e.g., https://x.com/username/status/123456789\"\n// //             />\n// //           </div>\n// //           <button type=\"submit\">Save Tweet</button>\n// //         </form>\n// //         {tweetSaveResponse && (\n// //           <pre>{JSON.stringify(tweetSaveResponse, null, 2)}</pre>\n// //         )}\n// //       </section>\n// //       <section>\n// //         <h2>Save PDF</h2>\n// //         <form onSubmit={handleSavePdf}>\n// //           <div>\n// //             <label>Upload PDF:</label>\n// //             <input\n// //               type=\"file\"\n// //               accept=\"application/pdf\"\n// //               onChange={(e) => setPdfFile(e.target.files[0])} // Set the selected file\n// //             />\n// //           </div>\n// //           <button type=\"submit\">Save PDF</button>\n// //         </form>\n// //         {pdfSaveResponse && (\n// //           <pre>{JSON.stringify(pdfSaveResponse, null, 2)}</pre>\n// //         )}\n// //       </section>\n// //       <section>\n// //         <h2>Query Data</h2>\n// //         <form onSubmit={handleQuery}>\n// //           <div>\n// //             <label>Query Text:</label>\n// //             <textarea\n// //               value={queryData.text}\n// //               onChange={(e) => setQueryData({ ...queryData, text: e.target.value })}\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Session ID (optional):</label>\n// //             <input\n// //               type=\"text\"\n// //               value={queryData.sessionId}\n// //               onChange={(e) => setQueryData({ ...queryData, sessionId: e.target.value })}\n// //             />\n// //           </div>\n// //           <button type=\"submit\">Query</button>\n// //         </form>\n// //         {queryResponse && (\n// //           <pre>{JSON.stringify(queryResponse, null, 2)}</pre>\n// //         )}\n// //       </section>\n// //     </div>\n// //   );\n// // }\n// 'use client';\n// import { useState, useRef, useEffect } from 'react';\n// import { useAuth } from '@clerk/nextjs';\n// import axios from 'axios';\n// import Image from 'next/image';\n// import { \n//   Send, \n//   FileUp, \n//   Twitter, \n//   Plus, \n//   FileText, \n//   Search, \n//   Loader2, \n//   X, \n//   ChevronRight \n// } from 'lucide-react';\n// import Header from '../../components/Header';\n// export default function Dashboard() {\n//   const { getToken, userId, user } = useAuth();\n//   const [messages, setMessages] = useState([\n//     { role: 'system', content: 'Hi there! I\\'m your personal memory assistant. What would you like to know?' }\n//   ]);\n//   const [inputText, setInputText] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [activeUploadType, setActiveUploadType] = useState(null);\n//   const [uploadData, setUploadData] = useState({\n//     text: '',\n//     tweetUrl: '',\n//     pdfFile: null\n//   });\n//   const [showAddOptions, setShowAddOptions] = useState(false);\n//   const messagesEndRef = useRef(null);\n//   const fileInputRef = useRef(null);\n//   const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'https://api.forgetai.com';\n//   useEffect(() => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   }, [messages]);\n//   const handleQuery = async (queryText) => {\n//     if (!queryText.trim()) return;\n//     setIsLoading(true);\n//     setMessages(prev => [...prev, { role: 'user', content: queryText }]);\n//     try {\n//       const token = await getToken();\n//       const response = await axios.post(\n//         `${apiUrl}/api/query`,\n//         { \n//           text: queryText, \n//           userId,\n//           sessionId: '' \n//         },\n//         { headers: { Authorization: `Bearer ${token}` } }\n//       );\n//       const aiResponse = response.data.response || response.data.message || JSON.stringify(response.data);\n//       setMessages(prev => [...prev, { role: 'assistant', content: aiResponse }]);\n//     } catch (error) {\n//       const errorMessage = error.response?.data?.error || 'Sorry, I encountered an error processing your query.';\n//       setMessages(prev => [...prev, { role: 'assistant', content: errorMessage }]);\n//     } finally {\n//       setIsLoading(false);\n//       setInputText('');\n//     }\n//   };\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     handleQuery(inputText);\n//   };\n//   const handleFileUpload = (e) => {\n//     const file = e.target.files[0];\n//     if (file && file.type === 'application/pdf') {\n//       setUploadData(prev => ({ ...prev, pdfFile: file }));\n//     }\n//   };\n//   const handleUpload = async (type) => {\n//     setIsLoading(true);\n//     try {\n//       const token = await getToken();\n//       let response;\n//       let successMessage;\n//       switch (type) {\n//         case 'thought':\n//           response = await axios.post(\n//             `${apiUrl}/api/save`,\n//             { \n//               selected_type: 'note', \n//               text: uploadData.text, \n//               user_id: userId \n//             },\n//             { headers: { Authorization: `Bearer ${token}` } }\n//           );\n//           successMessage = `Thought saved successfully!`;\n//           break;\n//         case 'tweet':\n//           response = await axios.post(\n//             `${apiUrl}/api/save-tweet`,\n//             { tweetUrl: uploadData.tweetUrl },\n//             { headers: { Authorization: `Bearer ${token}` } }\n//           );\n//           successMessage = `Tweet saved successfully!`;\n//           break;\n//         case 'pdf':\n//           if (!uploadData.pdfFile) {\n//             throw new Error('No PDF file selected');\n//           }\n//           const formData = new FormData();\n//           formData.append('pdf', uploadData.pdfFile);\n//           response = await axios.post(\n//             `${apiUrl}/api/save-pdf`,\n//             formData,\n//             {\n//               headers: {\n//                 Authorization: `Bearer ${token}`,\n//                 'Content-Type': 'multipart/form-data',\n//               },\n//             }\n//           );\n//           successMessage = `PDF \"${uploadData.pdfFile.name}\" uploaded successfully!`;\n//           break;\n//         default:\n//           throw new Error('Invalid upload type');\n//       }\n//       // Reset form and show success message\n//       setUploadData({ text: '', tweetUrl: '', pdfFile: null });\n//       setActiveUploadType(null);\n//       setMessages(prev => [...prev, \n//         { role: 'system', content: successMessage },\n//         { role: 'assistant', content: 'Your content is now safely stored in your memory bank. You can ask me about it anytime!' }\n//       ]);\n//     } catch (error) {\n//       const errorMessage = error.response?.data?.error || error.message || 'Failed to upload content';\n//       setMessages(prev => [...prev, { role: 'system', content: `Error: ${errorMessage}` }]);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n//   return (\n//     <div className=\"min-h-screen flex flex-col bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800\">\n//       {/* Include your Header component */}\n//       <Header />\n//       {/* Main Dashboard */}\n//       <main className=\"flex-1 flex flex-col max-w-6xl mx-auto w-full px-4 py-6 md:py-8\">\n//         {/* Chat Section */}\n//         <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden mb-6\">\n//           <div className=\"border-b border-gray-200 dark:border-gray-700 px-6 py-4 flex items-center justify-between\">\n//             <h2 className=\"text-xl font-bold text-gray-800 dark:text-white flex items-center\">\n//               <span className=\"flex space-x-2 items-center\">\n//                 <span className=\"bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-full p-1\">\n//                   <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n//                     <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\n//                   </svg>\n//                 </span>\n//                 <span>Chat with ForgetAI</span>\n//               </span>\n//             </h2>\n//           </div>\n//           {/* Chat Messages */}\n//           <div className=\"p-6 max-h-[350px] overflow-y-auto space-y-4 bg-gray-50 dark:bg-gray-900\">\n//             {messages.map((message, index) => (\n//               <div \n//                 key={index} \n//                 className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n//               >\n//                 <div \n//                   className={`max-w-[85%] rounded-2xl px-5 py-3 ${\n//                     message.role === 'user' \n//                       ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white' \n//                       : message.role === 'system'\n//                         ? 'bg-gradient-to-r from-amber-400 to-orange-500 text-white' \n//                         : 'bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-700'\n//                   }`}\n//                 >\n//                   <p className=\"whitespace-pre-wrap\">{message.content}</p>\n//                 </div>\n//               </div>\n//             ))}\n//             {isLoading && (\n//               <div className=\"flex justify-start\">\n//                 <div className=\"bg-white dark:bg-gray-800 rounded-2xl px-4 py-3 flex items-center space-x-2 border border-gray-200 dark:border-gray-700\">\n//                   <Loader2 className=\"h-4 w-4 animate-spin text-indigo-500\" />\n//                   <p className=\"text-gray-600 dark:text-gray-400\">Thinking...</p>\n//                 </div>\n//               </div>\n//             )}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           {/* Chat Input */}\n//           <div className=\"px-6 py-4 bg-white dark:bg-gray-800\">\n//             <form onSubmit={handleSubmit} className=\"flex space-x-2\">\n//               <div className=\"flex-1 relative\">\n//                 <input\n//                   type=\"text\"\n//                   value={inputText}\n//                   onChange={(e) => setInputText(e.target.value)}\n//                   placeholder=\"Ask anything about your saved content...\"\n//                   className=\"w-full h-12 px-5 rounded-full border border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n//                   disabled={isLoading}\n//                 />\n//               </div>\n//               <button\n//                 type=\"submit\"\n//                 disabled={isLoading || !inputText.trim()}\n//                 className=\"h-12 px-5 rounded-full bg-gradient-to-r from-indigo-500 to-purple-600 text-white hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n//               >\n//                 {isLoading ? (\n//                   <>\n//                     <Loader2 className=\"h-5 w-5 animate-spin\" />\n//                     <span>Processing</span>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <span>Ask</span>\n//                     <Send className=\"h-5 w-5\" />\n//                   </>\n//                 )}\n//               </button>\n//             </form>\n//           </div>\n//         </section>\n//         {/* Add Content Section */}\n//         <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden\">\n//           <div className=\"border-b border-gray-200 dark:border-gray-700 px-6 py-4 flex items-center justify-between\">\n//             <h2 className=\"text-xl font-bold text-gray-800 dark:text-white flex items-center\">\n//               <span className=\"flex space-x-2 items-center\">\n//                 <span className=\"bg-gradient-to-r from-pink-500 to-rose-500 text-white rounded-full p-1\">\n//                   <Plus className=\"h-5 w-5\" />\n//                 </span>\n//                 <span>Add to Memory</span>\n//               </span>\n//             </h2>\n//             <div className=\"flex space-x-1\">\n//               {activeUploadType && (\n//                 <button \n//                   onClick={() => setActiveUploadType(null)}\n//                   className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n//                 >\n//                   <X className=\"h-5 w-5\" />\n//                 </button>\n//               )}\n//             </div>\n//           </div>\n//           {/* Add Options Buttons */}\n//           {!activeUploadType && (\n//             <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-6\">\n//               <button\n//                 onClick={() => setActiveUploadType('thought')}\n//                 className=\"flex items-center justify-center space-x-3 p-6 rounded-xl bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/30 dark:to-blue-800/20 border border-blue-200 dark:border-blue-800 hover:shadow-md transition-all duration-200\"\n//               >\n//                 <div className=\"p-3 rounded-full bg-blue-100 dark:bg-blue-900\">\n//                   <FileText className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n//                 </div>\n//                 <div className=\"text-left\">\n//                   <h3 className=\"text-lg font-medium text-blue-800 dark:text-blue-300\">Add Thought</h3>\n//                   <p className=\"text-sm text-blue-600 dark:text-blue-400\">Save notes or ideas</p>\n//                 </div>\n//               </button>\n//               <button\n//                 onClick={() => setActiveUploadType('tweet')}\n//                 className=\"flex items-center justify-center space-x-3 p-6 rounded-xl bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/30 dark:to-purple-800/20 border border-purple-200 dark:border-purple-800 hover:shadow-md transition-all duration-200\"\n//               >\n//                 <div className=\"p-3 rounded-full bg-purple-100 dark:bg-purple-900\">\n//                   <Twitter className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n//                 </div>\n//                 <div className=\"text-left\">\n//                   <h3 className=\"text-lg font-medium text-purple-800 dark:text-purple-300\">Save Tweet</h3>\n//                   <p className=\"text-sm text-purple-600 dark:text-purple-400\">Archive tweets</p>\n//                 </div>\n//               </button>\n//               <button\n//                 onClick={() => {\n//                   setActiveUploadType('pdf');\n//                   fileInputRef.current.click();\n//                 }}\n//                 className=\"flex items-center justify-center space-x-3 p-6 rounded-xl bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-900/30 dark:to-orange-800/20 border border-orange-200 dark:border-orange-800 hover:shadow-md transition-all duration-200\"\n//               >\n//                 <input\n//                   type=\"file\"\n//                   ref={fileInputRef}\n//                   accept=\"application/pdf\"\n//                   onChange={handleFileUpload}\n//                   className=\"hidden\"\n//                 />\n//                 <div className=\"p-3 rounded-full bg-orange-100 dark:bg-orange-900\">\n//                   <FileUp className=\"h-6 w-6 text-orange-600 dark:text-orange-400\" />\n//                 </div>\n//                 <div className=\"text-left\">\n//                   <h3 className=\"text-lg font-medium text-orange-800 dark:text-orange-300\">Upload PDF</h3>\n//                   <p className=\"text-sm text-orange-600 dark:text-orange-400\">Store documents</p>\n//                 </div>\n//               </button>\n//             </div>\n//           )}\n//           {/* Thought Form */}\n//           {activeUploadType === 'thought' && (\n//             <div className=\"p-6\">\n//               <textarea\n//                 value={uploadData.text}\n//                 onChange={(e) => setUploadData(prev => ({ ...prev, text: e.target.value }))}\n//                 placeholder=\"Enter your thought or note here...\"\n//                 className=\"w-full h-32 p-4 rounded-lg border border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none mb-4\"\n//               />\n//               <div className=\"flex justify-end\">\n//                 <button\n//                   onClick={() => handleUpload('thought')}\n//                   disabled={isLoading || !uploadData.text.trim()}\n//                   className=\"px-5 py-2 rounded-lg bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n//                 >\n//                   {isLoading ? (\n//                     <>\n//                       <Loader2 className=\"h-5 w-5 animate-spin\" />\n//                       <span>Saving...</span>\n//                     </>\n//                   ) : (\n//                     <>\n//                       <span>Save Thought</span>\n//                       <ChevronRight className=\"h-5 w-5\" />\n//                     </>\n//                   )}\n//                 </button>\n//               </div>\n//             </div>\n//           )}\n//           {/* Tweet Form */}\n//           {activeUploadType === 'tweet' && (\n//             <div className=\"p-6\">\n//               <input\n//                 type=\"text\"\n//                 value={uploadData.tweetUrl}\n//                 onChange={(e) => setUploadData(prev => ({ ...prev, tweetUrl: e.target.value }))}\n//                 placeholder=\"Paste tweet URL here (e.g., https://twitter.com/username/status/123456789)\"\n//                 className=\"w-full h-12 px-4 rounded-lg border border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-purple-500 focus:border-transparent mb-4\"\n//               />\n//               <div className=\"flex justify-end\">\n//                 <button\n//                   onClick={() => handleUpload('tweet')}\n//                   disabled={isLoading || !uploadData.tweetUrl.trim()}\n//                   className=\"px-5 py-2 rounded-lg bg-gradient-to-r from-purple-500 to-purple-600 text-white hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n//                 >\n//                   {isLoading ? (\n//                     <>\n//                       <Loader2 className=\"h-5 w-5 animate-spin\" />\n//                       <span>Saving...</span>\n//                     </>\n//                   ) : (\n//                     <>\n//                       <span>Save Tweet</span>\n//                       <ChevronRight className=\"h-5 w-5\" />\n//                     </>\n//                   )}\n//                 </button>\n//               </div>\n//             </div>\n//           )}\n//           {/* PDF Upload Form */}\n//           {activeUploadType === 'pdf' && (\n//             <div className=\"p-6\">\n//               <div className=\"border-2 border-dashed border-orange-300 dark:border-orange-700 rounded-lg p-6 text-center mb-4\">\n//                 {uploadData.pdfFile ? (\n//                   <div className=\"flex flex-col items-center space-y-2\">\n//                     <FileText className=\"h-10 w-10 text-orange-500\" />\n//                     <p className=\"text-gray-800 dark:text-gray-200 font-medium\">{uploadData.pdfFile.name}</p>\n//                     <p className=\"text-gray-500 dark:text-gray-400 text-sm\">\n//                       {(uploadData.pdfFile.size / 1024 / 1024).toFixed(2)} MB\n//                     </p>\n//                     <button\n//                       onClick={() => {\n//                         setUploadData(prev => ({ ...prev, pdfFile: null }));\n//                         fileInputRef.current.value = null;\n//                       }}\n//                       className=\"text-orange-500 hover:text-orange-600 text-sm\"\n//                     >\n//                       Change file\n//                     </button>\n//                   </div>\n//                 ) : (\n//                   <div className=\"flex flex-col items-center space-y-2\">\n//                     <FileUp className=\"h-12 w-12 text-orange-400 dark:text-orange-500 mb-2\" />\n//                     <p className=\"text-gray-700 dark:text-gray-300 font-medium\">Drag & drop your PDF here</p>\n//                     <p className=\"text-gray-500 dark:text-gray-400 text-sm mb-2\">or</p>\n//                     <button\n//                       onClick={() => fileInputRef.current.click()}\n//                       className=\"px-4 py-2 bg-orange-100 dark:bg-orange-900 text-orange-600 dark:text-orange-300 rounded-lg hover:bg-orange-200 dark:hover:bg-orange-800\"\n//                     >\n//                       Browse files\n//                     </button>\n//                   </div>\n//                 )}\n//               </div>\n//               <div className=\"flex justify-end\">\n//                 <button\n//                   onClick={() => handleUpload('pdf')}\n//                   disabled={isLoading || !uploadData.pdfFile}\n//                   className=\"px-5 py-2 rounded-lg bg-gradient-to-r from-orange-500 to-orange-600 text-white hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n//                 >\n//                   {isLoading ? (\n//                     <>\n//                       <Loader2 className=\"h-5 w-5 animate-spin\" />\n//                       <span>Uploading...</span>\n//                     </>\n//                   ) : (\n//                     <>\n//                       <span>Upload PDF</span>\n//                       <ChevronRight className=\"h-5 w-5\" />\n//                     </>\n//                   )}\n//                 </button>\n//               </div>\n//             </div>\n//           )}\n//         </section>\n//       </main>\n//     </div>\n//   );\n// }\n\n\nfunction dashboard() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: \"dashboard\"\n    }, void 0, false, {\n        fileName: \"/Users/siddhantgupta/Documents/projects/forgetai/app/(main)/dashboard/page.jsx\",\n        lineNumber: 634,\n        columnNumber: 5\n    }, this);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/(main)/dashboard/page.jsx\n"));

/***/ })

});