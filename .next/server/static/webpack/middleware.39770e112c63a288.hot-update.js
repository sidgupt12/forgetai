/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./middleware.js":
/*!***********************!*\
  !*** ./middleware.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _clerk_nextjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/nextjs */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/index.js\");\n// import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\n// import { NextResponse } from 'next/server';\n// const isProtectedRoute = createRouteMatcher(['/dashboard(.*)', '/forum(.*)']);\n// export default clerkMiddleware(async (auth, req) => {\n//   if (isProtectedRoute(req) && !auth.userId) {\n//     const signInUrl = new URL('/sign-in', req.url);\n//     signInUrl.searchParams.set('redirect_url', req.url);\n//     return NextResponse.redirect(signInUrl);\n//   }\n//   return NextResponse.next();\n// });\n// export const config = {\n//   matcher: [\n//     '/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\n//     '/(api|trpc)(.*)',\n//   ],\n// };\n\n// This replaces the current middleware with Clerk's simpler and more reliable authMiddleware\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_clerk_nextjs__WEBPACK_IMPORTED_MODULE_0__.authMiddleware)({\n    // Public routes that don't require authentication\n    publicRoutes: [\n        \"/\",\n        \"/sign-in(.*)\",\n        \"/sign-up(.*)\",\n        \"/api/webhook(.*)\"\n    ],\n    // For logged in users, ensure redirect works properly\n    afterAuth (auth, req) {\n        // Handle redirects after authentication state is determined\n        if (auth.isPublicRoute) {\n            // Don't do anything for public routes\n            return;\n        }\n        // If user is trying to access a private route and is not authenticated\n        if (!auth.userId) {\n            const signInUrl = new URL('/sign-in', req.url);\n            signInUrl.searchParams.set('redirect_url', req.url);\n            return Response.redirect(signInUrl);\n        }\n    // User is authenticated and accessing a protected route - do nothing, allow access\n    }\n}));\n// Define which routes this middleware will run on\nconst config = {\n    matcher: [\n        // Match all routes\n        \"/(.*)\",\n        // Don't match static files or API routes that should be public\n        \"/((?!_next/static|_next/image|favicon.ico).*)\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbWlkZGxld2FyZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw4RUFBOEU7QUFDOUUsOENBQThDO0FBRTlDLGlGQUFpRjtBQUVqRix3REFBd0Q7QUFDeEQsaURBQWlEO0FBQ2pELHNEQUFzRDtBQUN0RCwyREFBMkQ7QUFFM0QsK0NBQStDO0FBQy9DLE1BQU07QUFFTixnQ0FBZ0M7QUFDaEMsTUFBTTtBQUVOLDBCQUEwQjtBQUMxQixlQUFlO0FBQ2YsNkhBQTZIO0FBQzdILHlCQUF5QjtBQUN6QixPQUFPO0FBQ1AsS0FBSztBQUUwQztBQUUvQyw2RkFBNkY7QUFDN0YsaUVBQWVBLDZEQUFjQSxDQUFDO0lBQzVCLGtEQUFrRDtJQUNsREMsY0FBYztRQUNaO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFFRCxzREFBc0Q7SUFDdERDLFdBQVVDLElBQUksRUFBRUMsR0FBRztRQUNqQiw0REFBNEQ7UUFDNUQsSUFBSUQsS0FBS0UsYUFBYSxFQUFFO1lBQ3RCLHNDQUFzQztZQUN0QztRQUNGO1FBRUEsdUVBQXVFO1FBQ3ZFLElBQUksQ0FBQ0YsS0FBS0csTUFBTSxFQUFFO1lBQ2hCLE1BQU1DLFlBQVksSUFBSUMsSUFBSSxZQUFZSixJQUFJSyxHQUFHO1lBQzdDRixVQUFVRyxZQUFZLENBQUNDLEdBQUcsQ0FBQyxnQkFBZ0JQLElBQUlLLEdBQUc7WUFDbEQsT0FBT0csU0FBU0MsUUFBUSxDQUFDTjtRQUMzQjtJQUVBLG1GQUFtRjtJQUNyRjtBQUNGLEVBQUUsRUFBQztBQUVILGtEQUFrRDtBQUMzQyxNQUFNTyxTQUFTO0lBQ3BCQyxTQUFTO1FBQ1AsbUJBQW1CO1FBQ25CO1FBQ0EsK0RBQStEO1FBQy9EO0tBQ0Q7QUFDSCxFQUFFIiwic291cmNlcyI6WyIvVXNlcnMvc2lkZGhhbnRndXB0YS9Eb2N1bWVudHMvcHJvamVjdHMvZm9yZ2V0YWkvbWlkZGxld2FyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgeyBjbGVya01pZGRsZXdhcmUsIGNyZWF0ZVJvdXRlTWF0Y2hlciB9IGZyb20gJ0BjbGVyay9uZXh0anMvc2VydmVyJztcbi8vIGltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcblxuLy8gY29uc3QgaXNQcm90ZWN0ZWRSb3V0ZSA9IGNyZWF0ZVJvdXRlTWF0Y2hlcihbJy9kYXNoYm9hcmQoLiopJywgJy9mb3J1bSguKiknXSk7XG5cbi8vIGV4cG9ydCBkZWZhdWx0IGNsZXJrTWlkZGxld2FyZShhc3luYyAoYXV0aCwgcmVxKSA9PiB7XG4vLyAgIGlmIChpc1Byb3RlY3RlZFJvdXRlKHJlcSkgJiYgIWF1dGgudXNlcklkKSB7XG4vLyAgICAgY29uc3Qgc2lnbkluVXJsID0gbmV3IFVSTCgnL3NpZ24taW4nLCByZXEudXJsKTtcbi8vICAgICBzaWduSW5Vcmwuc2VhcmNoUGFyYW1zLnNldCgncmVkaXJlY3RfdXJsJywgcmVxLnVybCk7XG4gICAgXG4vLyAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5yZWRpcmVjdChzaWduSW5VcmwpO1xuLy8gICB9XG4gIFxuLy8gICByZXR1cm4gTmV4dFJlc3BvbnNlLm5leHQoKTtcbi8vIH0pO1xuXG4vLyBleHBvcnQgY29uc3QgY29uZmlnID0ge1xuLy8gICBtYXRjaGVyOiBbXG4vLyAgICAgJy8oKD8hX25leHR8W14/XSpcXFxcLig/Omh0bWw/fGNzc3xqcyg/IW9uKXxqcGU/Z3x3ZWJwfHBuZ3xnaWZ8c3ZnfHR0Znx3b2ZmMj98aWNvfGNzdnxkb2N4P3x4bHN4P3x6aXB8d2VibWFuaWZlc3QpKS4qKScsXG4vLyAgICAgJy8oYXBpfHRycGMpKC4qKScsXG4vLyAgIF0sXG4vLyB9O1xuXG5pbXBvcnQgeyBhdXRoTWlkZGxld2FyZSB9IGZyb20gXCJAY2xlcmsvbmV4dGpzXCI7XG5cbi8vIFRoaXMgcmVwbGFjZXMgdGhlIGN1cnJlbnQgbWlkZGxld2FyZSB3aXRoIENsZXJrJ3Mgc2ltcGxlciBhbmQgbW9yZSByZWxpYWJsZSBhdXRoTWlkZGxld2FyZVxuZXhwb3J0IGRlZmF1bHQgYXV0aE1pZGRsZXdhcmUoe1xuICAvLyBQdWJsaWMgcm91dGVzIHRoYXQgZG9uJ3QgcmVxdWlyZSBhdXRoZW50aWNhdGlvblxuICBwdWJsaWNSb3V0ZXM6IFtcbiAgICBcIi9cIixcbiAgICBcIi9zaWduLWluKC4qKVwiLFxuICAgIFwiL3NpZ24tdXAoLiopXCIsXG4gICAgXCIvYXBpL3dlYmhvb2soLiopXCJcbiAgXSxcbiAgXG4gIC8vIEZvciBsb2dnZWQgaW4gdXNlcnMsIGVuc3VyZSByZWRpcmVjdCB3b3JrcyBwcm9wZXJseVxuICBhZnRlckF1dGgoYXV0aCwgcmVxKSB7XG4gICAgLy8gSGFuZGxlIHJlZGlyZWN0cyBhZnRlciBhdXRoZW50aWNhdGlvbiBzdGF0ZSBpcyBkZXRlcm1pbmVkXG4gICAgaWYgKGF1dGguaXNQdWJsaWNSb3V0ZSkge1xuICAgICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgZm9yIHB1YmxpYyByb3V0ZXNcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB1c2VyIGlzIHRyeWluZyB0byBhY2Nlc3MgYSBwcml2YXRlIHJvdXRlIGFuZCBpcyBub3QgYXV0aGVudGljYXRlZFxuICAgIGlmICghYXV0aC51c2VySWQpIHtcbiAgICAgIGNvbnN0IHNpZ25JblVybCA9IG5ldyBVUkwoJy9zaWduLWluJywgcmVxLnVybCk7XG4gICAgICBzaWduSW5Vcmwuc2VhcmNoUGFyYW1zLnNldCgncmVkaXJlY3RfdXJsJywgcmVxLnVybCk7XG4gICAgICByZXR1cm4gUmVzcG9uc2UucmVkaXJlY3Qoc2lnbkluVXJsKTtcbiAgICB9XG4gICAgXG4gICAgLy8gVXNlciBpcyBhdXRoZW50aWNhdGVkIGFuZCBhY2Nlc3NpbmcgYSBwcm90ZWN0ZWQgcm91dGUgLSBkbyBub3RoaW5nLCBhbGxvdyBhY2Nlc3NcbiAgfVxufSk7XG5cbi8vIERlZmluZSB3aGljaCByb3V0ZXMgdGhpcyBtaWRkbGV3YXJlIHdpbGwgcnVuIG9uXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xuICBtYXRjaGVyOiBbXG4gICAgLy8gTWF0Y2ggYWxsIHJvdXRlc1xuICAgIFwiLyguKilcIixcbiAgICAvLyBEb24ndCBtYXRjaCBzdGF0aWMgZmlsZXMgb3IgQVBJIHJvdXRlcyB0aGF0IHNob3VsZCBiZSBwdWJsaWNcbiAgICBcIi8oKD8hX25leHQvc3RhdGljfF9uZXh0L2ltYWdlfGZhdmljb24uaWNvKS4qKVwiLFxuICBdLFxufTsiXSwibmFtZXMiOlsiYXV0aE1pZGRsZXdhcmUiLCJwdWJsaWNSb3V0ZXMiLCJhZnRlckF1dGgiLCJhdXRoIiwicmVxIiwiaXNQdWJsaWNSb3V0ZSIsInVzZXJJZCIsInNpZ25JblVybCIsIlVSTCIsInVybCIsInNlYXJjaFBhcmFtcyIsInNldCIsIlJlc3BvbnNlIiwicmVkaXJlY3QiLCJjb25maWciLCJtYXRjaGVyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./middleware.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/backend/dist/jwt/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@clerk/backend/dist/jwt/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeJwt: () => (/* binding */ decodeJwt2),\n/* harmony export */   hasValidSignature: () => (/* binding */ hasValidSignature2),\n/* harmony export */   signJwt: () => (/* binding */ signJwt2),\n/* harmony export */   verifyJwt: () => (/* binding */ verifyJwt2)\n/* harmony export */ });\n/* harmony import */ var _chunk_P263NW7Z_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunk-P263NW7Z.mjs */ \"(middleware)/./node_modules/@clerk/backend/dist/chunk-P263NW7Z.mjs\");\n/* harmony import */ var _chunk_AT3FJU3M_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunk-AT3FJU3M.mjs */ \"(middleware)/./node_modules/@clerk/backend/dist/chunk-AT3FJU3M.mjs\");\n/* harmony import */ var _chunk_5JS2VYLU_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunk-5JS2VYLU.mjs */ \"(middleware)/./node_modules/@clerk/backend/dist/chunk-5JS2VYLU.mjs\");\n\n\n\n\n// src/jwt/signJwt.ts\nfunction encodeJwtData(value) {\n  const stringified = JSON.stringify(value);\n  const encoder = new TextEncoder();\n  const encoded = encoder.encode(stringified);\n  return _chunk_AT3FJU3M_mjs__WEBPACK_IMPORTED_MODULE_1__.base64url.stringify(encoded, { pad: false });\n}\nasync function signJwt(payload, key, options) {\n  if (!options.algorithm) {\n    throw new Error(\"No algorithm specified\");\n  }\n  const encoder = new TextEncoder();\n  const algorithm = (0,_chunk_AT3FJU3M_mjs__WEBPACK_IMPORTED_MODULE_1__.getCryptoAlgorithm)(options.algorithm);\n  if (!algorithm) {\n    return {\n      errors: [new _chunk_5JS2VYLU_mjs__WEBPACK_IMPORTED_MODULE_2__.SignJWTError(`Unsupported algorithm ${options.algorithm}`)]\n    };\n  }\n  const cryptoKey = await (0,_chunk_AT3FJU3M_mjs__WEBPACK_IMPORTED_MODULE_1__.importKey)(key, algorithm, \"sign\");\n  const header = options.header || { typ: \"JWT\" };\n  header.alg = options.algorithm;\n  payload.iat = Math.floor(Date.now() / 1e3);\n  const encodedHeader = encodeJwtData(header);\n  const encodedPayload = encodeJwtData(payload);\n  const firstPart = `${encodedHeader}.${encodedPayload}`;\n  try {\n    const signature = await _chunk_AT3FJU3M_mjs__WEBPACK_IMPORTED_MODULE_1__.runtime.crypto.subtle.sign(algorithm, cryptoKey, encoder.encode(firstPart));\n    const encodedSignature = `${firstPart}.${_chunk_AT3FJU3M_mjs__WEBPACK_IMPORTED_MODULE_1__.base64url.stringify(new Uint8Array(signature), { pad: false })}`;\n    return { data: encodedSignature };\n  } catch (error) {\n    return { errors: [new _chunk_5JS2VYLU_mjs__WEBPACK_IMPORTED_MODULE_2__.SignJWTError(error?.message)] };\n  }\n}\n\n// src/jwt/index.ts\nvar verifyJwt2 = (0,_chunk_P263NW7Z_mjs__WEBPACK_IMPORTED_MODULE_0__.withLegacyReturn)(_chunk_AT3FJU3M_mjs__WEBPACK_IMPORTED_MODULE_1__.verifyJwt);\nvar decodeJwt2 = (0,_chunk_P263NW7Z_mjs__WEBPACK_IMPORTED_MODULE_0__.withLegacySyncReturn)(_chunk_AT3FJU3M_mjs__WEBPACK_IMPORTED_MODULE_1__.decodeJwt);\nvar signJwt2 = (0,_chunk_P263NW7Z_mjs__WEBPACK_IMPORTED_MODULE_0__.withLegacyReturn)(signJwt);\nvar hasValidSignature2 = (0,_chunk_P263NW7Z_mjs__WEBPACK_IMPORTED_MODULE_0__.withLegacyReturn)(_chunk_AT3FJU3M_mjs__WEBPACK_IMPORTED_MODULE_1__.hasValidSignature);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9iYWNrZW5kL2Rpc3Qvand0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRytCO0FBU0E7QUFHQTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsMERBQVMsc0JBQXNCLFlBQVk7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVFQUFrQjtBQUN0QztBQUNBO0FBQ0EsbUJBQW1CLDZEQUFZLDBCQUEwQixrQkFBa0I7QUFDM0U7QUFDQTtBQUNBLDBCQUEwQiw4REFBUztBQUNuQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsY0FBYyxHQUFHLGVBQWU7QUFDdkQ7QUFDQSw0QkFBNEIsd0RBQU87QUFDbkMsZ0NBQWdDLFVBQVUsR0FBRywwREFBUyx3Q0FBd0MsWUFBWSxFQUFFO0FBQzVHLGFBQWE7QUFDYixJQUFJO0FBQ0osYUFBYSxhQUFhLDZEQUFZO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIscUVBQWdCLENBQUMsMERBQVM7QUFDM0MsaUJBQWlCLHlFQUFvQixDQUFDLDBEQUFTO0FBQy9DLGVBQWUscUVBQWdCO0FBQy9CLHlCQUF5QixxRUFBZ0IsQ0FBQyxrRUFBaUI7QUFNekQ7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3NpZGRoYW50Z3VwdGEvRG9jdW1lbnRzL3Byb2plY3RzL2ZvcmdldGFpL25vZGVfbW9kdWxlcy9AY2xlcmsvYmFja2VuZC9kaXN0L2p3dC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgd2l0aExlZ2FjeVJldHVybixcbiAgd2l0aExlZ2FjeVN5bmNSZXR1cm5cbn0gZnJvbSBcIi4uL2NodW5rLVAyNjNOVzdaLm1qc1wiO1xuaW1wb3J0IHtcbiAgYmFzZTY0dXJsLFxuICBkZWNvZGVKd3QsXG4gIGdldENyeXB0b0FsZ29yaXRobSxcbiAgaGFzVmFsaWRTaWduYXR1cmUsXG4gIGltcG9ydEtleSxcbiAgcnVudGltZSxcbiAgdmVyaWZ5Snd0XG59IGZyb20gXCIuLi9jaHVuay1BVDNGSlUzTS5tanNcIjtcbmltcG9ydCB7XG4gIFNpZ25KV1RFcnJvclxufSBmcm9tIFwiLi4vY2h1bmstNUpTMlZZTFUubWpzXCI7XG5cbi8vIHNyYy9qd3Qvc2lnbkp3dC50c1xuZnVuY3Rpb24gZW5jb2RlSnd0RGF0YSh2YWx1ZSkge1xuICBjb25zdCBzdHJpbmdpZmllZCA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICBjb25zdCBlbmNvZGVkID0gZW5jb2Rlci5lbmNvZGUoc3RyaW5naWZpZWQpO1xuICByZXR1cm4gYmFzZTY0dXJsLnN0cmluZ2lmeShlbmNvZGVkLCB7IHBhZDogZmFsc2UgfSk7XG59XG5hc3luYyBmdW5jdGlvbiBzaWduSnd0KHBheWxvYWQsIGtleSwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMuYWxnb3JpdGhtKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gYWxnb3JpdGhtIHNwZWNpZmllZFwiKTtcbiAgfVxuICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gIGNvbnN0IGFsZ29yaXRobSA9IGdldENyeXB0b0FsZ29yaXRobShvcHRpb25zLmFsZ29yaXRobSk7XG4gIGlmICghYWxnb3JpdGhtKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogW25ldyBTaWduSldURXJyb3IoYFVuc3VwcG9ydGVkIGFsZ29yaXRobSAke29wdGlvbnMuYWxnb3JpdGhtfWApXVxuICAgIH07XG4gIH1cbiAgY29uc3QgY3J5cHRvS2V5ID0gYXdhaXQgaW1wb3J0S2V5KGtleSwgYWxnb3JpdGhtLCBcInNpZ25cIik7XG4gIGNvbnN0IGhlYWRlciA9IG9wdGlvbnMuaGVhZGVyIHx8IHsgdHlwOiBcIkpXVFwiIH07XG4gIGhlYWRlci5hbGcgPSBvcHRpb25zLmFsZ29yaXRobTtcbiAgcGF5bG9hZC5pYXQgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxZTMpO1xuICBjb25zdCBlbmNvZGVkSGVhZGVyID0gZW5jb2RlSnd0RGF0YShoZWFkZXIpO1xuICBjb25zdCBlbmNvZGVkUGF5bG9hZCA9IGVuY29kZUp3dERhdGEocGF5bG9hZCk7XG4gIGNvbnN0IGZpcnN0UGFydCA9IGAke2VuY29kZWRIZWFkZXJ9LiR7ZW5jb2RlZFBheWxvYWR9YDtcbiAgdHJ5IHtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBydW50aW1lLmNyeXB0by5zdWJ0bGUuc2lnbihhbGdvcml0aG0sIGNyeXB0b0tleSwgZW5jb2Rlci5lbmNvZGUoZmlyc3RQYXJ0KSk7XG4gICAgY29uc3QgZW5jb2RlZFNpZ25hdHVyZSA9IGAke2ZpcnN0UGFydH0uJHtiYXNlNjR1cmwuc3RyaW5naWZ5KG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSksIHsgcGFkOiBmYWxzZSB9KX1gO1xuICAgIHJldHVybiB7IGRhdGE6IGVuY29kZWRTaWduYXR1cmUgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcnM6IFtuZXcgU2lnbkpXVEVycm9yKGVycm9yPy5tZXNzYWdlKV0gfTtcbiAgfVxufVxuXG4vLyBzcmMvand0L2luZGV4LnRzXG52YXIgdmVyaWZ5Snd0MiA9IHdpdGhMZWdhY3lSZXR1cm4odmVyaWZ5Snd0KTtcbnZhciBkZWNvZGVKd3QyID0gd2l0aExlZ2FjeVN5bmNSZXR1cm4oZGVjb2RlSnd0KTtcbnZhciBzaWduSnd0MiA9IHdpdGhMZWdhY3lSZXR1cm4oc2lnbkp3dCk7XG52YXIgaGFzVmFsaWRTaWduYXR1cmUyID0gd2l0aExlZ2FjeVJldHVybihoYXNWYWxpZFNpZ25hdHVyZSk7XG5leHBvcnQge1xuICBkZWNvZGVKd3QyIGFzIGRlY29kZUp3dCxcbiAgaGFzVmFsaWRTaWduYXR1cmUyIGFzIGhhc1ZhbGlkU2lnbmF0dXJlLFxuICBzaWduSnd0MiBhcyBzaWduSnd0LFxuICB2ZXJpZnlKd3QyIGFzIHZlcmlmeUp3dFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/backend/dist/jwt/index.mjs\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ClientClerkProvider: () => (/* binding */ ClientClerkProvider)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ "(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js");

const ClientClerkProvider = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call ClientClerkProvider() from the server but ClientClerkProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js",
"ClientClerkProvider",
);

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/keyless-cookie-sync.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/client/keyless-cookie-sync.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeylessCookieSync: () => (/* binding */ KeylessCookieSync)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ "(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js");

const KeylessCookieSync = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call KeylessCookieSync() from the server but KeylessCookieSync is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/app-router/client/keyless-cookie-sync.js",
"KeylessCookieSync",
);

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/keyless-actions.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/keyless-actions.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOrReadKeylessAction: () => (/* binding */ createOrReadKeylessAction),\n/* harmony export */   deleteKeylessAction: () => (/* binding */ deleteKeylessAction),\n/* harmony export */   syncKeylessConfigAction: () => (/* binding */ syncKeylessConfigAction)\n/* harmony export */ });\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(middleware)/./node_modules/next/dist/esm/api/headers.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/navigation */ \"(middleware)/./node_modules/next/dist/esm/api/navigation.react-server.js\");\n/* harmony import */ var _server_errorThrower__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../server/errorThrower */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/errorThrower.js\");\n/* harmony import */ var _server_headers_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../server/headers-utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/headers-utils.js\");\n/* harmony import */ var _server_keyless__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/keyless */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless.js\");\n/* harmony import */ var _utils_feature_flags__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/feature-flags */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/feature-flags.js\");\n\"use server\";\n\n\n\n\n\n\nasync function syncKeylessConfigAction(args) {\n    const { claimUrl, publishableKey, secretKey, returnUrl } = args;\n    const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n    const request = new Request(\"https://placeholder.com\", {\n        headers: await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.headers)()\n    });\n    const keyless = await (0,_server_keyless__WEBPACK_IMPORTED_MODULE_2__.getKeylessCookieValue)((name)=>{\n        var _a;\n        return (_a = cookieStore.get(name)) == null ? void 0 : _a.value;\n    });\n    const pksMatch = (keyless == null ? void 0 : keyless.publishableKey) === publishableKey;\n    const sksMatch = (keyless == null ? void 0 : keyless.secretKey) === secretKey;\n    if (pksMatch && sksMatch) {\n        return;\n    }\n    cookieStore.set(await (0,_server_keyless__WEBPACK_IMPORTED_MODULE_2__.getKeylessCookieName)(), JSON.stringify({\n        claimUrl,\n        publishableKey,\n        secretKey\n    }), {\n        secure: true,\n        httpOnly: true\n    });\n    if ((0,_server_headers_utils__WEBPACK_IMPORTED_MODULE_3__.detectClerkMiddleware)(request)) {\n        (0,next_navigation__WEBPACK_IMPORTED_MODULE_1__.redirect)(`/clerk-sync-keyless?returnUrl=${returnUrl}`, next_navigation__WEBPACK_IMPORTED_MODULE_1__.RedirectType.replace);\n        return;\n    }\n    return;\n}\nasync function createOrReadKeylessAction() {\n    if (!_utils_feature_flags__WEBPACK_IMPORTED_MODULE_4__.canUseKeyless) {\n        return null;\n    }\n    const result = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../server/keyless-node.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\")).then((m)=>m.createOrReadKeyless()).catch(()=>null);\n    if (!result) {\n        _server_errorThrower__WEBPACK_IMPORTED_MODULE_5__.errorThrower.throwMissingPublishableKeyError();\n        return null;\n    }\n    const { clerkDevelopmentCache, createKeylessModeMessage } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../server/keyless-log-cache.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-log-cache.js\"));\n    clerkDevelopmentCache == null ? void 0 : clerkDevelopmentCache.log({\n        cacheKey: result.publishableKey,\n        msg: createKeylessModeMessage(result)\n    });\n    const { claimUrl, publishableKey, secretKey, apiKeysUrl } = result;\n    void (await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)()).set(await (0,_server_keyless__WEBPACK_IMPORTED_MODULE_2__.getKeylessCookieName)(), JSON.stringify({\n        claimUrl,\n        publishableKey,\n        secretKey\n    }), {\n        secure: false,\n        httpOnly: false\n    });\n    return {\n        claimUrl,\n        publishableKey,\n        apiKeysUrl\n    };\n}\nasync function deleteKeylessAction() {\n    if (!_utils_feature_flags__WEBPACK_IMPORTED_MODULE_4__.canUseKeyless) {\n        return;\n    }\n    await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../server/keyless-node.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\")).then((m)=>m.removeKeyless()).catch(()=>{});\n    return;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9rZXlsZXNzLWFjdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDZ0Q7QUFDUztBQUNIO0FBQ1U7QUFDZ0I7QUFDekI7QUFDdkQsZUFBZVMsd0JBQXdCQyxJQUFJO0lBQ3pDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxjQUFjLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFFLEdBQUdKO0lBQzNELE1BQU1LLGNBQWMsTUFBTWYscURBQU9BO0lBQ2pDLE1BQU1nQixVQUFVLElBQUlDLFFBQVEsMkJBQTJCO1FBQUVoQixTQUFTLE1BQU1BLHFEQUFPQTtJQUFHO0lBQ2xGLE1BQU1pQixVQUFVLE1BQU1YLHNFQUFxQkEsQ0FBQyxDQUFDWTtRQUMzQyxJQUFJQztRQUNKLE9BQU8sQ0FBQ0EsS0FBS0wsWUFBWU0sR0FBRyxDQUFDRixLQUFJLEtBQU0sT0FBTyxLQUFLLElBQUlDLEdBQUdFLEtBQUs7SUFDakU7SUFDQSxNQUFNQyxXQUFXLENBQUNMLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFOLGNBQWMsTUFBTUE7SUFDekUsTUFBTVksV0FBVyxDQUFDTixXQUFXLE9BQU8sS0FBSyxJQUFJQSxRQUFRTCxTQUFTLE1BQU1BO0lBQ3BFLElBQUlVLFlBQVlDLFVBQVU7UUFDeEI7SUFDRjtJQUNBVCxZQUFZVSxHQUFHLENBQUMsTUFBTW5CLHFFQUFvQkEsSUFBSW9CLEtBQUtDLFNBQVMsQ0FBQztRQUFFaEI7UUFBVUM7UUFBZ0JDO0lBQVUsSUFBSTtRQUNyR2UsUUFBUTtRQUNSQyxVQUFVO0lBQ1o7SUFDQSxJQUFJeEIsNEVBQXFCQSxDQUFDVyxVQUFVO1FBQ2xDZCx5REFBUUEsQ0FBQyxDQUFDLDhCQUE4QixFQUFFWSxXQUFXLEVBQUVYLHlEQUFZQSxDQUFDMkIsT0FBTztRQUMzRTtJQUNGO0lBQ0E7QUFDRjtBQUNBLGVBQWVDO0lBQ2IsSUFBSSxDQUFDdkIsK0RBQWFBLEVBQUU7UUFDbEIsT0FBTztJQUNUO0lBQ0EsTUFBTXdCLFNBQVMsTUFBTSxrTUFBbUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVDLG1CQUFtQixJQUFJQyxLQUFLLENBQUMsSUFBTTtJQUMxRyxJQUFJLENBQUNKLFFBQVE7UUFDWDVCLDhEQUFZQSxDQUFDaUMsK0JBQStCO1FBQzVDLE9BQU87SUFDVDtJQUNBLE1BQU0sRUFBRUMscUJBQXFCLEVBQUVDLHdCQUF3QixFQUFFLEdBQUcsTUFBTSw0TUFBd0M7SUFDMUdELHlCQUF5QixPQUFPLEtBQUssSUFBSUEsc0JBQXNCRSxHQUFHLENBQUM7UUFDakVDLFVBQVVULE9BQU9wQixjQUFjO1FBQy9COEIsS0FBS0gseUJBQXlCUDtJQUNoQztJQUNBLE1BQU0sRUFBRXJCLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxTQUFTLEVBQUU4QixVQUFVLEVBQUUsR0FBR1g7SUFDNUQsS0FBSyxDQUFDLE1BQU1oQyxxREFBT0EsRUFBQyxFQUFHeUIsR0FBRyxDQUFDLE1BQU1uQixxRUFBb0JBLElBQUlvQixLQUFLQyxTQUFTLENBQUM7UUFBRWhCO1FBQVVDO1FBQWdCQztJQUFVLElBQUk7UUFDaEhlLFFBQVE7UUFDUkMsVUFBVTtJQUNaO0lBQ0EsT0FBTztRQUNMbEI7UUFDQUM7UUFDQStCO0lBQ0Y7QUFDRjtBQUNBLGVBQWVDO0lBQ2IsSUFBSSxDQUFDcEMsK0RBQWFBLEVBQUU7UUFDbEI7SUFDRjtJQUNBLE1BQU0sa01BQW1DLENBQUN5QixJQUFJLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRVcsYUFBYSxJQUFJVCxLQUFLLENBQUMsS0FDL0U7SUFDQTtBQUNGO0FBS0UiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaWRkaGFudGd1cHRhL0RvY3VtZW50cy9wcm9qZWN0cy9mb3JnZXRhaS9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9hcHAtcm91dGVyL2tleWxlc3MtYWN0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzZXJ2ZXJcIjtcbmltcG9ydCB7IGNvb2tpZXMsIGhlYWRlcnMgfSBmcm9tIFwibmV4dC9oZWFkZXJzXCI7XG5pbXBvcnQgeyByZWRpcmVjdCwgUmVkaXJlY3RUeXBlIH0gZnJvbSBcIm5leHQvbmF2aWdhdGlvblwiO1xuaW1wb3J0IHsgZXJyb3JUaHJvd2VyIH0gZnJvbSBcIi4uL3NlcnZlci9lcnJvclRocm93ZXJcIjtcbmltcG9ydCB7IGRldGVjdENsZXJrTWlkZGxld2FyZSB9IGZyb20gXCIuLi9zZXJ2ZXIvaGVhZGVycy11dGlsc1wiO1xuaW1wb3J0IHsgZ2V0S2V5bGVzc0Nvb2tpZU5hbWUsIGdldEtleWxlc3NDb29raWVWYWx1ZSB9IGZyb20gXCIuLi9zZXJ2ZXIva2V5bGVzc1wiO1xuaW1wb3J0IHsgY2FuVXNlS2V5bGVzcyB9IGZyb20gXCIuLi91dGlscy9mZWF0dXJlLWZsYWdzXCI7XG5hc3luYyBmdW5jdGlvbiBzeW5jS2V5bGVzc0NvbmZpZ0FjdGlvbihhcmdzKSB7XG4gIGNvbnN0IHsgY2xhaW1VcmwsIHB1Ymxpc2hhYmxlS2V5LCBzZWNyZXRLZXksIHJldHVyblVybCB9ID0gYXJncztcbiAgY29uc3QgY29va2llU3RvcmUgPSBhd2FpdCBjb29raWVzKCk7XG4gIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdChcImh0dHBzOi8vcGxhY2Vob2xkZXIuY29tXCIsIHsgaGVhZGVyczogYXdhaXQgaGVhZGVycygpIH0pO1xuICBjb25zdCBrZXlsZXNzID0gYXdhaXQgZ2V0S2V5bGVzc0Nvb2tpZVZhbHVlKChuYW1lKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBjb29raWVTdG9yZS5nZXQobmFtZSkpID09IG51bGwgPyB2b2lkIDAgOiBfYS52YWx1ZTtcbiAgfSk7XG4gIGNvbnN0IHBrc01hdGNoID0gKGtleWxlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IGtleWxlc3MucHVibGlzaGFibGVLZXkpID09PSBwdWJsaXNoYWJsZUtleTtcbiAgY29uc3Qgc2tzTWF0Y2ggPSAoa2V5bGVzcyA9PSBudWxsID8gdm9pZCAwIDoga2V5bGVzcy5zZWNyZXRLZXkpID09PSBzZWNyZXRLZXk7XG4gIGlmIChwa3NNYXRjaCAmJiBza3NNYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb29raWVTdG9yZS5zZXQoYXdhaXQgZ2V0S2V5bGVzc0Nvb2tpZU5hbWUoKSwgSlNPTi5zdHJpbmdpZnkoeyBjbGFpbVVybCwgcHVibGlzaGFibGVLZXksIHNlY3JldEtleSB9KSwge1xuICAgIHNlY3VyZTogdHJ1ZSxcbiAgICBodHRwT25seTogdHJ1ZVxuICB9KTtcbiAgaWYgKGRldGVjdENsZXJrTWlkZGxld2FyZShyZXF1ZXN0KSkge1xuICAgIHJlZGlyZWN0KGAvY2xlcmstc3luYy1rZXlsZXNzP3JldHVyblVybD0ke3JldHVyblVybH1gLCBSZWRpcmVjdFR5cGUucmVwbGFjZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybjtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZU9yUmVhZEtleWxlc3NBY3Rpb24oKSB7XG4gIGlmICghY2FuVXNlS2V5bGVzcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGltcG9ydChcIi4uL3NlcnZlci9rZXlsZXNzLW5vZGUuanNcIikudGhlbigobSkgPT4gbS5jcmVhdGVPclJlYWRLZXlsZXNzKCkpLmNhdGNoKCgpID0+IG51bGwpO1xuICBpZiAoIXJlc3VsdCkge1xuICAgIGVycm9yVGhyb3dlci50aHJvd01pc3NpbmdQdWJsaXNoYWJsZUtleUVycm9yKCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgeyBjbGVya0RldmVsb3BtZW50Q2FjaGUsIGNyZWF0ZUtleWxlc3NNb2RlTWVzc2FnZSB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vc2VydmVyL2tleWxlc3MtbG9nLWNhY2hlLmpzXCIpO1xuICBjbGVya0RldmVsb3BtZW50Q2FjaGUgPT0gbnVsbCA/IHZvaWQgMCA6IGNsZXJrRGV2ZWxvcG1lbnRDYWNoZS5sb2coe1xuICAgIGNhY2hlS2V5OiByZXN1bHQucHVibGlzaGFibGVLZXksXG4gICAgbXNnOiBjcmVhdGVLZXlsZXNzTW9kZU1lc3NhZ2UocmVzdWx0KVxuICB9KTtcbiAgY29uc3QgeyBjbGFpbVVybCwgcHVibGlzaGFibGVLZXksIHNlY3JldEtleSwgYXBpS2V5c1VybCB9ID0gcmVzdWx0O1xuICB2b2lkIChhd2FpdCBjb29raWVzKCkpLnNldChhd2FpdCBnZXRLZXlsZXNzQ29va2llTmFtZSgpLCBKU09OLnN0cmluZ2lmeSh7IGNsYWltVXJsLCBwdWJsaXNoYWJsZUtleSwgc2VjcmV0S2V5IH0pLCB7XG4gICAgc2VjdXJlOiBmYWxzZSxcbiAgICBodHRwT25seTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgY2xhaW1VcmwsXG4gICAgcHVibGlzaGFibGVLZXksXG4gICAgYXBpS2V5c1VybFxuICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlS2V5bGVzc0FjdGlvbigpIHtcbiAgaWYgKCFjYW5Vc2VLZXlsZXNzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGF3YWl0IGltcG9ydChcIi4uL3NlcnZlci9rZXlsZXNzLW5vZGUuanNcIikudGhlbigobSkgPT4gbS5yZW1vdmVLZXlsZXNzKCkpLmNhdGNoKCgpID0+IHtcbiAgfSk7XG4gIHJldHVybjtcbn1cbmV4cG9ydCB7XG4gIGNyZWF0ZU9yUmVhZEtleWxlc3NBY3Rpb24sXG4gIGRlbGV0ZUtleWxlc3NBY3Rpb24sXG4gIHN5bmNLZXlsZXNzQ29uZmlnQWN0aW9uXG59O1xuIl0sIm5hbWVzIjpbImNvb2tpZXMiLCJoZWFkZXJzIiwicmVkaXJlY3QiLCJSZWRpcmVjdFR5cGUiLCJlcnJvclRocm93ZXIiLCJkZXRlY3RDbGVya01pZGRsZXdhcmUiLCJnZXRLZXlsZXNzQ29va2llTmFtZSIsImdldEtleWxlc3NDb29raWVWYWx1ZSIsImNhblVzZUtleWxlc3MiLCJzeW5jS2V5bGVzc0NvbmZpZ0FjdGlvbiIsImFyZ3MiLCJjbGFpbVVybCIsInB1Ymxpc2hhYmxlS2V5Iiwic2VjcmV0S2V5IiwicmV0dXJuVXJsIiwiY29va2llU3RvcmUiLCJyZXF1ZXN0IiwiUmVxdWVzdCIsImtleWxlc3MiLCJuYW1lIiwiX2EiLCJnZXQiLCJ2YWx1ZSIsInBrc01hdGNoIiwic2tzTWF0Y2giLCJzZXQiLCJKU09OIiwic3RyaW5naWZ5Iiwic2VjdXJlIiwiaHR0cE9ubHkiLCJyZXBsYWNlIiwiY3JlYXRlT3JSZWFkS2V5bGVzc0FjdGlvbiIsInJlc3VsdCIsInRoZW4iLCJtIiwiY3JlYXRlT3JSZWFkS2V5bGVzcyIsImNhdGNoIiwidGhyb3dNaXNzaW5nUHVibGlzaGFibGVLZXlFcnJvciIsImNsZXJrRGV2ZWxvcG1lbnRDYWNoZSIsImNyZWF0ZUtleWxlc3NNb2RlTWVzc2FnZSIsImxvZyIsImNhY2hlS2V5IiwibXNnIiwiYXBpS2V5c1VybCIsImRlbGV0ZUtleWxlc3NBY3Rpb24iLCJyZW1vdmVLZXlsZXNzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/keyless-actions.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClerkProvider: () => (/* binding */ ClerkProvider)\n/* harmony export */ });\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(middleware)/./node_modules/next/dist/esm/api/headers.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(middleware)/./node_modules/next/dist/compiled/react/react.react-server.js\");\n/* harmony import */ var _client_boundary_PromisifiedAuthProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../client-boundary/PromisifiedAuthProvider */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/PromisifiedAuthProvider.js\");\n/* harmony import */ var _server_buildClerkProps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../server/buildClerkProps */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/buildClerkProps.js\");\n/* harmony import */ var _utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/mergeNextClerkPropsWithEnv */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js\");\n/* harmony import */ var _utils_sdk_versions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/sdk-versions */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/sdk-versions.js\");\n/* harmony import */ var _client_ClerkProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../client/ClerkProvider */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js\");\n/* harmony import */ var _keyless_provider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./keyless-provider */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/keyless-provider.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/utils.js\");\n\n\n\n\n\n\n\n\n\n\nconst getDynamicClerkState = react__WEBPACK_IMPORTED_MODULE_1__.cache(async function getDynamicClerkState2() {\n  const request = await (0,_utils__WEBPACK_IMPORTED_MODULE_2__.buildRequestLike)();\n  const data = (0,_server_buildClerkProps__WEBPACK_IMPORTED_MODULE_3__.getDynamicAuthData)(request);\n  return data;\n});\nconst getNonceFromCSPHeader = react__WEBPACK_IMPORTED_MODULE_1__.cache(async function getNonceFromCSPHeader2() {\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getScriptNonceFromHeader)((await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.headers)()).get(\"Content-Security-Policy\") || \"\") || \"\";\n});\nasync function ClerkProvider(props) {\n  const { children, dynamic, ...rest } = props;\n  async function generateStatePromise() {\n    if (!dynamic) {\n      return Promise.resolve(null);\n    }\n    if (_utils_sdk_versions__WEBPACK_IMPORTED_MODULE_4__.isNext13) {\n      return Promise.resolve(await getDynamicClerkState());\n    }\n    return getDynamicClerkState();\n  }\n  async function generateNonce() {\n    if (!dynamic) {\n      return Promise.resolve(\"\");\n    }\n    if (_utils_sdk_versions__WEBPACK_IMPORTED_MODULE_4__.isNext13) {\n      return Promise.resolve(await getNonceFromCSPHeader());\n    }\n    return getNonceFromCSPHeader();\n  }\n  const propsWithEnvs = (0,_utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_5__.mergeNextClerkPropsWithEnv)({\n    ...rest\n  });\n  const { shouldRunAsKeyless, runningWithClaimedKeys } = await (0,_keyless_provider__WEBPACK_IMPORTED_MODULE_6__.getKeylessStatus)(propsWithEnvs);\n  let output;\n  if (shouldRunAsKeyless) {\n    output = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\n      _keyless_provider__WEBPACK_IMPORTED_MODULE_6__.KeylessProvider,\n      {\n        rest: propsWithEnvs,\n        generateNonce,\n        generateStatePromise,\n        runningWithClaimedKeys\n      },\n      children\n    );\n  } else {\n    output = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\n      _client_ClerkProvider__WEBPACK_IMPORTED_MODULE_7__.ClientClerkProvider,\n      {\n        ...propsWithEnvs,\n        nonce: await generateNonce(),\n        initialState: await generateStatePromise()\n      },\n      children\n    );\n  }\n  if (dynamic) {\n    return (\n      // TODO: fix types so AuthObject is compatible with InitialState\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_client_boundary_PromisifiedAuthProvider__WEBPACK_IMPORTED_MODULE_8__.PromisifiedAuthProvider, { authPromise: generateStatePromise() }, output)\n    );\n  }\n  return output;\n}\n\n//# sourceMappingURL=ClerkProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9zZXJ2ZXIvQ2xlcmtQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ007QUFDYjtBQUM4RDtBQUN0QjtBQUNrQjtBQUNoQztBQUNVO0FBQ1M7QUFDRjtBQUNyRSw2QkFBNkIsd0NBQVc7QUFDeEMsd0JBQXdCLHdEQUFnQjtBQUN4QyxlQUFlLDJFQUFrQjtBQUNqQztBQUNBLENBQUM7QUFDRCw4QkFBOEIsd0NBQVc7QUFDekMsU0FBUyxnRUFBd0IsUUFBUSxxREFBTztBQUNoRCxDQUFDO0FBQ0Q7QUFDQSxVQUFVLDZCQUE2QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEseURBQVE7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEseURBQVE7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNkZBQTBCO0FBQ2xEO0FBQ0EsR0FBRztBQUNILFVBQVUsNkNBQTZDLFFBQVEsbUVBQWdCO0FBQy9FO0FBQ0E7QUFDQSw2QkFBNkIsZ0RBQW1CO0FBQ2hELE1BQU0sOERBQWU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsSUFBSTtBQUNKLDZCQUE2QixnREFBbUI7QUFDaEQsTUFBTSxzRUFBbUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdEQUFtQixDQUFDLDZGQUF1QixJQUFJLHFDQUFxQztBQUMxRztBQUNBO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaWRkaGFudGd1cHRhL0RvY3VtZW50cy9wcm9qZWN0cy9mb3JnZXRhaS9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9hcHAtcm91dGVyL3NlcnZlci9DbGVya1Byb3ZpZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uLy4uL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5pbXBvcnQgeyBoZWFkZXJzIH0gZnJvbSBcIm5leHQvaGVhZGVyc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUHJvbWlzaWZpZWRBdXRoUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vY2xpZW50LWJvdW5kYXJ5L1Byb21pc2lmaWVkQXV0aFByb3ZpZGVyXCI7XG5pbXBvcnQgeyBnZXREeW5hbWljQXV0aERhdGEgfSBmcm9tIFwiLi4vLi4vc2VydmVyL2J1aWxkQ2xlcmtQcm9wc1wiO1xuaW1wb3J0IHsgbWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnYgfSBmcm9tIFwiLi4vLi4vdXRpbHMvbWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnZcIjtcbmltcG9ydCB7IGlzTmV4dDEzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3Nkay12ZXJzaW9uc1wiO1xuaW1wb3J0IHsgQ2xpZW50Q2xlcmtQcm92aWRlciB9IGZyb20gXCIuLi9jbGllbnQvQ2xlcmtQcm92aWRlclwiO1xuaW1wb3J0IHsgZ2V0S2V5bGVzc1N0YXR1cywgS2V5bGVzc1Byb3ZpZGVyIH0gZnJvbSBcIi4va2V5bGVzcy1wcm92aWRlclwiO1xuaW1wb3J0IHsgYnVpbGRSZXF1ZXN0TGlrZSwgZ2V0U2NyaXB0Tm9uY2VGcm9tSGVhZGVyIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmNvbnN0IGdldER5bmFtaWNDbGVya1N0YXRlID0gUmVhY3QuY2FjaGUoYXN5bmMgZnVuY3Rpb24gZ2V0RHluYW1pY0NsZXJrU3RhdGUyKCkge1xuICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgYnVpbGRSZXF1ZXN0TGlrZSgpO1xuICBjb25zdCBkYXRhID0gZ2V0RHluYW1pY0F1dGhEYXRhKHJlcXVlc3QpO1xuICByZXR1cm4gZGF0YTtcbn0pO1xuY29uc3QgZ2V0Tm9uY2VGcm9tQ1NQSGVhZGVyID0gUmVhY3QuY2FjaGUoYXN5bmMgZnVuY3Rpb24gZ2V0Tm9uY2VGcm9tQ1NQSGVhZGVyMigpIHtcbiAgcmV0dXJuIGdldFNjcmlwdE5vbmNlRnJvbUhlYWRlcigoYXdhaXQgaGVhZGVycygpKS5nZXQoXCJDb250ZW50LVNlY3VyaXR5LVBvbGljeVwiKSB8fCBcIlwiKSB8fCBcIlwiO1xufSk7XG5hc3luYyBmdW5jdGlvbiBDbGVya1Byb3ZpZGVyKHByb3BzKSB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIGR5bmFtaWMsIC4uLnJlc3QgfSA9IHByb3BzO1xuICBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVN0YXRlUHJvbWlzZSgpIHtcbiAgICBpZiAoIWR5bmFtaWMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGlmIChpc05leHQxMykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShhd2FpdCBnZXREeW5hbWljQ2xlcmtTdGF0ZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldER5bmFtaWNDbGVya1N0YXRlKCk7XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVOb25jZSgpIHtcbiAgICBpZiAoIWR5bmFtaWMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXCJcIik7XG4gICAgfVxuICAgIGlmIChpc05leHQxMykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShhd2FpdCBnZXROb25jZUZyb21DU1BIZWFkZXIoKSk7XG4gICAgfVxuICAgIHJldHVybiBnZXROb25jZUZyb21DU1BIZWFkZXIoKTtcbiAgfVxuICBjb25zdCBwcm9wc1dpdGhFbnZzID0gbWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnYoe1xuICAgIC4uLnJlc3RcbiAgfSk7XG4gIGNvbnN0IHsgc2hvdWxkUnVuQXNLZXlsZXNzLCBydW5uaW5nV2l0aENsYWltZWRLZXlzIH0gPSBhd2FpdCBnZXRLZXlsZXNzU3RhdHVzKHByb3BzV2l0aEVudnMpO1xuICBsZXQgb3V0cHV0O1xuICBpZiAoc2hvdWxkUnVuQXNLZXlsZXNzKSB7XG4gICAgb3V0cHV0ID0gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBLZXlsZXNzUHJvdmlkZXIsXG4gICAgICB7XG4gICAgICAgIHJlc3Q6IHByb3BzV2l0aEVudnMsXG4gICAgICAgIGdlbmVyYXRlTm9uY2UsXG4gICAgICAgIGdlbmVyYXRlU3RhdGVQcm9taXNlLFxuICAgICAgICBydW5uaW5nV2l0aENsYWltZWRLZXlzXG4gICAgICB9LFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQ2xpZW50Q2xlcmtQcm92aWRlcixcbiAgICAgIHtcbiAgICAgICAgLi4ucHJvcHNXaXRoRW52cyxcbiAgICAgICAgbm9uY2U6IGF3YWl0IGdlbmVyYXRlTm9uY2UoKSxcbiAgICAgICAgaW5pdGlhbFN0YXRlOiBhd2FpdCBnZW5lcmF0ZVN0YXRlUHJvbWlzZSgpXG4gICAgICB9LFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9XG4gIGlmIChkeW5hbWljKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIFRPRE86IGZpeCB0eXBlcyBzbyBBdXRoT2JqZWN0IGlzIGNvbXBhdGlibGUgd2l0aCBJbml0aWFsU3RhdGVcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFByb21pc2lmaWVkQXV0aFByb3ZpZGVyLCB7IGF1dGhQcm9taXNlOiBnZW5lcmF0ZVN0YXRlUHJvbWlzZSgpIH0sIG91dHB1dClcbiAgICApO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5leHBvcnQge1xuICBDbGVya1Byb3ZpZGVyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xlcmtQcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend/internal */ \"(middleware)/./node_modules/@clerk/backend/dist/internal.mjs\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/navigation */ \"(middleware)/./node_modules/next/dist/esm/api/navigation.react-server.js\");\n/* harmony import */ var _server_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../server/constants */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/constants.js\");\n/* harmony import */ var _server_createGetAuth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../server/createGetAuth */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createGetAuth.js\");\n/* harmony import */ var _server_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../server/errors */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/errors.js\");\n/* harmony import */ var _server_headers_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../server/headers-utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/headers-utils.js\");\n/* harmony import */ var _server_protect__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../server/protect */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/protect.js\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../server/utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js\");\n/* harmony import */ var _utils_sdk_versions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/sdk-versions */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/sdk-versions.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst auth = async () => {\n  __webpack_require__(/*! server-only */ \"(middleware)/./node_modules/next/dist/compiled/server-only/empty.js\");\n  const request = await (0,_utils__WEBPACK_IMPORTED_MODULE_2__.buildRequestLike)();\n  const stepsBasedOnSrcDirectory = async () => {\n    if (_utils_sdk_versions__WEBPACK_IMPORTED_MODULE_3__.isNextWithUnstableServerActions) {\n      return [];\n    }\n    try {\n      const isSrcAppDir = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../server/fs/middleware-location.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/middleware-location.js\")).then((m) => m.hasSrcAppDir());\n      return [`Your Middleware exists at ./${isSrcAppDir ? \"src/\" : \"\"}middleware.(ts|js)`];\n    } catch {\n      return [];\n    }\n  };\n  const authObject = await (0,_server_createGetAuth__WEBPACK_IMPORTED_MODULE_4__.createAsyncGetAuth)({\n    debugLoggerName: \"auth()\",\n    noAuthStatusMessage: (0,_server_errors__WEBPACK_IMPORTED_MODULE_5__.authAuthHeaderMissing)(\"auth\", await stepsBasedOnSrcDirectory())\n  })(request);\n  const clerkUrl = (0,_server_headers_utils__WEBPACK_IMPORTED_MODULE_6__.getAuthKeyFromRequest)(request, \"ClerkUrl\");\n  const redirectToSignIn = (opts = {}) => {\n    const clerkRequest = (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.createClerkRequest)(request);\n    const devBrowserToken = clerkRequest.clerkUrl.searchParams.get(_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.QueryParameters.DevBrowser) || clerkRequest.cookies.get(_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Cookies.DevBrowser);\n    const encryptedRequestData = (0,_server_headers_utils__WEBPACK_IMPORTED_MODULE_6__.getHeader)(request, _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.ClerkRequestData);\n    const decryptedRequestData = (0,_server_utils__WEBPACK_IMPORTED_MODULE_7__.decryptClerkRequestData)(encryptedRequestData);\n    return (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.createRedirect)({\n      redirectAdapter: next_navigation__WEBPACK_IMPORTED_MODULE_1__.redirect,\n      devBrowserToken,\n      baseUrl: clerkRequest.clerkUrl.toString(),\n      publishableKey: decryptedRequestData.publishableKey || _server_constants__WEBPACK_IMPORTED_MODULE_8__.PUBLISHABLE_KEY,\n      signInUrl: decryptedRequestData.signInUrl || _server_constants__WEBPACK_IMPORTED_MODULE_8__.SIGN_IN_URL,\n      signUpUrl: decryptedRequestData.signUpUrl || _server_constants__WEBPACK_IMPORTED_MODULE_8__.SIGN_UP_URL,\n      sessionStatus: authObject.sessionStatus\n    }).redirectToSignIn({\n      returnBackUrl: opts.returnBackUrl === null ? \"\" : opts.returnBackUrl || (clerkUrl == null ? void 0 : clerkUrl.toString())\n    });\n  };\n  return Object.assign(authObject, { redirectToSignIn });\n};\nauth.protect = async (...args) => {\n  __webpack_require__(/*! server-only */ \"(middleware)/./node_modules/next/dist/compiled/server-only/empty.js\");\n  const request = await (0,_utils__WEBPACK_IMPORTED_MODULE_2__.buildRequestLike)();\n  const authObject = await auth();\n  const protect = (0,_server_protect__WEBPACK_IMPORTED_MODULE_9__.createProtect)({\n    request,\n    authObject,\n    redirectToSignIn: authObject.redirectToSignIn,\n    notFound: next_navigation__WEBPACK_IMPORTED_MODULE_1__.notFound,\n    redirect: next_navigation__WEBPACK_IMPORTED_MODULE_1__.redirect\n  });\n  return protect(...args);\n};\n\n//# sourceMappingURL=auth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9zZXJ2ZXIvYXV0aC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFpQztBQUN1RDtBQUNuQztBQUM4QjtBQUNuQjtBQUNKO0FBQ2tCO0FBQ3pCO0FBQ1E7QUFDYztBQUNoQztBQUMzQztBQUNBLEVBQUUsbUJBQU8sQ0FBQyx3RkFBYTtBQUN2Qix3QkFBd0Isd0RBQWdCO0FBQ3hDO0FBQ0EsUUFBUSxnRkFBK0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHlOQUFnRDtBQUNoRiw2Q0FBNkMsMEJBQTBCO0FBQ3ZFLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIseUVBQWtCO0FBQzdDO0FBQ0EseUJBQXlCLHFFQUFxQjtBQUM5QyxHQUFHO0FBQ0gsbUJBQW1CLDRFQUFxQjtBQUN4QyxxQ0FBcUM7QUFDckMseUJBQXlCLDJFQUFrQjtBQUMzQyxtRUFBbUUsOERBQVMseURBQXlELDhEQUFTO0FBQzlJLGlDQUFpQyxnRUFBUyxVQUFVLDhEQUFTO0FBQzdELGlDQUFpQyxzRUFBdUI7QUFDeEQsV0FBVyx1RUFBYztBQUN6Qix1QkFBdUIscURBQVE7QUFDL0I7QUFDQTtBQUNBLDZEQUE2RCw4REFBZTtBQUM1RSxtREFBbUQsMERBQVc7QUFDOUQsbURBQW1ELDBEQUFXO0FBQzlEO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0EscUNBQXFDLGtCQUFrQjtBQUN2RDtBQUNBO0FBQ0EsRUFBRSxtQkFBTyxDQUFDLHdGQUFhO0FBQ3ZCLHdCQUF3Qix3REFBZ0I7QUFDeEM7QUFDQSxrQkFBa0IsOERBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLFlBQVk7QUFDWixHQUFHO0FBQ0g7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaWRkaGFudGd1cHRhL0RvY3VtZW50cy9wcm9qZWN0cy9mb3JnZXRhaS9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9hcHAtcm91dGVyL3NlcnZlci9hdXRoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uLy4uL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5pbXBvcnQgeyBjb25zdGFudHMsIGNyZWF0ZUNsZXJrUmVxdWVzdCwgY3JlYXRlUmVkaXJlY3QgfSBmcm9tIFwiQGNsZXJrL2JhY2tlbmQvaW50ZXJuYWxcIjtcbmltcG9ydCB7IG5vdEZvdW5kLCByZWRpcmVjdCB9IGZyb20gXCJuZXh0L25hdmlnYXRpb25cIjtcbmltcG9ydCB7IFBVQkxJU0hBQkxFX0tFWSwgU0lHTl9JTl9VUkwsIFNJR05fVVBfVVJMIH0gZnJvbSBcIi4uLy4uL3NlcnZlci9jb25zdGFudHNcIjtcbmltcG9ydCB7IGNyZWF0ZUFzeW5jR2V0QXV0aCB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvY3JlYXRlR2V0QXV0aFwiO1xuaW1wb3J0IHsgYXV0aEF1dGhIZWFkZXJNaXNzaW5nIH0gZnJvbSBcIi4uLy4uL3NlcnZlci9lcnJvcnNcIjtcbmltcG9ydCB7IGdldEF1dGhLZXlGcm9tUmVxdWVzdCwgZ2V0SGVhZGVyIH0gZnJvbSBcIi4uLy4uL3NlcnZlci9oZWFkZXJzLXV0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVQcm90ZWN0IH0gZnJvbSBcIi4uLy4uL3NlcnZlci9wcm90ZWN0XCI7XG5pbXBvcnQgeyBkZWNyeXB0Q2xlcmtSZXF1ZXN0RGF0YSB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvdXRpbHNcIjtcbmltcG9ydCB7IGlzTmV4dFdpdGhVbnN0YWJsZVNlcnZlckFjdGlvbnMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvc2RrLXZlcnNpb25zXCI7XG5pbXBvcnQgeyBidWlsZFJlcXVlc3RMaWtlIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmNvbnN0IGF1dGggPSBhc3luYyAoKSA9PiB7XG4gIHJlcXVpcmUoXCJzZXJ2ZXItb25seVwiKTtcbiAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IGJ1aWxkUmVxdWVzdExpa2UoKTtcbiAgY29uc3Qgc3RlcHNCYXNlZE9uU3JjRGlyZWN0b3J5ID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmIChpc05leHRXaXRoVW5zdGFibGVTZXJ2ZXJBY3Rpb25zKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBpc1NyY0FwcERpciA9IGF3YWl0IGltcG9ydChcIi4uLy4uL3NlcnZlci9mcy9taWRkbGV3YXJlLWxvY2F0aW9uLmpzXCIpLnRoZW4oKG0pID0+IG0uaGFzU3JjQXBwRGlyKCkpO1xuICAgICAgcmV0dXJuIFtgWW91ciBNaWRkbGV3YXJlIGV4aXN0cyBhdCAuLyR7aXNTcmNBcHBEaXIgPyBcInNyYy9cIiA6IFwiXCJ9bWlkZGxld2FyZS4odHN8anMpYF07XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9O1xuICBjb25zdCBhdXRoT2JqZWN0ID0gYXdhaXQgY3JlYXRlQXN5bmNHZXRBdXRoKHtcbiAgICBkZWJ1Z0xvZ2dlck5hbWU6IFwiYXV0aCgpXCIsXG4gICAgbm9BdXRoU3RhdHVzTWVzc2FnZTogYXV0aEF1dGhIZWFkZXJNaXNzaW5nKFwiYXV0aFwiLCBhd2FpdCBzdGVwc0Jhc2VkT25TcmNEaXJlY3RvcnkoKSlcbiAgfSkocmVxdWVzdCk7XG4gIGNvbnN0IGNsZXJrVXJsID0gZ2V0QXV0aEtleUZyb21SZXF1ZXN0KHJlcXVlc3QsIFwiQ2xlcmtVcmxcIik7XG4gIGNvbnN0IHJlZGlyZWN0VG9TaWduSW4gPSAob3B0cyA9IHt9KSA9PiB7XG4gICAgY29uc3QgY2xlcmtSZXF1ZXN0ID0gY3JlYXRlQ2xlcmtSZXF1ZXN0KHJlcXVlc3QpO1xuICAgIGNvbnN0IGRldkJyb3dzZXJUb2tlbiA9IGNsZXJrUmVxdWVzdC5jbGVya1VybC5zZWFyY2hQYXJhbXMuZ2V0KGNvbnN0YW50cy5RdWVyeVBhcmFtZXRlcnMuRGV2QnJvd3NlcikgfHwgY2xlcmtSZXF1ZXN0LmNvb2tpZXMuZ2V0KGNvbnN0YW50cy5Db29raWVzLkRldkJyb3dzZXIpO1xuICAgIGNvbnN0IGVuY3J5cHRlZFJlcXVlc3REYXRhID0gZ2V0SGVhZGVyKHJlcXVlc3QsIGNvbnN0YW50cy5IZWFkZXJzLkNsZXJrUmVxdWVzdERhdGEpO1xuICAgIGNvbnN0IGRlY3J5cHRlZFJlcXVlc3REYXRhID0gZGVjcnlwdENsZXJrUmVxdWVzdERhdGEoZW5jcnlwdGVkUmVxdWVzdERhdGEpO1xuICAgIHJldHVybiBjcmVhdGVSZWRpcmVjdCh7XG4gICAgICByZWRpcmVjdEFkYXB0ZXI6IHJlZGlyZWN0LFxuICAgICAgZGV2QnJvd3NlclRva2VuLFxuICAgICAgYmFzZVVybDogY2xlcmtSZXF1ZXN0LmNsZXJrVXJsLnRvU3RyaW5nKCksXG4gICAgICBwdWJsaXNoYWJsZUtleTogZGVjcnlwdGVkUmVxdWVzdERhdGEucHVibGlzaGFibGVLZXkgfHwgUFVCTElTSEFCTEVfS0VZLFxuICAgICAgc2lnbkluVXJsOiBkZWNyeXB0ZWRSZXF1ZXN0RGF0YS5zaWduSW5VcmwgfHwgU0lHTl9JTl9VUkwsXG4gICAgICBzaWduVXBVcmw6IGRlY3J5cHRlZFJlcXVlc3REYXRhLnNpZ25VcFVybCB8fCBTSUdOX1VQX1VSTCxcbiAgICAgIHNlc3Npb25TdGF0dXM6IGF1dGhPYmplY3Quc2Vzc2lvblN0YXR1c1xuICAgIH0pLnJlZGlyZWN0VG9TaWduSW4oe1xuICAgICAgcmV0dXJuQmFja1VybDogb3B0cy5yZXR1cm5CYWNrVXJsID09PSBudWxsID8gXCJcIiA6IG9wdHMucmV0dXJuQmFja1VybCB8fCAoY2xlcmtVcmwgPT0gbnVsbCA/IHZvaWQgMCA6IGNsZXJrVXJsLnRvU3RyaW5nKCkpXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGF1dGhPYmplY3QsIHsgcmVkaXJlY3RUb1NpZ25JbiB9KTtcbn07XG5hdXRoLnByb3RlY3QgPSBhc3luYyAoLi4uYXJncykgPT4ge1xuICByZXF1aXJlKFwic2VydmVyLW9ubHlcIik7XG4gIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCBidWlsZFJlcXVlc3RMaWtlKCk7XG4gIGNvbnN0IGF1dGhPYmplY3QgPSBhd2FpdCBhdXRoKCk7XG4gIGNvbnN0IHByb3RlY3QgPSBjcmVhdGVQcm90ZWN0KHtcbiAgICByZXF1ZXN0LFxuICAgIGF1dGhPYmplY3QsXG4gICAgcmVkaXJlY3RUb1NpZ25JbjogYXV0aE9iamVjdC5yZWRpcmVjdFRvU2lnbkluLFxuICAgIG5vdEZvdW5kLFxuICAgIHJlZGlyZWN0XG4gIH0pO1xuICByZXR1cm4gcHJvdGVjdCguLi5hcmdzKTtcbn07XG5leHBvcnQge1xuICBhdXRoXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Protect: () => (/* binding */ Protect),\n/* harmony export */   SignedIn: () => (/* binding */ SignedIn),\n/* harmony export */   SignedOut: () => (/* binding */ SignedOut)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(middleware)/./node_modules/next/dist/compiled/react/react.react-server.js\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\");\n\n\n\nasync function SignedIn(props) {\n  const { children } = props;\n  const { userId } = await (0,_auth__WEBPACK_IMPORTED_MODULE_1__.auth)();\n  return userId ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children) : null;\n}\nasync function SignedOut(props) {\n  const { children } = props;\n  const { userId } = await (0,_auth__WEBPACK_IMPORTED_MODULE_1__.auth)();\n  return userId ? null : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\nasync function Protect(props) {\n  const { children, fallback, ...restAuthorizedParams } = props;\n  const { has, userId } = await (0,_auth__WEBPACK_IMPORTED_MODULE_1__.auth)();\n  const unauthorized = fallback ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, fallback) : null;\n  const authorized = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n  if (!userId) {\n    return unauthorized;\n  }\n  if (typeof restAuthorizedParams.condition === \"function\") {\n    return restAuthorizedParams.condition(has) ? authorized : unauthorized;\n  }\n  if (restAuthorizedParams.role || restAuthorizedParams.permission) {\n    return has(restAuthorizedParams) ? authorized : unauthorized;\n  }\n  return authorized;\n}\n\n//# sourceMappingURL=controlComponents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9zZXJ2ZXIvY29udHJvbENvbXBvbmVudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBaUM7QUFDUDtBQUNJO0FBQzlCO0FBQ0EsVUFBVSxXQUFXO0FBQ3JCLFVBQVUsU0FBUyxRQUFRLDJDQUFJO0FBQy9CLGtDQUFrQyxnREFBbUIsQ0FBQywyQ0FBYztBQUNwRTtBQUNBO0FBQ0EsVUFBVSxXQUFXO0FBQ3JCLFVBQVUsU0FBUyxRQUFRLDJDQUFJO0FBQy9CLHlDQUF5QyxnREFBbUIsQ0FBQywyQ0FBYztBQUMzRTtBQUNBO0FBQ0EsVUFBVSw4Q0FBOEM7QUFDeEQsVUFBVSxjQUFjLFFBQVEsMkNBQUk7QUFDcEMsa0RBQWtELGdEQUFtQixDQUFDLDJDQUFjO0FBQ3BGLHFDQUFxQyxnREFBbUIsQ0FBQywyQ0FBYztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3NpZGRoYW50Z3VwdGEvRG9jdW1lbnRzL3Byb2plY3RzL2ZvcmdldGFpL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL2FwcC1yb3V0ZXIvc2VydmVyL2NvbnRyb2xDb21wb25lbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uLy4uL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBhdXRoIH0gZnJvbSBcIi4vYXV0aFwiO1xuYXN5bmMgZnVuY3Rpb24gU2lnbmVkSW4ocHJvcHMpIHtcbiAgY29uc3QgeyBjaGlsZHJlbiB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgdXNlcklkIH0gPSBhd2FpdCBhdXRoKCk7XG4gIHJldHVybiB1c2VySWQgPyAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pIDogbnVsbDtcbn1cbmFzeW5jIGZ1bmN0aW9uIFNpZ25lZE91dChwcm9wcykge1xuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBwcm9wcztcbiAgY29uc3QgeyB1c2VySWQgfSA9IGF3YWl0IGF1dGgoKTtcbiAgcmV0dXJuIHVzZXJJZCA/IG51bGwgOiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xufVxuYXN5bmMgZnVuY3Rpb24gUHJvdGVjdChwcm9wcykge1xuICBjb25zdCB7IGNoaWxkcmVuLCBmYWxsYmFjaywgLi4ucmVzdEF1dGhvcml6ZWRQYXJhbXMgfSA9IHByb3BzO1xuICBjb25zdCB7IGhhcywgdXNlcklkIH0gPSBhd2FpdCBhdXRoKCk7XG4gIGNvbnN0IHVuYXV0aG9yaXplZCA9IGZhbGxiYWNrID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGZhbGxiYWNrKSA6IG51bGw7XG4gIGNvbnN0IGF1dGhvcml6ZWQgPSAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xuICBpZiAoIXVzZXJJZCkge1xuICAgIHJldHVybiB1bmF1dGhvcml6ZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiByZXN0QXV0aG9yaXplZFBhcmFtcy5jb25kaXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiByZXN0QXV0aG9yaXplZFBhcmFtcy5jb25kaXRpb24oaGFzKSA/IGF1dGhvcml6ZWQgOiB1bmF1dGhvcml6ZWQ7XG4gIH1cbiAgaWYgKHJlc3RBdXRob3JpemVkUGFyYW1zLnJvbGUgfHwgcmVzdEF1dGhvcml6ZWRQYXJhbXMucGVybWlzc2lvbikge1xuICAgIHJldHVybiBoYXMocmVzdEF1dGhvcml6ZWRQYXJhbXMpID8gYXV0aG9yaXplZCA6IHVuYXV0aG9yaXplZDtcbiAgfVxuICByZXR1cm4gYXV0aG9yaXplZDtcbn1cbmV4cG9ydCB7XG4gIFByb3RlY3QsXG4gIFNpZ25lZEluLFxuICBTaWduZWRPdXRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250cm9sQ29tcG9uZW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/keyless-provider.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/keyless-provider.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeylessProvider: () => (/* binding */ KeylessProvider),\n/* harmony export */   getKeylessStatus: () => (/* binding */ getKeylessStatus)\n/* harmony export */ });\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(middleware)/./node_modules/next/dist/esm/api/headers.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(middleware)/./node_modules/next/dist/compiled/react/react.react-server.js\");\n/* harmony import */ var _server_createClerkClient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../server/createClerkClient */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createClerkClient.js\");\n/* harmony import */ var _utils_feature_flags__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/feature-flags */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/feature-flags.js\");\n/* harmony import */ var _utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/mergeNextClerkPropsWithEnv */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js\");\n/* harmony import */ var _utils_only_try__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/only-try */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/only-try.js\");\n/* harmony import */ var _client_ClerkProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../client/ClerkProvider */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js\");\n/* harmony import */ var _keyless_actions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../keyless-actions */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/keyless-actions.js\");\n\n\n\n\n\n\n\n\n\nasync function getKeylessStatus(params) {\n  let [shouldRunAsKeyless, runningWithClaimedKeys, locallyStoredPublishableKey] = [false, false, \"\"];\n  if (_utils_feature_flags__WEBPACK_IMPORTED_MODULE_2__.canUseKeyless) {\n    locallyStoredPublishableKey = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../server/keyless-node.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\")).then((mod) => {\n      var _a;\n      return ((_a = mod.safeParseClerkFile()) == null ? void 0 : _a.publishableKey) || \"\";\n    }).catch(() => \"\");\n    runningWithClaimedKeys = Boolean(params.publishableKey) && params.publishableKey === locallyStoredPublishableKey;\n    shouldRunAsKeyless = !params.publishableKey || runningWithClaimedKeys;\n  }\n  return {\n    shouldRunAsKeyless,\n    runningWithClaimedKeys\n  };\n}\nconst KeylessProvider = async (props) => {\n  const { rest, runningWithClaimedKeys, generateNonce, generateStatePromise, children } = props;\n  const newOrReadKeys = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../server/keyless-node.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\")).then((mod) => mod.createOrReadKeyless()).catch(() => null);\n  const { clerkDevelopmentCache, createConfirmationMessage, createKeylessModeMessage } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../server/keyless-log-cache.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-log-cache.js\"));\n  if (!newOrReadKeys) {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\n      _client_ClerkProvider__WEBPACK_IMPORTED_MODULE_3__.ClientClerkProvider,\n      {\n        ...(0,_utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_4__.mergeNextClerkPropsWithEnv)(rest),\n        nonce: await generateNonce(),\n        initialState: await generateStatePromise(),\n        disableKeyless: true\n      },\n      children\n    );\n  }\n  const clientProvider = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\n    _client_ClerkProvider__WEBPACK_IMPORTED_MODULE_3__.ClientClerkProvider,\n    {\n      ...(0,_utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_4__.mergeNextClerkPropsWithEnv)({\n        ...rest,\n        publishableKey: newOrReadKeys.publishableKey,\n        __internal_keyless_claimKeylessApplicationUrl: newOrReadKeys.claimUrl,\n        __internal_keyless_copyInstanceKeysUrl: newOrReadKeys.apiKeysUrl,\n        // Explicitly use `null` instead of `undefined` here to avoid persisting `deleteKeylessAction` during merging of options.\n        __internal_keyless_dismissPrompt: runningWithClaimedKeys ? _keyless_actions__WEBPACK_IMPORTED_MODULE_5__.deleteKeylessAction : null\n      }),\n      nonce: await generateNonce(),\n      initialState: await generateStatePromise()\n    },\n    children\n  );\n  if (runningWithClaimedKeys) {\n    try {\n      const secretKey = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../server/keyless-node.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\")).then((mod) => {\n        var _a;\n        return (_a = mod.safeParseClerkFile()) == null ? void 0 : _a.secretKey;\n      });\n      if (!secretKey) {\n        throw new Error(\"Missing secret key from `.clerk/`\");\n      }\n      const client = (0,_server_createClerkClient__WEBPACK_IMPORTED_MODULE_6__.createClerkClientWithOptions)({\n        secretKey\n      });\n      await (clerkDevelopmentCache == null ? void 0 : clerkDevelopmentCache.run(\n        () => client.__experimental_accountlessApplications.completeAccountlessApplicationOnboarding(),\n        {\n          cacheKey: `${newOrReadKeys.publishableKey}_complete`,\n          onSuccessStale: 24 * 60 * 60 * 1e3\n          // 24 hours\n        }\n      ));\n    } catch {\n    }\n    clerkDevelopmentCache == null ? void 0 : clerkDevelopmentCache.log({\n      cacheKey: `${newOrReadKeys.publishableKey}_claimed`,\n      msg: createConfirmationMessage()\n    });\n    return clientProvider;\n  }\n  const KeylessCookieSync = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../client/keyless-cookie-sync.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/keyless-cookie-sync.js\")).then((mod) => mod.KeylessCookieSync);\n  const headerStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.headers)();\n  const host = headerStore.get(\"x-forwarded-host\");\n  const proto = headerStore.get(\"x-forwarded-proto\");\n  const claimUrl = new URL(newOrReadKeys.claimUrl);\n  if (host && proto) {\n    (0,_utils_only_try__WEBPACK_IMPORTED_MODULE_7__.onlyTry)(() => claimUrl.searchParams.set(\"return_url\", new URL(`${proto}://${host}`).href));\n  }\n  clerkDevelopmentCache == null ? void 0 : clerkDevelopmentCache.log({\n    cacheKey: newOrReadKeys.publishableKey,\n    msg: createKeylessModeMessage({ ...newOrReadKeys, claimUrl: claimUrl.href })\n  });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(KeylessCookieSync, { ...newOrReadKeys }, clientProvider);\n};\n\n//# sourceMappingURL=keyless-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9zZXJ2ZXIva2V5bGVzcy1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ007QUFDYjtBQUNvRDtBQUNwQjtBQUMwQjtBQUNyQztBQUNlO0FBQ0w7QUFDekQ7QUFDQTtBQUNBLE1BQU0sK0RBQWE7QUFDbkIsd0NBQXdDLHFNQUFzQztBQUM5RTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsOEVBQThFO0FBQ3hGLDhCQUE4QixxTUFBc0M7QUFDcEUsVUFBVSw2RUFBNkUsUUFBUSwrTUFBMkM7QUFDMUk7QUFDQSwyQkFBMkIsZ0RBQW1CO0FBQzlDLE1BQU0sc0VBQW1CO0FBQ3pCO0FBQ0EsV0FBVyw2RkFBMEI7QUFDckM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxnREFBbUI7QUFDNUQsSUFBSSxzRUFBbUI7QUFDdkI7QUFDQSxTQUFTLDZGQUEwQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLGlFQUFtQjtBQUN0RixPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixxTUFBc0M7QUFDcEU7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdUZBQTRCO0FBQ2pEO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLG1CQUFtQiw2QkFBNkI7QUFDaEQ7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGtDQUFrQywyTkFBMEM7QUFDNUUsNEJBQTRCLHFEQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSx3REFBTywwREFBMEQsTUFBTSxLQUFLLEtBQUs7QUFDckY7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDJDQUEyQztBQUMvRSxHQUFHO0FBQ0gseUJBQXlCLGdEQUFtQixzQkFBc0Isa0JBQWtCO0FBQ3BGO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3NpZGRoYW50Z3VwdGEvRG9jdW1lbnRzL3Byb2plY3RzL2ZvcmdldGFpL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL2FwcC1yb3V0ZXIvc2VydmVyL2tleWxlc3MtcHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vLi4vY2h1bmstQlVTWUEyQjQuanNcIjtcbmltcG9ydCB7IGhlYWRlcnMgfSBmcm9tIFwibmV4dC9oZWFkZXJzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjcmVhdGVDbGVya0NsaWVudFdpdGhPcHRpb25zIH0gZnJvbSBcIi4uLy4uL3NlcnZlci9jcmVhdGVDbGVya0NsaWVudFwiO1xuaW1wb3J0IHsgY2FuVXNlS2V5bGVzcyB9IGZyb20gXCIuLi8uLi91dGlscy9mZWF0dXJlLWZsYWdzXCI7XG5pbXBvcnQgeyBtZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudiB9IGZyb20gXCIuLi8uLi91dGlscy9tZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudlwiO1xuaW1wb3J0IHsgb25seVRyeSB9IGZyb20gXCIuLi8uLi91dGlscy9vbmx5LXRyeVwiO1xuaW1wb3J0IHsgQ2xpZW50Q2xlcmtQcm92aWRlciB9IGZyb20gXCIuLi9jbGllbnQvQ2xlcmtQcm92aWRlclwiO1xuaW1wb3J0IHsgZGVsZXRlS2V5bGVzc0FjdGlvbiB9IGZyb20gXCIuLi9rZXlsZXNzLWFjdGlvbnNcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldEtleWxlc3NTdGF0dXMocGFyYW1zKSB7XG4gIGxldCBbc2hvdWxkUnVuQXNLZXlsZXNzLCBydW5uaW5nV2l0aENsYWltZWRLZXlzLCBsb2NhbGx5U3RvcmVkUHVibGlzaGFibGVLZXldID0gW2ZhbHNlLCBmYWxzZSwgXCJcIl07XG4gIGlmIChjYW5Vc2VLZXlsZXNzKSB7XG4gICAgbG9jYWxseVN0b3JlZFB1Ymxpc2hhYmxlS2V5ID0gYXdhaXQgaW1wb3J0KFwiLi4vLi4vc2VydmVyL2tleWxlc3Mtbm9kZS5qc1wiKS50aGVuKChtb2QpID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIHJldHVybiAoKF9hID0gbW9kLnNhZmVQYXJzZUNsZXJrRmlsZSgpKSA9PSBudWxsID8gdm9pZCAwIDogX2EucHVibGlzaGFibGVLZXkpIHx8IFwiXCI7XG4gICAgfSkuY2F0Y2goKCkgPT4gXCJcIik7XG4gICAgcnVubmluZ1dpdGhDbGFpbWVkS2V5cyA9IEJvb2xlYW4ocGFyYW1zLnB1Ymxpc2hhYmxlS2V5KSAmJiBwYXJhbXMucHVibGlzaGFibGVLZXkgPT09IGxvY2FsbHlTdG9yZWRQdWJsaXNoYWJsZUtleTtcbiAgICBzaG91bGRSdW5Bc0tleWxlc3MgPSAhcGFyYW1zLnB1Ymxpc2hhYmxlS2V5IHx8IHJ1bm5pbmdXaXRoQ2xhaW1lZEtleXM7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzaG91bGRSdW5Bc0tleWxlc3MsXG4gICAgcnVubmluZ1dpdGhDbGFpbWVkS2V5c1xuICB9O1xufVxuY29uc3QgS2V5bGVzc1Byb3ZpZGVyID0gYXN5bmMgKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVzdCwgcnVubmluZ1dpdGhDbGFpbWVkS2V5cywgZ2VuZXJhdGVOb25jZSwgZ2VuZXJhdGVTdGF0ZVByb21pc2UsIGNoaWxkcmVuIH0gPSBwcm9wcztcbiAgY29uc3QgbmV3T3JSZWFkS2V5cyA9IGF3YWl0IGltcG9ydChcIi4uLy4uL3NlcnZlci9rZXlsZXNzLW5vZGUuanNcIikudGhlbigobW9kKSA9PiBtb2QuY3JlYXRlT3JSZWFkS2V5bGVzcygpKS5jYXRjaCgoKSA9PiBudWxsKTtcbiAgY29uc3QgeyBjbGVya0RldmVsb3BtZW50Q2FjaGUsIGNyZWF0ZUNvbmZpcm1hdGlvbk1lc3NhZ2UsIGNyZWF0ZUtleWxlc3NNb2RlTWVzc2FnZSB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vLi4vc2VydmVyL2tleWxlc3MtbG9nLWNhY2hlLmpzXCIpO1xuICBpZiAoIW5ld09yUmVhZEtleXMpIHtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDbGllbnRDbGVya1Byb3ZpZGVyLFxuICAgICAge1xuICAgICAgICAuLi5tZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudihyZXN0KSxcbiAgICAgICAgbm9uY2U6IGF3YWl0IGdlbmVyYXRlTm9uY2UoKSxcbiAgICAgICAgaW5pdGlhbFN0YXRlOiBhd2FpdCBnZW5lcmF0ZVN0YXRlUHJvbWlzZSgpLFxuICAgICAgICBkaXNhYmxlS2V5bGVzczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfVxuICBjb25zdCBjbGllbnRQcm92aWRlciA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIENsaWVudENsZXJrUHJvdmlkZXIsXG4gICAge1xuICAgICAgLi4ubWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnYoe1xuICAgICAgICAuLi5yZXN0LFxuICAgICAgICBwdWJsaXNoYWJsZUtleTogbmV3T3JSZWFkS2V5cy5wdWJsaXNoYWJsZUtleSxcbiAgICAgICAgX19pbnRlcm5hbF9rZXlsZXNzX2NsYWltS2V5bGVzc0FwcGxpY2F0aW9uVXJsOiBuZXdPclJlYWRLZXlzLmNsYWltVXJsLFxuICAgICAgICBfX2ludGVybmFsX2tleWxlc3NfY29weUluc3RhbmNlS2V5c1VybDogbmV3T3JSZWFkS2V5cy5hcGlLZXlzVXJsLFxuICAgICAgICAvLyBFeHBsaWNpdGx5IHVzZSBgbnVsbGAgaW5zdGVhZCBvZiBgdW5kZWZpbmVkYCBoZXJlIHRvIGF2b2lkIHBlcnNpc3RpbmcgYGRlbGV0ZUtleWxlc3NBY3Rpb25gIGR1cmluZyBtZXJnaW5nIG9mIG9wdGlvbnMuXG4gICAgICAgIF9faW50ZXJuYWxfa2V5bGVzc19kaXNtaXNzUHJvbXB0OiBydW5uaW5nV2l0aENsYWltZWRLZXlzID8gZGVsZXRlS2V5bGVzc0FjdGlvbiA6IG51bGxcbiAgICAgIH0pLFxuICAgICAgbm9uY2U6IGF3YWl0IGdlbmVyYXRlTm9uY2UoKSxcbiAgICAgIGluaXRpYWxTdGF0ZTogYXdhaXQgZ2VuZXJhdGVTdGF0ZVByb21pc2UoKVxuICAgIH0sXG4gICAgY2hpbGRyZW5cbiAgKTtcbiAgaWYgKHJ1bm5pbmdXaXRoQ2xhaW1lZEtleXMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2VjcmV0S2V5ID0gYXdhaXQgaW1wb3J0KFwiLi4vLi4vc2VydmVyL2tleWxlc3Mtbm9kZS5qc1wiKS50aGVuKChtb2QpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gbW9kLnNhZmVQYXJzZUNsZXJrRmlsZSgpKSA9PSBudWxsID8gdm9pZCAwIDogX2Euc2VjcmV0S2V5O1xuICAgICAgfSk7XG4gICAgICBpZiAoIXNlY3JldEtleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHNlY3JldCBrZXkgZnJvbSBgLmNsZXJrL2BcIik7XG4gICAgICB9XG4gICAgICBjb25zdCBjbGllbnQgPSBjcmVhdGVDbGVya0NsaWVudFdpdGhPcHRpb25zKHtcbiAgICAgICAgc2VjcmV0S2V5XG4gICAgICB9KTtcbiAgICAgIGF3YWl0IChjbGVya0RldmVsb3BtZW50Q2FjaGUgPT0gbnVsbCA/IHZvaWQgMCA6IGNsZXJrRGV2ZWxvcG1lbnRDYWNoZS5ydW4oXG4gICAgICAgICgpID0+IGNsaWVudC5fX2V4cGVyaW1lbnRhbF9hY2NvdW50bGVzc0FwcGxpY2F0aW9ucy5jb21wbGV0ZUFjY291bnRsZXNzQXBwbGljYXRpb25PbmJvYXJkaW5nKCksXG4gICAgICAgIHtcbiAgICAgICAgICBjYWNoZUtleTogYCR7bmV3T3JSZWFkS2V5cy5wdWJsaXNoYWJsZUtleX1fY29tcGxldGVgLFxuICAgICAgICAgIG9uU3VjY2Vzc1N0YWxlOiAyNCAqIDYwICogNjAgKiAxZTNcbiAgICAgICAgICAvLyAyNCBob3Vyc1xuICAgICAgICB9XG4gICAgICApKTtcbiAgICB9IGNhdGNoIHtcbiAgICB9XG4gICAgY2xlcmtEZXZlbG9wbWVudENhY2hlID09IG51bGwgPyB2b2lkIDAgOiBjbGVya0RldmVsb3BtZW50Q2FjaGUubG9nKHtcbiAgICAgIGNhY2hlS2V5OiBgJHtuZXdPclJlYWRLZXlzLnB1Ymxpc2hhYmxlS2V5fV9jbGFpbWVkYCxcbiAgICAgIG1zZzogY3JlYXRlQ29uZmlybWF0aW9uTWVzc2FnZSgpXG4gICAgfSk7XG4gICAgcmV0dXJuIGNsaWVudFByb3ZpZGVyO1xuICB9XG4gIGNvbnN0IEtleWxlc3NDb29raWVTeW5jID0gYXdhaXQgaW1wb3J0KFwiLi4vY2xpZW50L2tleWxlc3MtY29va2llLXN5bmMuanNcIikudGhlbigobW9kKSA9PiBtb2QuS2V5bGVzc0Nvb2tpZVN5bmMpO1xuICBjb25zdCBoZWFkZXJTdG9yZSA9IGF3YWl0IGhlYWRlcnMoKTtcbiAgY29uc3QgaG9zdCA9IGhlYWRlclN0b3JlLmdldChcIngtZm9yd2FyZGVkLWhvc3RcIik7XG4gIGNvbnN0IHByb3RvID0gaGVhZGVyU3RvcmUuZ2V0KFwieC1mb3J3YXJkZWQtcHJvdG9cIik7XG4gIGNvbnN0IGNsYWltVXJsID0gbmV3IFVSTChuZXdPclJlYWRLZXlzLmNsYWltVXJsKTtcbiAgaWYgKGhvc3QgJiYgcHJvdG8pIHtcbiAgICBvbmx5VHJ5KCgpID0+IGNsYWltVXJsLnNlYXJjaFBhcmFtcy5zZXQoXCJyZXR1cm5fdXJsXCIsIG5ldyBVUkwoYCR7cHJvdG99Oi8vJHtob3N0fWApLmhyZWYpKTtcbiAgfVxuICBjbGVya0RldmVsb3BtZW50Q2FjaGUgPT0gbnVsbCA/IHZvaWQgMCA6IGNsZXJrRGV2ZWxvcG1lbnRDYWNoZS5sb2coe1xuICAgIGNhY2hlS2V5OiBuZXdPclJlYWRLZXlzLnB1Ymxpc2hhYmxlS2V5LFxuICAgIG1zZzogY3JlYXRlS2V5bGVzc01vZGVNZXNzYWdlKHsgLi4ubmV3T3JSZWFkS2V5cywgY2xhaW1Vcmw6IGNsYWltVXJsLmhyZWYgfSlcbiAgfSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChLZXlsZXNzQ29va2llU3luYywgeyAuLi5uZXdPclJlYWRLZXlzIH0sIGNsaWVudFByb3ZpZGVyKTtcbn07XG5leHBvcnQge1xuICBLZXlsZXNzUHJvdmlkZXIsXG4gIGdldEtleWxlc3NTdGF0dXNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXlsZXNzLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/keyless-provider.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/chunk-BUSYA2B4.js":
/*!***************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/chunk-BUSYA2B4.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS)\n/* harmony export */ });\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\n\n\n//# sourceMappingURL=chunk-BUSYA2B4.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vY2h1bmstQlVTWUEyQjQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSwyREFBMkQsYUFBYTtBQUN4RTs7QUFJRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvc2lkZGhhbnRndXB0YS9Eb2N1bWVudHMvcHJvamVjdHMvZm9yZ2V0YWkvbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vY2h1bmstQlVTWUEyQjQuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19jb21tb25KUyA9IChjYiwgbW9kKSA9PiBmdW5jdGlvbiBfX3JlcXVpcmUoKSB7XG4gIHJldHVybiBtb2QgfHwgKDAsIGNiW19fZ2V0T3duUHJvcE5hbWVzKGNiKVswXV0pKChtb2QgPSB7IGV4cG9ydHM6IHt9IH0pLmV4cG9ydHMsIG1vZCksIG1vZC5leHBvcnRzO1xufTtcblxuZXhwb3J0IHtcbiAgX19jb21tb25KU1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLUJVU1lBMkI0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/chunk-BUSYA2B4.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/PromisifiedAuthProvider.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/PromisifiedAuthProvider.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PromisifiedAuthProvider: () => (/* binding */ PromisifiedAuthProvider),
/* harmony export */   usePromisifiedAuth: () => (/* binding */ usePromisifiedAuth)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ "(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js");

const PromisifiedAuthProvider = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call PromisifiedAuthProvider() from the server but PromisifiedAuthProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/PromisifiedAuthProvider.js",
"PromisifiedAuthProvider",
);const usePromisifiedAuth = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call usePromisifiedAuth() from the server but usePromisifiedAuth is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/PromisifiedAuthProvider.js",
"usePromisifiedAuth",
);

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthenticateWithRedirectCallback: () => (/* binding */ AuthenticateWithRedirectCallback),
/* harmony export */   ClerkLoaded: () => (/* binding */ ClerkLoaded),
/* harmony export */   ClerkLoading: () => (/* binding */ ClerkLoading),
/* harmony export */   MultisessionAppSupport: () => (/* binding */ MultisessionAppSupport),
/* harmony export */   Protect: () => (/* binding */ Protect),
/* harmony export */   RedirectToCreateOrganization: () => (/* binding */ RedirectToCreateOrganization),
/* harmony export */   RedirectToOrganizationProfile: () => (/* binding */ RedirectToOrganizationProfile),
/* harmony export */   RedirectToSignIn: () => (/* binding */ RedirectToSignIn),
/* harmony export */   RedirectToSignUp: () => (/* binding */ RedirectToSignUp),
/* harmony export */   RedirectToUserProfile: () => (/* binding */ RedirectToUserProfile),
/* harmony export */   SignedIn: () => (/* binding */ SignedIn),
/* harmony export */   SignedOut: () => (/* binding */ SignedOut)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ "(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js");

const AuthenticateWithRedirectCallback = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call AuthenticateWithRedirectCallback() from the server but AuthenticateWithRedirectCallback is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"AuthenticateWithRedirectCallback",
);const ClerkLoaded = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call ClerkLoaded() from the server but ClerkLoaded is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"ClerkLoaded",
);const ClerkLoading = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call ClerkLoading() from the server but ClerkLoading is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"ClerkLoading",
);const MultisessionAppSupport = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call MultisessionAppSupport() from the server but MultisessionAppSupport is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"MultisessionAppSupport",
);const Protect = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call Protect() from the server but Protect is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"Protect",
);const RedirectToCreateOrganization = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call RedirectToCreateOrganization() from the server but RedirectToCreateOrganization is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"RedirectToCreateOrganization",
);const RedirectToOrganizationProfile = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call RedirectToOrganizationProfile() from the server but RedirectToOrganizationProfile is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"RedirectToOrganizationProfile",
);const RedirectToSignIn = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call RedirectToSignIn() from the server but RedirectToSignIn is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"RedirectToSignIn",
);const RedirectToSignUp = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call RedirectToSignUp() from the server but RedirectToSignUp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"RedirectToSignUp",
);const RedirectToUserProfile = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call RedirectToUserProfile() from the server but RedirectToUserProfile is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"RedirectToUserProfile",
);const SignedIn = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call SignedIn() from the server but SignedIn is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"SignedIn",
);const SignedOut = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call SignedOut() from the server but SignedOut is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js",
"SignedOut",
);

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmailLinkErrorCode: () => (/* binding */ EmailLinkErrorCode),
/* harmony export */   EmailLinkErrorCodeStatus: () => (/* binding */ EmailLinkErrorCodeStatus),
/* harmony export */   isClerkAPIResponseError: () => (/* binding */ isClerkAPIResponseError),
/* harmony export */   isClerkRuntimeError: () => (/* binding */ isClerkRuntimeError),
/* harmony export */   isEmailLinkError: () => (/* binding */ isEmailLinkError),
/* harmony export */   isKnownError: () => (/* binding */ isKnownError),
/* harmony export */   isMetamaskError: () => (/* binding */ isMetamaskError),
/* harmony export */   isReverificationCancelledError: () => (/* binding */ isReverificationCancelledError),
/* harmony export */   useAuth: () => (/* binding */ useAuth),
/* harmony export */   useClerk: () => (/* binding */ useClerk),
/* harmony export */   useEmailLink: () => (/* binding */ useEmailLink),
/* harmony export */   useOrganization: () => (/* binding */ useOrganization),
/* harmony export */   useOrganizationList: () => (/* binding */ useOrganizationList),
/* harmony export */   useReverification: () => (/* binding */ useReverification),
/* harmony export */   useSession: () => (/* binding */ useSession),
/* harmony export */   useSessionList: () => (/* binding */ useSessionList),
/* harmony export */   useSignIn: () => (/* binding */ useSignIn),
/* harmony export */   useSignUp: () => (/* binding */ useSignUp),
/* harmony export */   useUser: () => (/* binding */ useUser)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ "(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js");

const EmailLinkErrorCode = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call EmailLinkErrorCode() from the server but EmailLinkErrorCode is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"EmailLinkErrorCode",
);const EmailLinkErrorCodeStatus = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call EmailLinkErrorCodeStatus() from the server but EmailLinkErrorCodeStatus is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"EmailLinkErrorCodeStatus",
);const isClerkAPIResponseError = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call isClerkAPIResponseError() from the server but isClerkAPIResponseError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"isClerkAPIResponseError",
);const isClerkRuntimeError = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call isClerkRuntimeError() from the server but isClerkRuntimeError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"isClerkRuntimeError",
);const isEmailLinkError = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call isEmailLinkError() from the server but isEmailLinkError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"isEmailLinkError",
);const isKnownError = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call isKnownError() from the server but isKnownError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"isKnownError",
);const isMetamaskError = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call isMetamaskError() from the server but isMetamaskError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"isMetamaskError",
);const isReverificationCancelledError = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call isReverificationCancelledError() from the server but isReverificationCancelledError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"isReverificationCancelledError",
);const useAuth = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useAuth() from the server but useAuth is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"useAuth",
);const useClerk = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useClerk() from the server but useClerk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"useClerk",
);const useEmailLink = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useEmailLink() from the server but useEmailLink is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"useEmailLink",
);const useOrganization = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useOrganization() from the server but useOrganization is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"useOrganization",
);const useOrganizationList = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useOrganizationList() from the server but useOrganizationList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"useOrganizationList",
);const useReverification = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useReverification() from the server but useReverification is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"useReverification",
);const useSession = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useSession() from the server but useSession is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"useSession",
);const useSessionList = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useSessionList() from the server but useSessionList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"useSessionList",
);const useSignIn = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useSignIn() from the server but useSignIn is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"useSignIn",
);const useSignUp = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useSignUp() from the server but useSignUp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"useSignUp",
);const useUser = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useUser() from the server but useUser is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js",
"useUser",
);

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CreateOrganization: () => (/* binding */ CreateOrganization),
/* harmony export */   GoogleOneTap: () => (/* binding */ GoogleOneTap),
/* harmony export */   OrganizationList: () => (/* binding */ OrganizationList),
/* harmony export */   OrganizationProfile: () => (/* binding */ OrganizationProfile),
/* harmony export */   OrganizationSwitcher: () => (/* binding */ OrganizationSwitcher),
/* harmony export */   SignIn: () => (/* binding */ SignIn),
/* harmony export */   SignInButton: () => (/* binding */ SignInButton),
/* harmony export */   SignInWithMetamaskButton: () => (/* binding */ SignInWithMetamaskButton),
/* harmony export */   SignOutButton: () => (/* binding */ SignOutButton),
/* harmony export */   SignUp: () => (/* binding */ SignUp),
/* harmony export */   SignUpButton: () => (/* binding */ SignUpButton),
/* harmony export */   UserButton: () => (/* binding */ UserButton),
/* harmony export */   UserProfile: () => (/* binding */ UserProfile),
/* harmony export */   Waitlist: () => (/* binding */ Waitlist)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ "(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js");

const CreateOrganization = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call CreateOrganization() from the server but CreateOrganization is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"CreateOrganization",
);const GoogleOneTap = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call GoogleOneTap() from the server but GoogleOneTap is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"GoogleOneTap",
);const OrganizationList = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call OrganizationList() from the server but OrganizationList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"OrganizationList",
);const OrganizationProfile = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call OrganizationProfile() from the server but OrganizationProfile is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"OrganizationProfile",
);const OrganizationSwitcher = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call OrganizationSwitcher() from the server but OrganizationSwitcher is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"OrganizationSwitcher",
);const SignIn = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call SignIn() from the server but SignIn is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"SignIn",
);const SignInButton = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call SignInButton() from the server but SignInButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"SignInButton",
);const SignInWithMetamaskButton = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call SignInWithMetamaskButton() from the server but SignInWithMetamaskButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"SignInWithMetamaskButton",
);const SignOutButton = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call SignOutButton() from the server but SignOutButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"SignOutButton",
);const SignUp = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call SignUp() from the server but SignUp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"SignUp",
);const SignUpButton = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call SignUpButton() from the server but SignUpButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"SignUpButton",
);const UserButton = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call UserButton() from the server but UserButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"UserButton",
);const UserProfile = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call UserProfile() from the server but UserProfile is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"UserProfile",
);const Waitlist = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call Waitlist() from the server but Waitlist is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/siddhantgupta/Documents/projects/forgetai/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js",
"Waitlist",
);

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticateWithRedirectCallback: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_2__.AuthenticateWithRedirectCallback),\n/* harmony export */   ClerkLoaded: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_2__.ClerkLoaded),\n/* harmony export */   ClerkLoading: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_2__.ClerkLoading),\n/* harmony export */   ClerkProvider: () => (/* binding */ ClerkProvider),\n/* harmony export */   CreateOrganization: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.CreateOrganization),\n/* harmony export */   GoogleOneTap: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.GoogleOneTap),\n/* harmony export */   OrganizationList: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.OrganizationList),\n/* harmony export */   OrganizationProfile: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.OrganizationProfile),\n/* harmony export */   OrganizationSwitcher: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.OrganizationSwitcher),\n/* harmony export */   Protect: () => (/* binding */ Protect),\n/* harmony export */   RedirectToCreateOrganization: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_2__.RedirectToCreateOrganization),\n/* harmony export */   RedirectToOrganizationProfile: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_2__.RedirectToOrganizationProfile),\n/* harmony export */   RedirectToSignIn: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_2__.RedirectToSignIn),\n/* harmony export */   RedirectToSignUp: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_2__.RedirectToSignUp),\n/* harmony export */   RedirectToUserProfile: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_2__.RedirectToUserProfile),\n/* harmony export */   SignIn: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.SignIn),\n/* harmony export */   SignInButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.SignInButton),\n/* harmony export */   SignInWithMetamaskButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.SignInWithMetamaskButton),\n/* harmony export */   SignOutButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.SignOutButton),\n/* harmony export */   SignUp: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.SignUp),\n/* harmony export */   SignUpButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.SignUpButton),\n/* harmony export */   SignedIn: () => (/* binding */ SignedIn),\n/* harmony export */   SignedOut: () => (/* binding */ SignedOut),\n/* harmony export */   UserButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.UserButton),\n/* harmony export */   UserProfile: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.UserProfile),\n/* harmony export */   Waitlist: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__.Waitlist),\n/* harmony export */   useAuth: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useAuth),\n/* harmony export */   useClerk: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useClerk),\n/* harmony export */   useEmailLink: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useEmailLink),\n/* harmony export */   useOrganization: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useOrganization),\n/* harmony export */   useOrganizationList: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useOrganizationList),\n/* harmony export */   useReverification: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useReverification),\n/* harmony export */   useSession: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useSession),\n/* harmony export */   useSessionList: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useSessionList),\n/* harmony export */   useSignIn: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useSignIn),\n/* harmony export */   useSignUp: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useSignUp),\n/* harmony export */   useUser: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useUser)\n/* harmony export */ });\n/* harmony import */ var _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./client-boundary/controlComponents */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js\");\n/* harmony import */ var _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./client-boundary/uiComponents */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js\");\n/* harmony import */ var _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./client-boundary/hooks */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! #components */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! #components */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js\");\n\n\n\n\n\nconst ClerkProvider = _components__WEBPACK_IMPORTED_MODULE_0__.ClerkProvider;\nconst SignedIn = _components__WEBPACK_IMPORTED_MODULE_1__.SignedIn;\nconst SignedOut = _components__WEBPACK_IMPORTED_MODULE_1__.SignedOut;\nconst Protect = _components__WEBPACK_IMPORTED_MODULE_1__.Protect;\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZCO0FBVWdCO0FBZ0JMO0FBYVA7QUFDZTtBQUNoRCxzQkFBc0Isc0RBQThCO0FBQ3BELGlCQUFpQixpREFBeUI7QUFDMUMsa0JBQWtCLGtEQUEwQjtBQUM1QyxnQkFBZ0IsZ0RBQXdCO0FBdUN0QztBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvc2lkZGhhbnRndXB0YS9Eb2N1bWVudHMvcHJvamVjdHMvZm9yZ2V0YWkvbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi9jaHVuay1CVVNZQTJCNC5qc1wiO1xuaW1wb3J0IHtcbiAgQXV0aGVudGljYXRlV2l0aFJlZGlyZWN0Q2FsbGJhY2ssXG4gIENsZXJrTG9hZGVkLFxuICBDbGVya0xvYWRpbmcsXG4gIFJlZGlyZWN0VG9DcmVhdGVPcmdhbml6YXRpb24sXG4gIFJlZGlyZWN0VG9Pcmdhbml6YXRpb25Qcm9maWxlLFxuICBSZWRpcmVjdFRvU2lnbkluLFxuICBSZWRpcmVjdFRvU2lnblVwLFxuICBSZWRpcmVjdFRvVXNlclByb2ZpbGVcbn0gZnJvbSBcIi4vY2xpZW50LWJvdW5kYXJ5L2NvbnRyb2xDb21wb25lbnRzXCI7XG5pbXBvcnQge1xuICBDcmVhdGVPcmdhbml6YXRpb24sXG4gIE9yZ2FuaXphdGlvbkxpc3QsXG4gIE9yZ2FuaXphdGlvblByb2ZpbGUsXG4gIE9yZ2FuaXphdGlvblN3aXRjaGVyLFxuICBTaWduSW4sXG4gIFNpZ25JbkJ1dHRvbixcbiAgU2lnbkluV2l0aE1ldGFtYXNrQnV0dG9uLFxuICBTaWduT3V0QnV0dG9uLFxuICBTaWduVXAsXG4gIFNpZ25VcEJ1dHRvbixcbiAgVXNlckJ1dHRvbixcbiAgVXNlclByb2ZpbGUsXG4gIEdvb2dsZU9uZVRhcCxcbiAgV2FpdGxpc3Rcbn0gZnJvbSBcIi4vY2xpZW50LWJvdW5kYXJ5L3VpQ29tcG9uZW50c1wiO1xuaW1wb3J0IHtcbiAgdXNlQXV0aCxcbiAgdXNlQ2xlcmssXG4gIHVzZUVtYWlsTGluayxcbiAgdXNlT3JnYW5pemF0aW9uLFxuICB1c2VPcmdhbml6YXRpb25MaXN0LFxuICB1c2VTZXNzaW9uLFxuICB1c2VTZXNzaW9uTGlzdCxcbiAgdXNlU2lnbkluLFxuICB1c2VTaWduVXAsXG4gIHVzZVVzZXIsXG4gIHVzZVJldmVyaWZpY2F0aW9uXG59IGZyb20gXCIuL2NsaWVudC1ib3VuZGFyeS9ob29rc1wiO1xuaW1wb3J0ICogYXMgQ29tcG9uZW50c01vZHVsZSBmcm9tIFwiI2NvbXBvbmVudHNcIjtcbmNvbnN0IENsZXJrUHJvdmlkZXIgPSBDb21wb25lbnRzTW9kdWxlLkNsZXJrUHJvdmlkZXI7XG5jb25zdCBTaWduZWRJbiA9IENvbXBvbmVudHNNb2R1bGUuU2lnbmVkSW47XG5jb25zdCBTaWduZWRPdXQgPSBDb21wb25lbnRzTW9kdWxlLlNpZ25lZE91dDtcbmNvbnN0IFByb3RlY3QgPSBDb21wb25lbnRzTW9kdWxlLlByb3RlY3Q7XG5leHBvcnQge1xuICBBdXRoZW50aWNhdGVXaXRoUmVkaXJlY3RDYWxsYmFjayxcbiAgQ2xlcmtMb2FkZWQsXG4gIENsZXJrTG9hZGluZyxcbiAgQ2xlcmtQcm92aWRlcixcbiAgQ3JlYXRlT3JnYW5pemF0aW9uLFxuICBHb29nbGVPbmVUYXAsXG4gIE9yZ2FuaXphdGlvbkxpc3QsXG4gIE9yZ2FuaXphdGlvblByb2ZpbGUsXG4gIE9yZ2FuaXphdGlvblN3aXRjaGVyLFxuICBQcm90ZWN0LFxuICBSZWRpcmVjdFRvQ3JlYXRlT3JnYW5pemF0aW9uLFxuICBSZWRpcmVjdFRvT3JnYW5pemF0aW9uUHJvZmlsZSxcbiAgUmVkaXJlY3RUb1NpZ25JbixcbiAgUmVkaXJlY3RUb1NpZ25VcCxcbiAgUmVkaXJlY3RUb1VzZXJQcm9maWxlLFxuICBTaWduSW4sXG4gIFNpZ25JbkJ1dHRvbixcbiAgU2lnbkluV2l0aE1ldGFtYXNrQnV0dG9uLFxuICBTaWduT3V0QnV0dG9uLFxuICBTaWduVXAsXG4gIFNpZ25VcEJ1dHRvbixcbiAgU2lnbmVkSW4sXG4gIFNpZ25lZE91dCxcbiAgVXNlckJ1dHRvbixcbiAgVXNlclByb2ZpbGUsXG4gIFdhaXRsaXN0LFxuICB1c2VBdXRoLFxuICB1c2VDbGVyayxcbiAgdXNlRW1haWxMaW5rLFxuICB1c2VPcmdhbml6YXRpb24sXG4gIHVzZU9yZ2FuaXphdGlvbkxpc3QsXG4gIHVzZVJldmVyaWZpY2F0aW9uLFxuICB1c2VTZXNzaW9uLFxuICB1c2VTZXNzaW9uTGlzdCxcbiAgdXNlU2lnbkluLFxuICB1c2VTaWduVXAsXG4gIHVzZVVzZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/index.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/runtime/browser/safe-node-apis.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/runtime/browser/safe-node-apis.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _chunk_BUSYA2B4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-BUSYA2B4.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/chunk-BUSYA2B4.js\");\n\nvar require_safe_node_apis = (0,_chunk_BUSYA2B4_js__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n  \"src/runtime/browser/safe-node-apis.js\"(exports, module) {\n    const fs = void 0;\n    const path = void 0;\n    const cwd = void 0;\n    module.exports = { fs, path, cwd };\n  }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (require_safe_node_apis());\n//# sourceMappingURL=safe-node-apis.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vcnVudGltZS9icm93c2VyL3NhZmUtbm9kZS1hcGlzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRWlDO0FBQ2pDLDZCQUE2Qiw4REFBVTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLENBQUM7QUFDRCxpRUFBZSx3QkFBd0IsRUFBQztBQUN4QyIsInNvdXJjZXMiOlsiL1VzZXJzL3NpZGRoYW50Z3VwdGEvRG9jdW1lbnRzL3Byb2plY3RzL2ZvcmdldGFpL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL3J1bnRpbWUvYnJvd3Nlci9zYWZlLW5vZGUtYXBpcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBfX2NvbW1vbkpTXG59IGZyb20gXCIuLi8uLi9jaHVuay1CVVNZQTJCNC5qc1wiO1xudmFyIHJlcXVpcmVfc2FmZV9ub2RlX2FwaXMgPSBfX2NvbW1vbkpTKHtcbiAgXCJzcmMvcnVudGltZS9icm93c2VyL3NhZmUtbm9kZS1hcGlzLmpzXCIoZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgY29uc3QgZnMgPSB2b2lkIDA7XG4gICAgY29uc3QgcGF0aCA9IHZvaWQgMDtcbiAgICBjb25zdCBjd2QgPSB2b2lkIDA7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7IGZzLCBwYXRoLCBjd2QgfTtcbiAgfVxufSk7XG5leHBvcnQgZGVmYXVsdCByZXF1aXJlX3NhZmVfbm9kZV9hcGlzKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYWZlLW5vZGUtYXBpcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/runtime/browser/safe-node-apis.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/buildClerkProps.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/buildClerkProps.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildClerkProps: () => (/* binding */ buildClerkProps),\n/* harmony export */   getDynamicAuthData: () => (/* binding */ getDynamicAuthData)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend/internal */ \"(middleware)/./node_modules/@clerk/backend/dist/internal.mjs\");\n/* harmony import */ var _data_getAuthDataFromRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/getAuthDataFromRequest */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/data/getAuthDataFromRequest.js\");\n\n\n\nconst buildClerkProps = (req, initialState = {}) => {\n  const sanitizedAuthObject = getDynamicAuthData(req, initialState);\n  const __clerk_ssr_state =  true ? JSON.parse(JSON.stringify(sanitizedAuthObject)) : 0;\n  return { __clerk_ssr_state };\n};\nfunction getDynamicAuthData(req, initialState = {}) {\n  const authObject = (0,_data_getAuthDataFromRequest__WEBPACK_IMPORTED_MODULE_1__.getAuthDataFromRequest)(req);\n  return (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.makeAuthObjectSerializable)((0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.stripPrivateDataFromObject)({ ...authObject, ...initialState }));\n}\n\n//# sourceMappingURL=buildClerkProps.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2J1aWxkQ2xlcmtQcm9wcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThCO0FBQ21FO0FBQzFCO0FBQ3ZFLCtDQUErQztBQUMvQztBQUNBLDRCQUE0QixLQUFxQyxxREFBcUQsQ0FBbUI7QUFDekksV0FBVztBQUNYO0FBQ0Esa0RBQWtEO0FBQ2xELHFCQUFxQixvRkFBc0I7QUFDM0MsU0FBUyxtRkFBMEIsQ0FBQyxtRkFBMEIsR0FBRyxnQ0FBZ0M7QUFDakc7QUFJRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvc2lkZGhhbnRndXB0YS9Eb2N1bWVudHMvcHJvamVjdHMvZm9yZ2V0YWkvbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2J1aWxkQ2xlcmtQcm9wcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay1CVVNZQTJCNC5qc1wiO1xuaW1wb3J0IHsgbWFrZUF1dGhPYmplY3RTZXJpYWxpemFibGUsIHN0cmlwUHJpdmF0ZURhdGFGcm9tT2JqZWN0IH0gZnJvbSBcIkBjbGVyay9iYWNrZW5kL2ludGVybmFsXCI7XG5pbXBvcnQgeyBnZXRBdXRoRGF0YUZyb21SZXF1ZXN0IH0gZnJvbSBcIi4vZGF0YS9nZXRBdXRoRGF0YUZyb21SZXF1ZXN0XCI7XG5jb25zdCBidWlsZENsZXJrUHJvcHMgPSAocmVxLCBpbml0aWFsU3RhdGUgPSB7fSkgPT4ge1xuICBjb25zdCBzYW5pdGl6ZWRBdXRoT2JqZWN0ID0gZ2V0RHluYW1pY0F1dGhEYXRhKHJlcSwgaW5pdGlhbFN0YXRlKTtcbiAgY29uc3QgX19jbGVya19zc3Jfc3RhdGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNhbml0aXplZEF1dGhPYmplY3QpKSA6IHNhbml0aXplZEF1dGhPYmplY3Q7XG4gIHJldHVybiB7IF9fY2xlcmtfc3NyX3N0YXRlIH07XG59O1xuZnVuY3Rpb24gZ2V0RHluYW1pY0F1dGhEYXRhKHJlcSwgaW5pdGlhbFN0YXRlID0ge30pIHtcbiAgY29uc3QgYXV0aE9iamVjdCA9IGdldEF1dGhEYXRhRnJvbVJlcXVlc3QocmVxKTtcbiAgcmV0dXJuIG1ha2VBdXRoT2JqZWN0U2VyaWFsaXphYmxlKHN0cmlwUHJpdmF0ZURhdGFGcm9tT2JqZWN0KHsgLi4uYXV0aE9iamVjdCwgLi4uaW5pdGlhbFN0YXRlIH0pKTtcbn1cbmV4cG9ydCB7XG4gIGJ1aWxkQ2xlcmtQcm9wcyxcbiAgZ2V0RHluYW1pY0F1dGhEYXRhXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVpbGRDbGVya1Byb3BzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/buildClerkProps.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createGetAuth.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/createGetAuth.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAsyncGetAuth: () => (/* binding */ createAsyncGetAuth),\n/* harmony export */   createSyncGetAuth: () => (/* binding */ createSyncGetAuth),\n/* harmony export */   getAuth: () => (/* binding */ getAuth)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend/internal */ \"(middleware)/./node_modules/@clerk/backend/dist/internal.mjs\");\n/* harmony import */ var _clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @clerk/shared/underscore */ \"(middleware)/./node_modules/@clerk/shared/dist/underscore.mjs\");\n/* harmony import */ var _utils_debugLogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/debugLogger */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/debugLogger.js\");\n/* harmony import */ var _utils_sdk_versions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/sdk-versions */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/sdk-versions.js\");\n/* harmony import */ var _data_getAuthDataFromRequest__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./data/getAuthDataFromRequest */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/data/getAuthDataFromRequest.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./errors */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/errors.js\");\n/* harmony import */ var _headers_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./headers-utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/headers-utils.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js\");\n\n\n\n\n\n\n\n\n\nconst createAsyncGetAuth = ({\n  debugLoggerName,\n  noAuthStatusMessage\n}) => (0,_utils_debugLogger__WEBPACK_IMPORTED_MODULE_2__.withLogger)(debugLoggerName, (logger) => {\n  return async (req, opts) => {\n    if ((0,_clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_1__.isTruthy)((0,_headers_utils__WEBPACK_IMPORTED_MODULE_3__.getHeader)(req, _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.EnableDebug))) {\n      logger.enable();\n    }\n    if (!(0,_headers_utils__WEBPACK_IMPORTED_MODULE_3__.detectClerkMiddleware)(req)) {\n      if (_utils_sdk_versions__WEBPACK_IMPORTED_MODULE_4__.isNextWithUnstableServerActions) {\n        (0,_utils__WEBPACK_IMPORTED_MODULE_5__.assertAuthStatus)(req, noAuthStatusMessage);\n      }\n      const missConfiguredMiddlewareLocation = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./fs/middleware-location.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/middleware-location.js\")).then((m) => m.suggestMiddlewareLocation()).catch(() => void 0);\n      if (missConfiguredMiddlewareLocation) {\n        throw new Error(missConfiguredMiddlewareLocation);\n      }\n      (0,_utils__WEBPACK_IMPORTED_MODULE_5__.assertAuthStatus)(req, noAuthStatusMessage);\n    }\n    return (0,_data_getAuthDataFromRequest__WEBPACK_IMPORTED_MODULE_6__.getAuthDataFromRequest)(req, { ...opts, logger });\n  };\n});\nconst createSyncGetAuth = ({\n  debugLoggerName,\n  noAuthStatusMessage\n}) => (0,_utils_debugLogger__WEBPACK_IMPORTED_MODULE_2__.withLogger)(debugLoggerName, (logger) => {\n  return (req, opts) => {\n    if ((0,_clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_1__.isTruthy)((0,_headers_utils__WEBPACK_IMPORTED_MODULE_3__.getHeader)(req, _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.EnableDebug))) {\n      logger.enable();\n    }\n    (0,_utils__WEBPACK_IMPORTED_MODULE_5__.assertAuthStatus)(req, noAuthStatusMessage);\n    return (0,_data_getAuthDataFromRequest__WEBPACK_IMPORTED_MODULE_6__.getAuthDataFromRequest)(req, { ...opts, logger });\n  };\n});\nconst getAuth = createSyncGetAuth({\n  debugLoggerName: \"getAuth()\",\n  noAuthStatusMessage: (0,_errors__WEBPACK_IMPORTED_MODULE_7__.getAuthAuthHeaderMissing)()\n});\n\n//# sourceMappingURL=createGetAuth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2NyZWF0ZUdldEF1dGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBOEI7QUFDc0I7QUFDQTtBQUNGO0FBQ3NCO0FBQ0Q7QUFDbkI7QUFDZTtBQUN4QjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxDQUFDLEtBQUssOERBQVU7QUFDaEI7QUFDQSxRQUFRLGtFQUFRLENBQUMseURBQVMsTUFBTSw4REFBUztBQUN6QztBQUNBO0FBQ0EsU0FBUyxxRUFBcUI7QUFDOUIsVUFBVSxnRkFBK0I7QUFDekMsUUFBUSx3REFBZ0I7QUFDeEI7QUFDQSxxREFBcUQsOE1BQXFDO0FBQzFGO0FBQ0E7QUFDQTtBQUNBLE1BQU0sd0RBQWdCO0FBQ3RCO0FBQ0EsV0FBVyxvRkFBc0IsUUFBUSxpQkFBaUI7QUFDMUQ7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxLQUFLLDhEQUFVO0FBQ2hCO0FBQ0EsUUFBUSxrRUFBUSxDQUFDLHlEQUFTLE1BQU0sOERBQVM7QUFDekM7QUFDQTtBQUNBLElBQUksd0RBQWdCO0FBQ3BCLFdBQVcsb0ZBQXNCLFFBQVEsaUJBQWlCO0FBQzFEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSx1QkFBdUIsaUVBQXdCO0FBQy9DLENBQUM7QUFLQztBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvc2lkZGhhbnRndXB0YS9Eb2N1bWVudHMvcHJvamVjdHMvZm9yZ2V0YWkvbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2NyZWF0ZUdldEF1dGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstQlVTWUEyQjQuanNcIjtcbmltcG9ydCB7IGNvbnN0YW50cyB9IGZyb20gXCJAY2xlcmsvYmFja2VuZC9pbnRlcm5hbFwiO1xuaW1wb3J0IHsgaXNUcnV0aHkgfSBmcm9tIFwiQGNsZXJrL3NoYXJlZC91bmRlcnNjb3JlXCI7XG5pbXBvcnQgeyB3aXRoTG9nZ2VyIH0gZnJvbSBcIi4uL3V0aWxzL2RlYnVnTG9nZ2VyXCI7XG5pbXBvcnQgeyBpc05leHRXaXRoVW5zdGFibGVTZXJ2ZXJBY3Rpb25zIH0gZnJvbSBcIi4uL3V0aWxzL3Nkay12ZXJzaW9uc1wiO1xuaW1wb3J0IHsgZ2V0QXV0aERhdGFGcm9tUmVxdWVzdCB9IGZyb20gXCIuL2RhdGEvZ2V0QXV0aERhdGFGcm9tUmVxdWVzdFwiO1xuaW1wb3J0IHsgZ2V0QXV0aEF1dGhIZWFkZXJNaXNzaW5nIH0gZnJvbSBcIi4vZXJyb3JzXCI7XG5pbXBvcnQgeyBkZXRlY3RDbGVya01pZGRsZXdhcmUsIGdldEhlYWRlciB9IGZyb20gXCIuL2hlYWRlcnMtdXRpbHNcIjtcbmltcG9ydCB7IGFzc2VydEF1dGhTdGF0dXMgfSBmcm9tIFwiLi91dGlsc1wiO1xuY29uc3QgY3JlYXRlQXN5bmNHZXRBdXRoID0gKHtcbiAgZGVidWdMb2dnZXJOYW1lLFxuICBub0F1dGhTdGF0dXNNZXNzYWdlXG59KSA9PiB3aXRoTG9nZ2VyKGRlYnVnTG9nZ2VyTmFtZSwgKGxvZ2dlcikgPT4ge1xuICByZXR1cm4gYXN5bmMgKHJlcSwgb3B0cykgPT4ge1xuICAgIGlmIChpc1RydXRoeShnZXRIZWFkZXIocmVxLCBjb25zdGFudHMuSGVhZGVycy5FbmFibGVEZWJ1ZykpKSB7XG4gICAgICBsb2dnZXIuZW5hYmxlKCk7XG4gICAgfVxuICAgIGlmICghZGV0ZWN0Q2xlcmtNaWRkbGV3YXJlKHJlcSkpIHtcbiAgICAgIGlmIChpc05leHRXaXRoVW5zdGFibGVTZXJ2ZXJBY3Rpb25zKSB7XG4gICAgICAgIGFzc2VydEF1dGhTdGF0dXMocmVxLCBub0F1dGhTdGF0dXNNZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1pc3NDb25maWd1cmVkTWlkZGxld2FyZUxvY2F0aW9uID0gYXdhaXQgaW1wb3J0KFwiLi9mcy9taWRkbGV3YXJlLWxvY2F0aW9uLmpzXCIpLnRoZW4oKG0pID0+IG0uc3VnZ2VzdE1pZGRsZXdhcmVMb2NhdGlvbigpKS5jYXRjaCgoKSA9PiB2b2lkIDApO1xuICAgICAgaWYgKG1pc3NDb25maWd1cmVkTWlkZGxld2FyZUxvY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtaXNzQ29uZmlndXJlZE1pZGRsZXdhcmVMb2NhdGlvbik7XG4gICAgICB9XG4gICAgICBhc3NlcnRBdXRoU3RhdHVzKHJlcSwgbm9BdXRoU3RhdHVzTWVzc2FnZSk7XG4gICAgfVxuICAgIHJldHVybiBnZXRBdXRoRGF0YUZyb21SZXF1ZXN0KHJlcSwgeyAuLi5vcHRzLCBsb2dnZXIgfSk7XG4gIH07XG59KTtcbmNvbnN0IGNyZWF0ZVN5bmNHZXRBdXRoID0gKHtcbiAgZGVidWdMb2dnZXJOYW1lLFxuICBub0F1dGhTdGF0dXNNZXNzYWdlXG59KSA9PiB3aXRoTG9nZ2VyKGRlYnVnTG9nZ2VyTmFtZSwgKGxvZ2dlcikgPT4ge1xuICByZXR1cm4gKHJlcSwgb3B0cykgPT4ge1xuICAgIGlmIChpc1RydXRoeShnZXRIZWFkZXIocmVxLCBjb25zdGFudHMuSGVhZGVycy5FbmFibGVEZWJ1ZykpKSB7XG4gICAgICBsb2dnZXIuZW5hYmxlKCk7XG4gICAgfVxuICAgIGFzc2VydEF1dGhTdGF0dXMocmVxLCBub0F1dGhTdGF0dXNNZXNzYWdlKTtcbiAgICByZXR1cm4gZ2V0QXV0aERhdGFGcm9tUmVxdWVzdChyZXEsIHsgLi4ub3B0cywgbG9nZ2VyIH0pO1xuICB9O1xufSk7XG5jb25zdCBnZXRBdXRoID0gY3JlYXRlU3luY0dldEF1dGgoe1xuICBkZWJ1Z0xvZ2dlck5hbWU6IFwiZ2V0QXV0aCgpXCIsXG4gIG5vQXV0aFN0YXR1c01lc3NhZ2U6IGdldEF1dGhBdXRoSGVhZGVyTWlzc2luZygpXG59KTtcbmV4cG9ydCB7XG4gIGNyZWF0ZUFzeW5jR2V0QXV0aCxcbiAgY3JlYXRlU3luY0dldEF1dGgsXG4gIGdldEF1dGhcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVHZXRBdXRoLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createGetAuth.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/data/getAuthDataFromRequest.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/data/getAuthDataFromRequest.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAuthDataFromRequest: () => (/* binding */ getAuthDataFromRequest)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend/internal */ \"(middleware)/./node_modules/@clerk/backend/dist/internal.mjs\");\n/* harmony import */ var _clerk_backend_jwt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @clerk/backend/jwt */ \"(middleware)/./node_modules/@clerk/backend/dist/jwt/index.mjs\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/constants.js\");\n/* harmony import */ var _headers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../headers-utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/headers-utils.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js\");\n\n\n\n\n\n\nfunction getAuthDataFromRequest(req, opts = {}) {\n  var _a, _b, _c;\n  const authStatus = (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthStatus\");\n  const authToken = (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthToken\");\n  const authMessage = (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthMessage\");\n  const authReason = (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthReason\");\n  const authSignature = (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthSignature\");\n  (_a = opts.logger) == null ? void 0 : _a.debug(\"headers\", { authStatus, authMessage, authReason });\n  const encryptedRequestData = (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getHeader)(req, _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.ClerkRequestData);\n  const decryptedRequestData = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.decryptClerkRequestData)(encryptedRequestData);\n  const options = {\n    secretKey: (opts == null ? void 0 : opts.secretKey) || decryptedRequestData.secretKey || _constants__WEBPACK_IMPORTED_MODULE_4__.SECRET_KEY,\n    publishableKey: decryptedRequestData.publishableKey || _constants__WEBPACK_IMPORTED_MODULE_4__.PUBLISHABLE_KEY,\n    apiUrl: _constants__WEBPACK_IMPORTED_MODULE_4__.API_URL,\n    apiVersion: _constants__WEBPACK_IMPORTED_MODULE_4__.API_VERSION,\n    authStatus,\n    authMessage,\n    authReason\n  };\n  (_b = opts.logger) == null ? void 0 : _b.debug(\"auth options\", options);\n  let authObject;\n  if (!authStatus || authStatus !== _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.AuthStatus.SignedIn) {\n    authObject = (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.signedOutAuthObject)(options);\n  } else {\n    (0,_utils__WEBPACK_IMPORTED_MODULE_3__.assertTokenSignature)(authToken, options.secretKey, authSignature);\n    const jwt = (0,_clerk_backend_jwt__WEBPACK_IMPORTED_MODULE_1__.decodeJwt)(authToken);\n    (_c = opts.logger) == null ? void 0 : _c.debug(\"jwt\", jwt.raw);\n    authObject = (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.signedInAuthObject)(options, jwt.raw.text, jwt.payload);\n  }\n  return authObject;\n}\n\n//# sourceMappingURL=getAuthDataFromRequest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2RhdGEvZ2V0QXV0aERhdGFGcm9tUmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUM7QUFDd0U7QUFDMUQ7QUFDa0M7QUFDYjtBQUNLO0FBQ3pFLDhDQUE4QztBQUM5QztBQUNBLHFCQUFxQixxRUFBcUI7QUFDMUMsb0JBQW9CLHFFQUFxQjtBQUN6QyxzQkFBc0IscUVBQXFCO0FBQzNDLHFCQUFxQixxRUFBcUI7QUFDMUMsd0JBQXdCLHFFQUFxQjtBQUM3Qyw4REFBOEQscUNBQXFDO0FBQ25HLCtCQUErQix5REFBUyxNQUFNLDhEQUFTO0FBQ3ZELCtCQUErQiwrREFBdUI7QUFDdEQ7QUFDQSw2RkFBNkYsa0RBQVU7QUFDdkcsMkRBQTJELHVEQUFlO0FBQzFFLFlBQVksK0NBQU87QUFDbkIsZ0JBQWdCLG1EQUFXO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywrREFBVTtBQUM5QyxpQkFBaUIsNEVBQW1CO0FBQ3BDLElBQUk7QUFDSixJQUFJLDREQUFvQjtBQUN4QixnQkFBZ0IsNkRBQVM7QUFDekI7QUFDQSxpQkFBaUIsMkVBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaWRkaGFudGd1cHRhL0RvY3VtZW50cy9wcm9qZWN0cy9mb3JnZXRhaS9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9zZXJ2ZXIvZGF0YS9nZXRBdXRoRGF0YUZyb21SZXF1ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uLy4uL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5pbXBvcnQgeyBBdXRoU3RhdHVzLCBjb25zdGFudHMsIHNpZ25lZEluQXV0aE9iamVjdCwgc2lnbmVkT3V0QXV0aE9iamVjdCB9IGZyb20gXCJAY2xlcmsvYmFja2VuZC9pbnRlcm5hbFwiO1xuaW1wb3J0IHsgZGVjb2RlSnd0IH0gZnJvbSBcIkBjbGVyay9iYWNrZW5kL2p3dFwiO1xuaW1wb3J0IHsgQVBJX1VSTCwgQVBJX1ZFUlNJT04sIFBVQkxJU0hBQkxFX0tFWSwgU0VDUkVUX0tFWSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGdldEF1dGhLZXlGcm9tUmVxdWVzdCwgZ2V0SGVhZGVyIH0gZnJvbSBcIi4uL2hlYWRlcnMtdXRpbHNcIjtcbmltcG9ydCB7IGFzc2VydFRva2VuU2lnbmF0dXJlLCBkZWNyeXB0Q2xlcmtSZXF1ZXN0RGF0YSB9IGZyb20gXCIuLi91dGlsc1wiO1xuZnVuY3Rpb24gZ2V0QXV0aERhdGFGcm9tUmVxdWVzdChyZXEsIG9wdHMgPSB7fSkge1xuICB2YXIgX2EsIF9iLCBfYztcbiAgY29uc3QgYXV0aFN0YXR1cyA9IGdldEF1dGhLZXlGcm9tUmVxdWVzdChyZXEsIFwiQXV0aFN0YXR1c1wiKTtcbiAgY29uc3QgYXV0aFRva2VuID0gZ2V0QXV0aEtleUZyb21SZXF1ZXN0KHJlcSwgXCJBdXRoVG9rZW5cIik7XG4gIGNvbnN0IGF1dGhNZXNzYWdlID0gZ2V0QXV0aEtleUZyb21SZXF1ZXN0KHJlcSwgXCJBdXRoTWVzc2FnZVwiKTtcbiAgY29uc3QgYXV0aFJlYXNvbiA9IGdldEF1dGhLZXlGcm9tUmVxdWVzdChyZXEsIFwiQXV0aFJlYXNvblwiKTtcbiAgY29uc3QgYXV0aFNpZ25hdHVyZSA9IGdldEF1dGhLZXlGcm9tUmVxdWVzdChyZXEsIFwiQXV0aFNpZ25hdHVyZVwiKTtcbiAgKF9hID0gb3B0cy5sb2dnZXIpID09IG51bGwgPyB2b2lkIDAgOiBfYS5kZWJ1ZyhcImhlYWRlcnNcIiwgeyBhdXRoU3RhdHVzLCBhdXRoTWVzc2FnZSwgYXV0aFJlYXNvbiB9KTtcbiAgY29uc3QgZW5jcnlwdGVkUmVxdWVzdERhdGEgPSBnZXRIZWFkZXIocmVxLCBjb25zdGFudHMuSGVhZGVycy5DbGVya1JlcXVlc3REYXRhKTtcbiAgY29uc3QgZGVjcnlwdGVkUmVxdWVzdERhdGEgPSBkZWNyeXB0Q2xlcmtSZXF1ZXN0RGF0YShlbmNyeXB0ZWRSZXF1ZXN0RGF0YSk7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgc2VjcmV0S2V5OiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5zZWNyZXRLZXkpIHx8IGRlY3J5cHRlZFJlcXVlc3REYXRhLnNlY3JldEtleSB8fCBTRUNSRVRfS0VZLFxuICAgIHB1Ymxpc2hhYmxlS2V5OiBkZWNyeXB0ZWRSZXF1ZXN0RGF0YS5wdWJsaXNoYWJsZUtleSB8fCBQVUJMSVNIQUJMRV9LRVksXG4gICAgYXBpVXJsOiBBUElfVVJMLFxuICAgIGFwaVZlcnNpb246IEFQSV9WRVJTSU9OLFxuICAgIGF1dGhTdGF0dXMsXG4gICAgYXV0aE1lc3NhZ2UsXG4gICAgYXV0aFJlYXNvblxuICB9O1xuICAoX2IgPSBvcHRzLmxvZ2dlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmRlYnVnKFwiYXV0aCBvcHRpb25zXCIsIG9wdGlvbnMpO1xuICBsZXQgYXV0aE9iamVjdDtcbiAgaWYgKCFhdXRoU3RhdHVzIHx8IGF1dGhTdGF0dXMgIT09IEF1dGhTdGF0dXMuU2lnbmVkSW4pIHtcbiAgICBhdXRoT2JqZWN0ID0gc2lnbmVkT3V0QXV0aE9iamVjdChvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRUb2tlblNpZ25hdHVyZShhdXRoVG9rZW4sIG9wdGlvbnMuc2VjcmV0S2V5LCBhdXRoU2lnbmF0dXJlKTtcbiAgICBjb25zdCBqd3QgPSBkZWNvZGVKd3QoYXV0aFRva2VuKTtcbiAgICAoX2MgPSBvcHRzLmxvZ2dlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmRlYnVnKFwiand0XCIsIGp3dC5yYXcpO1xuICAgIGF1dGhPYmplY3QgPSBzaWduZWRJbkF1dGhPYmplY3Qob3B0aW9ucywgand0LnJhdy50ZXh0LCBqd3QucGF5bG9hZCk7XG4gIH1cbiAgcmV0dXJuIGF1dGhPYmplY3Q7XG59XG5leHBvcnQge1xuICBnZXRBdXRoRGF0YUZyb21SZXF1ZXN0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0QXV0aERhdGFGcm9tUmVxdWVzdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/data/getAuthDataFromRequest.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/middleware-location.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/fs/middleware-location.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasSrcAppDir: () => (/* binding */ hasSrcAppDir),\n/* harmony export */   suggestMiddlewareLocation: () => (/* binding */ suggestMiddlewareLocation)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js\");\n\n\nfunction hasSrcAppDir() {\n  const { existsSync } = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  const path = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodePathOrThrow)();\n  const cwd = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodeCwdOrThrow)();\n  const projectWithAppSrc = path.join(cwd(), \"src\", \"app\");\n  return !!existsSync(projectWithAppSrc);\n}\nfunction suggestMiddlewareLocation() {\n  const fileExtensions = [\"ts\", \"js\"];\n  const suggestionMessage = (extension, to, from) => `Clerk: clerkMiddleware() was not run, your middleware file might be misplaced. Move your middleware file to ./${to}middleware.${extension}. Currently located at ./${from}middleware.${extension}`;\n  const { existsSync } = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  const path = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodePathOrThrow)();\n  const cwd = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodeCwdOrThrow)();\n  const projectWithAppSrcPath = path.join(cwd(), \"src\", \"app\");\n  const projectWithAppPath = path.join(cwd(), \"app\");\n  const checkMiddlewareLocation = (basePath, to, from) => {\n    for (const fileExtension of fileExtensions) {\n      if (existsSync(path.join(basePath, `middleware.${fileExtension}`))) {\n        return suggestionMessage(fileExtension, to, from);\n      }\n    }\n    return void 0;\n  };\n  if (existsSync(projectWithAppSrcPath)) {\n    return checkMiddlewareLocation(projectWithAppSrcPath, \"src/\", \"src/app/\") || checkMiddlewareLocation(cwd(), \"src/\", \"\");\n  }\n  if (existsSync(projectWithAppPath)) {\n    return checkMiddlewareLocation(projectWithAppPath, \"\", \"app/\");\n  }\n  return void 0;\n}\n\n//# sourceMappingURL=middleware-location.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2ZzL21pZGRsZXdhcmUtbG9jYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ3dDO0FBQ3pFO0FBQ0EsVUFBVSxhQUFhLEVBQUUscURBQWE7QUFDdEMsZUFBZSx1REFBZTtBQUM5QixjQUFjLHNEQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzS0FBc0ssR0FBRyxhQUFhLFVBQVUsMkJBQTJCLEtBQUssYUFBYSxVQUFVO0FBQ3ZQLFVBQVUsYUFBYSxFQUFFLHFEQUFhO0FBQ3RDLGVBQWUsdURBQWU7QUFDOUIsY0FBYyxzREFBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3NpZGRoYW50Z3VwdGEvRG9jdW1lbnRzL3Byb2plY3RzL2ZvcmdldGFpL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL3NlcnZlci9mcy9taWRkbGV3YXJlLWxvY2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uLy4uL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5pbXBvcnQgeyBub2RlQ3dkT3JUaHJvdywgbm9kZUZzT3JUaHJvdywgbm9kZVBhdGhPclRocm93IH0gZnJvbSBcIi4vdXRpbHNcIjtcbmZ1bmN0aW9uIGhhc1NyY0FwcERpcigpIHtcbiAgY29uc3QgeyBleGlzdHNTeW5jIH0gPSBub2RlRnNPclRocm93KCk7XG4gIGNvbnN0IHBhdGggPSBub2RlUGF0aE9yVGhyb3coKTtcbiAgY29uc3QgY3dkID0gbm9kZUN3ZE9yVGhyb3coKTtcbiAgY29uc3QgcHJvamVjdFdpdGhBcHBTcmMgPSBwYXRoLmpvaW4oY3dkKCksIFwic3JjXCIsIFwiYXBwXCIpO1xuICByZXR1cm4gISFleGlzdHNTeW5jKHByb2plY3RXaXRoQXBwU3JjKTtcbn1cbmZ1bmN0aW9uIHN1Z2dlc3RNaWRkbGV3YXJlTG9jYXRpb24oKSB7XG4gIGNvbnN0IGZpbGVFeHRlbnNpb25zID0gW1widHNcIiwgXCJqc1wiXTtcbiAgY29uc3Qgc3VnZ2VzdGlvbk1lc3NhZ2UgPSAoZXh0ZW5zaW9uLCB0bywgZnJvbSkgPT4gYENsZXJrOiBjbGVya01pZGRsZXdhcmUoKSB3YXMgbm90IHJ1biwgeW91ciBtaWRkbGV3YXJlIGZpbGUgbWlnaHQgYmUgbWlzcGxhY2VkLiBNb3ZlIHlvdXIgbWlkZGxld2FyZSBmaWxlIHRvIC4vJHt0b31taWRkbGV3YXJlLiR7ZXh0ZW5zaW9ufS4gQ3VycmVudGx5IGxvY2F0ZWQgYXQgLi8ke2Zyb219bWlkZGxld2FyZS4ke2V4dGVuc2lvbn1gO1xuICBjb25zdCB7IGV4aXN0c1N5bmMgfSA9IG5vZGVGc09yVGhyb3coKTtcbiAgY29uc3QgcGF0aCA9IG5vZGVQYXRoT3JUaHJvdygpO1xuICBjb25zdCBjd2QgPSBub2RlQ3dkT3JUaHJvdygpO1xuICBjb25zdCBwcm9qZWN0V2l0aEFwcFNyY1BhdGggPSBwYXRoLmpvaW4oY3dkKCksIFwic3JjXCIsIFwiYXBwXCIpO1xuICBjb25zdCBwcm9qZWN0V2l0aEFwcFBhdGggPSBwYXRoLmpvaW4oY3dkKCksIFwiYXBwXCIpO1xuICBjb25zdCBjaGVja01pZGRsZXdhcmVMb2NhdGlvbiA9IChiYXNlUGF0aCwgdG8sIGZyb20pID0+IHtcbiAgICBmb3IgKGNvbnN0IGZpbGVFeHRlbnNpb24gb2YgZmlsZUV4dGVuc2lvbnMpIHtcbiAgICAgIGlmIChleGlzdHNTeW5jKHBhdGguam9pbihiYXNlUGF0aCwgYG1pZGRsZXdhcmUuJHtmaWxlRXh0ZW5zaW9ufWApKSkge1xuICAgICAgICByZXR1cm4gc3VnZ2VzdGlvbk1lc3NhZ2UoZmlsZUV4dGVuc2lvbiwgdG8sIGZyb20pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9O1xuICBpZiAoZXhpc3RzU3luYyhwcm9qZWN0V2l0aEFwcFNyY1BhdGgpKSB7XG4gICAgcmV0dXJuIGNoZWNrTWlkZGxld2FyZUxvY2F0aW9uKHByb2plY3RXaXRoQXBwU3JjUGF0aCwgXCJzcmMvXCIsIFwic3JjL2FwcC9cIikgfHwgY2hlY2tNaWRkbGV3YXJlTG9jYXRpb24oY3dkKCksIFwic3JjL1wiLCBcIlwiKTtcbiAgfVxuICBpZiAoZXhpc3RzU3luYyhwcm9qZWN0V2l0aEFwcFBhdGgpKSB7XG4gICAgcmV0dXJuIGNoZWNrTWlkZGxld2FyZUxvY2F0aW9uKHByb2plY3RXaXRoQXBwUGF0aCwgXCJcIiwgXCJhcHAvXCIpO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5leHBvcnQge1xuICBoYXNTcmNBcHBEaXIsXG4gIHN1Z2dlc3RNaWRkbGV3YXJlTG9jYXRpb25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWRkbGV3YXJlLWxvY2F0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/middleware-location.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nodeCwdOrThrow: () => (/* binding */ nodeCwdOrThrow),\n/* harmony export */   nodeFsOrThrow: () => (/* binding */ nodeFsOrThrow),\n/* harmony export */   nodePathOrThrow: () => (/* binding */ nodePathOrThrow)\n/* harmony export */ });\n/* harmony import */ var _safe_node_apis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! #safe-node-apis */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/runtime/browser/safe-node-apis.js\");\n\n\nconst throwMissingFsModule = (module) => {\n  throw new Error(`Clerk: ${module} is missing. This is an internal error. Please contact Clerk's support.`);\n};\nconst nodeFsOrThrow = () => {\n  if (!_safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fs) {\n    throwMissingFsModule(\"fs\");\n  }\n  return _safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fs;\n};\nconst nodePathOrThrow = () => {\n  if (!_safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].path) {\n    throwMissingFsModule(\"path\");\n  }\n  return _safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].path;\n};\nconst nodeCwdOrThrow = () => {\n  if (!_safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cwd) {\n    throwMissingFsModule(\"cwd\");\n  }\n  return _safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cwd;\n};\n\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2ZzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUM7QUFDUztBQUMxQztBQUNBLDRCQUE0QixRQUFRO0FBQ3BDO0FBQ0E7QUFDQSxPQUFPLHVEQUFXO0FBQ2xCO0FBQ0E7QUFDQSxTQUFTLHVEQUFXO0FBQ3BCO0FBQ0E7QUFDQSxPQUFPLHVEQUFXO0FBQ2xCO0FBQ0E7QUFDQSxTQUFTLHVEQUFXO0FBQ3BCO0FBQ0E7QUFDQSxPQUFPLHVEQUFXO0FBQ2xCO0FBQ0E7QUFDQSxTQUFTLHVEQUFXO0FBQ3BCO0FBS0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3NpZGRoYW50Z3VwdGEvRG9jdW1lbnRzL3Byb2plY3RzL2ZvcmdldGFpL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL3NlcnZlci9mcy91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi8uLi9jaHVuay1CVVNZQTJCNC5qc1wiO1xuaW1wb3J0IG5vZGVSdW50aW1lIGZyb20gXCIjc2FmZS1ub2RlLWFwaXNcIjtcbmNvbnN0IHRocm93TWlzc2luZ0ZzTW9kdWxlID0gKG1vZHVsZSkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoYENsZXJrOiAke21vZHVsZX0gaXMgbWlzc2luZy4gVGhpcyBpcyBhbiBpbnRlcm5hbCBlcnJvci4gUGxlYXNlIGNvbnRhY3QgQ2xlcmsncyBzdXBwb3J0LmApO1xufTtcbmNvbnN0IG5vZGVGc09yVGhyb3cgPSAoKSA9PiB7XG4gIGlmICghbm9kZVJ1bnRpbWUuZnMpIHtcbiAgICB0aHJvd01pc3NpbmdGc01vZHVsZShcImZzXCIpO1xuICB9XG4gIHJldHVybiBub2RlUnVudGltZS5mcztcbn07XG5jb25zdCBub2RlUGF0aE9yVGhyb3cgPSAoKSA9PiB7XG4gIGlmICghbm9kZVJ1bnRpbWUucGF0aCkge1xuICAgIHRocm93TWlzc2luZ0ZzTW9kdWxlKFwicGF0aFwiKTtcbiAgfVxuICByZXR1cm4gbm9kZVJ1bnRpbWUucGF0aDtcbn07XG5jb25zdCBub2RlQ3dkT3JUaHJvdyA9ICgpID0+IHtcbiAgaWYgKCFub2RlUnVudGltZS5jd2QpIHtcbiAgICB0aHJvd01pc3NpbmdGc01vZHVsZShcImN3ZFwiKTtcbiAgfVxuICByZXR1cm4gbm9kZVJ1bnRpbWUuY3dkO1xufTtcbmV4cG9ydCB7XG4gIG5vZGVDd2RPclRocm93LFxuICBub2RlRnNPclRocm93LFxuICBub2RlUGF0aE9yVGhyb3dcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-log-cache.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/keyless-log-cache.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clerkDevelopmentCache: () => (/* binding */ clerkDevelopmentCache),\n/* harmony export */   createConfirmationMessage: () => (/* binding */ createConfirmationMessage),\n/* harmony export */   createKeylessModeMessage: () => (/* binding */ createKeylessModeMessage)\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/utils */ \"(middleware)/./node_modules/@clerk/shared/dist/utils/index.mjs\");\n\n\nconst THROTTLE_DURATION_MS = 10 * 60 * 1e3;\nfunction createClerkDevCache() {\n  if (!(0,_clerk_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isDevelopmentEnvironment)()) {\n    return;\n  }\n  if (!__webpack_require__.g.__clerk_internal_keyless_logger) {\n    __webpack_require__.g.__clerk_internal_keyless_logger = {\n      __cache: /* @__PURE__ */ new Map(),\n      log: function({ cacheKey, msg }) {\n        var _a;\n        if (this.__cache.has(cacheKey) && Date.now() < (((_a = this.__cache.get(cacheKey)) == null ? void 0 : _a.expiresAt) || 0)) {\n          return;\n        }\n        console.log(msg);\n        this.__cache.set(cacheKey, {\n          expiresAt: Date.now() + THROTTLE_DURATION_MS\n        });\n      },\n      run: async function(callback, { cacheKey, onSuccessStale = THROTTLE_DURATION_MS, onErrorStale = THROTTLE_DURATION_MS }) {\n        var _a, _b;\n        if (this.__cache.has(cacheKey) && Date.now() < (((_a = this.__cache.get(cacheKey)) == null ? void 0 : _a.expiresAt) || 0)) {\n          return (_b = this.__cache.get(cacheKey)) == null ? void 0 : _b.data;\n        }\n        try {\n          const result = await callback();\n          this.__cache.set(cacheKey, {\n            expiresAt: Date.now() + onSuccessStale,\n            data: result\n          });\n          return result;\n        } catch (e) {\n          this.__cache.set(cacheKey, {\n            expiresAt: Date.now() + onErrorStale\n          });\n          throw e;\n        }\n      }\n    };\n  }\n  return globalThis.__clerk_internal_keyless_logger;\n}\nconst createKeylessModeMessage = (keys) => {\n  return `\n\\x1B[35m\n[Clerk]:\\x1B[0m You are running in keyless mode.\nYou can \\x1B[35mclaim your keys\\x1B[0m by visiting ${keys.claimUrl}\n`;\n};\nconst createConfirmationMessage = () => {\n  return `\n\\x1B[35m\n[Clerk]:\\x1B[0m Your application is running with your claimed keys.\nYou can safely remove the \\x1B[35m.clerk/\\x1B[0m from your project.\n`;\n};\nconst clerkDevelopmentCache = createClerkDevCache();\n\n//# sourceMappingURL=keyless-log-cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2tleWxlc3MtbG9nLWNhY2hlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEI7QUFDaUM7QUFDL0Q7QUFDQTtBQUNBLE9BQU8sNkVBQXdCO0FBQy9CO0FBQ0E7QUFDQSxPQUFPLHFCQUFNO0FBQ2IsSUFBSSxxQkFBTTtBQUNWO0FBQ0Esc0JBQXNCLGVBQWU7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLHNDQUFzQyxzRkFBc0Y7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaWRkaGFudGd1cHRhL0RvY3VtZW50cy9wcm9qZWN0cy9mb3JnZXRhaS9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9zZXJ2ZXIva2V5bGVzcy1sb2ctY2FjaGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstQlVTWUEyQjQuanNcIjtcbmltcG9ydCB7IGlzRGV2ZWxvcG1lbnRFbnZpcm9ubWVudCB9IGZyb20gXCJAY2xlcmsvc2hhcmVkL3V0aWxzXCI7XG5jb25zdCBUSFJPVFRMRV9EVVJBVElPTl9NUyA9IDEwICogNjAgKiAxZTM7XG5mdW5jdGlvbiBjcmVhdGVDbGVya0RldkNhY2hlKCkge1xuICBpZiAoIWlzRGV2ZWxvcG1lbnRFbnZpcm9ubWVudCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZ2xvYmFsLl9fY2xlcmtfaW50ZXJuYWxfa2V5bGVzc19sb2dnZXIpIHtcbiAgICBnbG9iYWwuX19jbGVya19pbnRlcm5hbF9rZXlsZXNzX2xvZ2dlciA9IHtcbiAgICAgIF9fY2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksXG4gICAgICBsb2c6IGZ1bmN0aW9uKHsgY2FjaGVLZXksIG1zZyB9KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMuX19jYWNoZS5oYXMoY2FjaGVLZXkpICYmIERhdGUubm93KCkgPCAoKChfYSA9IHRoaXMuX19jYWNoZS5nZXQoY2FjaGVLZXkpKSA9PSBudWxsID8gdm9pZCAwIDogX2EuZXhwaXJlc0F0KSB8fCAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICB0aGlzLl9fY2FjaGUuc2V0KGNhY2hlS2V5LCB7XG4gICAgICAgICAgZXhwaXJlc0F0OiBEYXRlLm5vdygpICsgVEhST1RUTEVfRFVSQVRJT05fTVNcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgcnVuOiBhc3luYyBmdW5jdGlvbihjYWxsYmFjaywgeyBjYWNoZUtleSwgb25TdWNjZXNzU3RhbGUgPSBUSFJPVFRMRV9EVVJBVElPTl9NUywgb25FcnJvclN0YWxlID0gVEhST1RUTEVfRFVSQVRJT05fTVMgfSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodGhpcy5fX2NhY2hlLmhhcyhjYWNoZUtleSkgJiYgRGF0ZS5ub3coKSA8ICgoKF9hID0gdGhpcy5fX2NhY2hlLmdldChjYWNoZUtleSkpID09IG51bGwgPyB2b2lkIDAgOiBfYS5leHBpcmVzQXQpIHx8IDApKSB7XG4gICAgICAgICAgcmV0dXJuIChfYiA9IHRoaXMuX19jYWNoZS5nZXQoY2FjaGVLZXkpKSA9PSBudWxsID8gdm9pZCAwIDogX2IuZGF0YTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGxiYWNrKCk7XG4gICAgICAgICAgdGhpcy5fX2NhY2hlLnNldChjYWNoZUtleSwge1xuICAgICAgICAgICAgZXhwaXJlc0F0OiBEYXRlLm5vdygpICsgb25TdWNjZXNzU3RhbGUsXG4gICAgICAgICAgICBkYXRhOiByZXN1bHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhpcy5fX2NhY2hlLnNldChjYWNoZUtleSwge1xuICAgICAgICAgICAgZXhwaXJlc0F0OiBEYXRlLm5vdygpICsgb25FcnJvclN0YWxlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGdsb2JhbFRoaXMuX19jbGVya19pbnRlcm5hbF9rZXlsZXNzX2xvZ2dlcjtcbn1cbmNvbnN0IGNyZWF0ZUtleWxlc3NNb2RlTWVzc2FnZSA9IChrZXlzKSA9PiB7XG4gIHJldHVybiBgXG5cXHgxQlszNW1cbltDbGVya106XFx4MUJbMG0gWW91IGFyZSBydW5uaW5nIGluIGtleWxlc3MgbW9kZS5cbllvdSBjYW4gXFx4MUJbMzVtY2xhaW0geW91ciBrZXlzXFx4MUJbMG0gYnkgdmlzaXRpbmcgJHtrZXlzLmNsYWltVXJsfVxuYDtcbn07XG5jb25zdCBjcmVhdGVDb25maXJtYXRpb25NZXNzYWdlID0gKCkgPT4ge1xuICByZXR1cm4gYFxuXFx4MUJbMzVtXG5bQ2xlcmtdOlxceDFCWzBtIFlvdXIgYXBwbGljYXRpb24gaXMgcnVubmluZyB3aXRoIHlvdXIgY2xhaW1lZCBrZXlzLlxuWW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoZSBcXHgxQlszNW0uY2xlcmsvXFx4MUJbMG0gZnJvbSB5b3VyIHByb2plY3QuXG5gO1xufTtcbmNvbnN0IGNsZXJrRGV2ZWxvcG1lbnRDYWNoZSA9IGNyZWF0ZUNsZXJrRGV2Q2FjaGUoKTtcbmV4cG9ydCB7XG4gIGNsZXJrRGV2ZWxvcG1lbnRDYWNoZSxcbiAgY3JlYXRlQ29uZmlybWF0aW9uTWVzc2FnZSxcbiAgY3JlYXRlS2V5bGVzc01vZGVNZXNzYWdlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5bGVzcy1sb2ctY2FjaGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-log-cache.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js":
/*!********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOrReadKeyless: () => (/* binding */ createOrReadKeyless),\n/* harmony export */   removeKeyless: () => (/* binding */ removeKeyless),\n/* harmony export */   safeParseClerkFile: () => (/* binding */ safeParseClerkFile)\n/* harmony export */ });\n/* harmony import */ var _createClerkClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createClerkClient */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createClerkClient.js\");\n/* harmony import */ var _fs_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fs/utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js\");\n\n\n\nconst CLERK_HIDDEN = \".clerk\";\nconst CLERK_LOCK = \"clerk.lock\";\nfunction updateGitignore() {\n  const { existsSync, writeFileSync, readFileSync, appendFileSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  const path = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodePathOrThrow)();\n  const cwd = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeCwdOrThrow)();\n  const gitignorePath = path.join(cwd(), \".gitignore\");\n  if (!existsSync(gitignorePath)) {\n    writeFileSync(gitignorePath, \"\");\n  }\n  const gitignoreContent = readFileSync(gitignorePath, \"utf-8\");\n  const COMMENT = `# clerk configuration (can include secrets)`;\n  if (!gitignoreContent.includes(CLERK_HIDDEN + \"/\")) {\n    appendFileSync(gitignorePath, `\n${COMMENT}\n/${CLERK_HIDDEN}/\n`);\n  }\n}\nconst generatePath = (...slugs) => {\n  const path = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodePathOrThrow)();\n  const cwd = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeCwdOrThrow)();\n  return path.join(cwd(), CLERK_HIDDEN, ...slugs);\n};\nconst _TEMP_DIR_NAME = \".tmp\";\nconst getKeylessConfigurationPath = () => generatePath(_TEMP_DIR_NAME, \"keyless.json\");\nconst getKeylessReadMePath = () => generatePath(_TEMP_DIR_NAME, \"README.md\");\nlet isCreatingFile = false;\nfunction safeParseClerkFile() {\n  const { readFileSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  try {\n    const CONFIG_PATH = getKeylessConfigurationPath();\n    let fileAsString;\n    try {\n      fileAsString = readFileSync(CONFIG_PATH, { encoding: \"utf-8\" }) || \"{}\";\n    } catch {\n      fileAsString = \"{}\";\n    }\n    return JSON.parse(fileAsString);\n  } catch {\n    return void 0;\n  }\n}\nconst lockFileWriting = () => {\n  const { writeFileSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  isCreatingFile = true;\n  writeFileSync(\n    CLERK_LOCK,\n    // In the rare case, the file persists give the developer enough context.\n    \"This file can be deleted. Please delete this file and refresh your application\",\n    {\n      encoding: \"utf8\",\n      mode: \"0777\",\n      flag: \"w\"\n    }\n  );\n};\nconst unlockFileWriting = () => {\n  const { rmSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  try {\n    rmSync(CLERK_LOCK, { force: true, recursive: true });\n  } catch {\n  }\n  isCreatingFile = false;\n};\nconst isFileWritingLocked = () => {\n  const { existsSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  return isCreatingFile || existsSync(CLERK_LOCK);\n};\nasync function createOrReadKeyless() {\n  const { writeFileSync, mkdirSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  if (isFileWritingLocked()) {\n    return null;\n  }\n  lockFileWriting();\n  const CONFIG_PATH = getKeylessConfigurationPath();\n  const README_PATH = getKeylessReadMePath();\n  mkdirSync(generatePath(_TEMP_DIR_NAME), { recursive: true });\n  updateGitignore();\n  const envVarsMap = safeParseClerkFile();\n  if ((envVarsMap == null ? void 0 : envVarsMap.publishableKey) && (envVarsMap == null ? void 0 : envVarsMap.secretKey)) {\n    unlockFileWriting();\n    return envVarsMap;\n  }\n  const client = (0,_createClerkClient__WEBPACK_IMPORTED_MODULE_1__.createClerkClientWithOptions)({});\n  const accountlessApplication = await client.__experimental_accountlessApplications.createAccountlessApplication().catch(() => null);\n  if (accountlessApplication) {\n    writeFileSync(CONFIG_PATH, JSON.stringify(accountlessApplication), {\n      encoding: \"utf8\",\n      mode: \"0777\",\n      flag: \"w\"\n    });\n    const README_NOTIFICATION = `\n## DO NOT COMMIT\nThis directory is auto-generated from \\`@clerk/nextjs\\` because you are running in Keyless mode. Avoid committing the \\`.clerk/\\` directory as it includes the secret key of the unclaimed instance.\n  `;\n    writeFileSync(README_PATH, README_NOTIFICATION, {\n      encoding: \"utf8\",\n      mode: \"0777\",\n      flag: \"w\"\n    });\n  }\n  unlockFileWriting();\n  return accountlessApplication;\n}\nfunction removeKeyless() {\n  const { rmSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  if (isFileWritingLocked()) {\n    return void 0;\n  }\n  lockFileWriting();\n  try {\n    rmSync(generatePath(), { force: true, recursive: true });\n  } catch {\n  }\n  unlockFileWriting();\n}\n\n//# sourceMappingURL=keyless-node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2tleWxlc3Mtbm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE4QjtBQUNxQztBQUNTO0FBQzVFO0FBQ0E7QUFDQTtBQUNBLFVBQVUsMERBQTBELEVBQUUsd0RBQWE7QUFDbkYsZUFBZSwwREFBZTtBQUM5QixjQUFjLHlEQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0YsR0FBRyxhQUFhO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwREFBZTtBQUM5QixjQUFjLHlEQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxlQUFlLEVBQUUsd0RBQWE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsbUJBQW1CLFFBQVE7QUFDNUUsTUFBTTtBQUNOLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxnQkFBZ0IsRUFBRSx3REFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsU0FBUyxFQUFFLHdEQUFhO0FBQ2xDO0FBQ0EseUJBQXlCLDhCQUE4QjtBQUN2RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGFBQWEsRUFBRSx3REFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxVQUFVLDJCQUEyQixFQUFFLHdEQUFhO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxpQkFBaUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdGQUE0QixHQUFHO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFNBQVMsRUFBRSx3REFBYTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDhCQUE4QjtBQUMzRCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBS0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3NpZGRoYW50Z3VwdGEvRG9jdW1lbnRzL3Byb2plY3RzL2ZvcmdldGFpL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL3NlcnZlci9rZXlsZXNzLW5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstQlVTWUEyQjQuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUNsZXJrQ2xpZW50V2l0aE9wdGlvbnMgfSBmcm9tIFwiLi9jcmVhdGVDbGVya0NsaWVudFwiO1xuaW1wb3J0IHsgbm9kZUN3ZE9yVGhyb3csIG5vZGVGc09yVGhyb3csIG5vZGVQYXRoT3JUaHJvdyB9IGZyb20gXCIuL2ZzL3V0aWxzXCI7XG5jb25zdCBDTEVSS19ISURERU4gPSBcIi5jbGVya1wiO1xuY29uc3QgQ0xFUktfTE9DSyA9IFwiY2xlcmsubG9ja1wiO1xuZnVuY3Rpb24gdXBkYXRlR2l0aWdub3JlKCkge1xuICBjb25zdCB7IGV4aXN0c1N5bmMsIHdyaXRlRmlsZVN5bmMsIHJlYWRGaWxlU3luYywgYXBwZW5kRmlsZVN5bmMgfSA9IG5vZGVGc09yVGhyb3coKTtcbiAgY29uc3QgcGF0aCA9IG5vZGVQYXRoT3JUaHJvdygpO1xuICBjb25zdCBjd2QgPSBub2RlQ3dkT3JUaHJvdygpO1xuICBjb25zdCBnaXRpZ25vcmVQYXRoID0gcGF0aC5qb2luKGN3ZCgpLCBcIi5naXRpZ25vcmVcIik7XG4gIGlmICghZXhpc3RzU3luYyhnaXRpZ25vcmVQYXRoKSkge1xuICAgIHdyaXRlRmlsZVN5bmMoZ2l0aWdub3JlUGF0aCwgXCJcIik7XG4gIH1cbiAgY29uc3QgZ2l0aWdub3JlQ29udGVudCA9IHJlYWRGaWxlU3luYyhnaXRpZ25vcmVQYXRoLCBcInV0Zi04XCIpO1xuICBjb25zdCBDT01NRU5UID0gYCMgY2xlcmsgY29uZmlndXJhdGlvbiAoY2FuIGluY2x1ZGUgc2VjcmV0cylgO1xuICBpZiAoIWdpdGlnbm9yZUNvbnRlbnQuaW5jbHVkZXMoQ0xFUktfSElEREVOICsgXCIvXCIpKSB7XG4gICAgYXBwZW5kRmlsZVN5bmMoZ2l0aWdub3JlUGF0aCwgYFxuJHtDT01NRU5UfVxuLyR7Q0xFUktfSElEREVOfS9cbmApO1xuICB9XG59XG5jb25zdCBnZW5lcmF0ZVBhdGggPSAoLi4uc2x1Z3MpID0+IHtcbiAgY29uc3QgcGF0aCA9IG5vZGVQYXRoT3JUaHJvdygpO1xuICBjb25zdCBjd2QgPSBub2RlQ3dkT3JUaHJvdygpO1xuICByZXR1cm4gcGF0aC5qb2luKGN3ZCgpLCBDTEVSS19ISURERU4sIC4uLnNsdWdzKTtcbn07XG5jb25zdCBfVEVNUF9ESVJfTkFNRSA9IFwiLnRtcFwiO1xuY29uc3QgZ2V0S2V5bGVzc0NvbmZpZ3VyYXRpb25QYXRoID0gKCkgPT4gZ2VuZXJhdGVQYXRoKF9URU1QX0RJUl9OQU1FLCBcImtleWxlc3MuanNvblwiKTtcbmNvbnN0IGdldEtleWxlc3NSZWFkTWVQYXRoID0gKCkgPT4gZ2VuZXJhdGVQYXRoKF9URU1QX0RJUl9OQU1FLCBcIlJFQURNRS5tZFwiKTtcbmxldCBpc0NyZWF0aW5nRmlsZSA9IGZhbHNlO1xuZnVuY3Rpb24gc2FmZVBhcnNlQ2xlcmtGaWxlKCkge1xuICBjb25zdCB7IHJlYWRGaWxlU3luYyB9ID0gbm9kZUZzT3JUaHJvdygpO1xuICB0cnkge1xuICAgIGNvbnN0IENPTkZJR19QQVRIID0gZ2V0S2V5bGVzc0NvbmZpZ3VyYXRpb25QYXRoKCk7XG4gICAgbGV0IGZpbGVBc1N0cmluZztcbiAgICB0cnkge1xuICAgICAgZmlsZUFzU3RyaW5nID0gcmVhZEZpbGVTeW5jKENPTkZJR19QQVRILCB7IGVuY29kaW5nOiBcInV0Zi04XCIgfSkgfHwgXCJ7fVwiO1xuICAgIH0gY2F0Y2gge1xuICAgICAgZmlsZUFzU3RyaW5nID0gXCJ7fVwiO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5wYXJzZShmaWxlQXNTdHJpbmcpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG59XG5jb25zdCBsb2NrRmlsZVdyaXRpbmcgPSAoKSA9PiB7XG4gIGNvbnN0IHsgd3JpdGVGaWxlU3luYyB9ID0gbm9kZUZzT3JUaHJvdygpO1xuICBpc0NyZWF0aW5nRmlsZSA9IHRydWU7XG4gIHdyaXRlRmlsZVN5bmMoXG4gICAgQ0xFUktfTE9DSyxcbiAgICAvLyBJbiB0aGUgcmFyZSBjYXNlLCB0aGUgZmlsZSBwZXJzaXN0cyBnaXZlIHRoZSBkZXZlbG9wZXIgZW5vdWdoIGNvbnRleHQuXG4gICAgXCJUaGlzIGZpbGUgY2FuIGJlIGRlbGV0ZWQuIFBsZWFzZSBkZWxldGUgdGhpcyBmaWxlIGFuZCByZWZyZXNoIHlvdXIgYXBwbGljYXRpb25cIixcbiAgICB7XG4gICAgICBlbmNvZGluZzogXCJ1dGY4XCIsXG4gICAgICBtb2RlOiBcIjA3NzdcIixcbiAgICAgIGZsYWc6IFwid1wiXG4gICAgfVxuICApO1xufTtcbmNvbnN0IHVubG9ja0ZpbGVXcml0aW5nID0gKCkgPT4ge1xuICBjb25zdCB7IHJtU3luYyB9ID0gbm9kZUZzT3JUaHJvdygpO1xuICB0cnkge1xuICAgIHJtU3luYyhDTEVSS19MT0NLLCB7IGZvcmNlOiB0cnVlLCByZWN1cnNpdmU6IHRydWUgfSk7XG4gIH0gY2F0Y2gge1xuICB9XG4gIGlzQ3JlYXRpbmdGaWxlID0gZmFsc2U7XG59O1xuY29uc3QgaXNGaWxlV3JpdGluZ0xvY2tlZCA9ICgpID0+IHtcbiAgY29uc3QgeyBleGlzdHNTeW5jIH0gPSBub2RlRnNPclRocm93KCk7XG4gIHJldHVybiBpc0NyZWF0aW5nRmlsZSB8fCBleGlzdHNTeW5jKENMRVJLX0xPQ0spO1xufTtcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZU9yUmVhZEtleWxlc3MoKSB7XG4gIGNvbnN0IHsgd3JpdGVGaWxlU3luYywgbWtkaXJTeW5jIH0gPSBub2RlRnNPclRocm93KCk7XG4gIGlmIChpc0ZpbGVXcml0aW5nTG9ja2VkKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBsb2NrRmlsZVdyaXRpbmcoKTtcbiAgY29uc3QgQ09ORklHX1BBVEggPSBnZXRLZXlsZXNzQ29uZmlndXJhdGlvblBhdGgoKTtcbiAgY29uc3QgUkVBRE1FX1BBVEggPSBnZXRLZXlsZXNzUmVhZE1lUGF0aCgpO1xuICBta2RpclN5bmMoZ2VuZXJhdGVQYXRoKF9URU1QX0RJUl9OQU1FKSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gIHVwZGF0ZUdpdGlnbm9yZSgpO1xuICBjb25zdCBlbnZWYXJzTWFwID0gc2FmZVBhcnNlQ2xlcmtGaWxlKCk7XG4gIGlmICgoZW52VmFyc01hcCA9PSBudWxsID8gdm9pZCAwIDogZW52VmFyc01hcC5wdWJsaXNoYWJsZUtleSkgJiYgKGVudlZhcnNNYXAgPT0gbnVsbCA/IHZvaWQgMCA6IGVudlZhcnNNYXAuc2VjcmV0S2V5KSkge1xuICAgIHVubG9ja0ZpbGVXcml0aW5nKCk7XG4gICAgcmV0dXJuIGVudlZhcnNNYXA7XG4gIH1cbiAgY29uc3QgY2xpZW50ID0gY3JlYXRlQ2xlcmtDbGllbnRXaXRoT3B0aW9ucyh7fSk7XG4gIGNvbnN0IGFjY291bnRsZXNzQXBwbGljYXRpb24gPSBhd2FpdCBjbGllbnQuX19leHBlcmltZW50YWxfYWNjb3VudGxlc3NBcHBsaWNhdGlvbnMuY3JlYXRlQWNjb3VudGxlc3NBcHBsaWNhdGlvbigpLmNhdGNoKCgpID0+IG51bGwpO1xuICBpZiAoYWNjb3VudGxlc3NBcHBsaWNhdGlvbikge1xuICAgIHdyaXRlRmlsZVN5bmMoQ09ORklHX1BBVEgsIEpTT04uc3RyaW5naWZ5KGFjY291bnRsZXNzQXBwbGljYXRpb24pLCB7XG4gICAgICBlbmNvZGluZzogXCJ1dGY4XCIsXG4gICAgICBtb2RlOiBcIjA3NzdcIixcbiAgICAgIGZsYWc6IFwid1wiXG4gICAgfSk7XG4gICAgY29uc3QgUkVBRE1FX05PVElGSUNBVElPTiA9IGBcbiMjIERPIE5PVCBDT01NSVRcblRoaXMgZGlyZWN0b3J5IGlzIGF1dG8tZ2VuZXJhdGVkIGZyb20gXFxgQGNsZXJrL25leHRqc1xcYCBiZWNhdXNlIHlvdSBhcmUgcnVubmluZyBpbiBLZXlsZXNzIG1vZGUuIEF2b2lkIGNvbW1pdHRpbmcgdGhlIFxcYC5jbGVyay9cXGAgZGlyZWN0b3J5IGFzIGl0IGluY2x1ZGVzIHRoZSBzZWNyZXQga2V5IG9mIHRoZSB1bmNsYWltZWQgaW5zdGFuY2UuXG4gIGA7XG4gICAgd3JpdGVGaWxlU3luYyhSRUFETUVfUEFUSCwgUkVBRE1FX05PVElGSUNBVElPTiwge1xuICAgICAgZW5jb2Rpbmc6IFwidXRmOFwiLFxuICAgICAgbW9kZTogXCIwNzc3XCIsXG4gICAgICBmbGFnOiBcIndcIlxuICAgIH0pO1xuICB9XG4gIHVubG9ja0ZpbGVXcml0aW5nKCk7XG4gIHJldHVybiBhY2NvdW50bGVzc0FwcGxpY2F0aW9uO1xufVxuZnVuY3Rpb24gcmVtb3ZlS2V5bGVzcygpIHtcbiAgY29uc3QgeyBybVN5bmMgfSA9IG5vZGVGc09yVGhyb3coKTtcbiAgaWYgKGlzRmlsZVdyaXRpbmdMb2NrZWQoKSkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgbG9ja0ZpbGVXcml0aW5nKCk7XG4gIHRyeSB7XG4gICAgcm1TeW5jKGdlbmVyYXRlUGF0aCgpLCB7IGZvcmNlOiB0cnVlLCByZWN1cnNpdmU6IHRydWUgfSk7XG4gIH0gY2F0Y2gge1xuICB9XG4gIHVubG9ja0ZpbGVXcml0aW5nKCk7XG59XG5leHBvcnQge1xuICBjcmVhdGVPclJlYWRLZXlsZXNzLFxuICByZW1vdmVLZXlsZXNzLFxuICBzYWZlUGFyc2VDbGVya0ZpbGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXlsZXNzLW5vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeNextClerkPropsWithEnv: () => (/* binding */ mergeNextClerkPropsWithEnv)\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/underscore */ \"(middleware)/./node_modules/@clerk/shared/dist/underscore.mjs\");\n/* harmony import */ var _server_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server/constants */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/constants.js\");\n\n\n\nconst mergeNextClerkPropsWithEnv = (props) => {\n  var _a;\n  return {\n    ...props,\n    publishableKey: props.publishableKey || \"pk_test_aW5zcGlyZWQtY29yYWwtMjIuY2xlcmsuYWNjb3VudHMuZGV2JA\" || 0,\n    clerkJSUrl: props.clerkJSUrl || process.env.NEXT_PUBLIC_CLERK_JS_URL,\n    clerkJSVersion: props.clerkJSVersion || process.env.NEXT_PUBLIC_CLERK_JS_VERSION,\n    proxyUrl: props.proxyUrl || process.env.NEXT_PUBLIC_CLERK_PROXY_URL || \"\",\n    domain: props.domain || process.env.NEXT_PUBLIC_CLERK_DOMAIN || \"\",\n    isSatellite: props.isSatellite || (0,_clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_0__.isTruthy)(process.env.NEXT_PUBLIC_CLERK_IS_SATELLITE),\n    signInUrl: props.signInUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL || \"\",\n    signUpUrl: props.signUpUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL || \"\",\n    signInForceRedirectUrl: props.signInForceRedirectUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_IN_FORCE_REDIRECT_URL || \"\",\n    signUpForceRedirectUrl: props.signUpForceRedirectUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_UP_FORCE_REDIRECT_URL || \"\",\n    signInFallbackRedirectUrl: props.signInFallbackRedirectUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL || \"\",\n    signUpFallbackRedirectUrl: props.signUpFallbackRedirectUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL || \"\",\n    afterSignInUrl: props.afterSignInUrl || process.env.NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL || \"\",\n    afterSignUpUrl: props.afterSignUpUrl || process.env.NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL || \"\",\n    telemetry: (_a = props.telemetry) != null ? _a : {\n      disabled: (0,_clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_0__.isTruthy)(process.env.NEXT_PUBLIC_CLERK_TELEMETRY_DISABLED),\n      debug: (0,_clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_0__.isTruthy)(process.env.NEXT_PUBLIC_CLERK_TELEMETRY_DEBUG)\n    },\n    sdkMetadata: _server_constants__WEBPACK_IMPORTED_MODULE_1__.SDK_METADATA\n  };\n};\n\n//# sourceMappingURL=mergeNextClerkPropsWithEnv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vdXRpbHMvbWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThCO0FBQ3NCO0FBQ0Q7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsNERBQTZDLElBQUksQ0FBRTtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxrRUFBUTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0VBQVE7QUFDeEIsYUFBYSxrRUFBUTtBQUNyQixLQUFLO0FBQ0wsaUJBQWlCLDJEQUFZO0FBQzdCO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvc2lkZGhhbnRndXB0YS9Eb2N1bWVudHMvcHJvamVjdHMvZm9yZ2V0YWkvbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vdXRpbHMvbWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstQlVTWUEyQjQuanNcIjtcbmltcG9ydCB7IGlzVHJ1dGh5IH0gZnJvbSBcIkBjbGVyay9zaGFyZWQvdW5kZXJzY29yZVwiO1xuaW1wb3J0IHsgU0RLX01FVEFEQVRBIH0gZnJvbSBcIi4uL3NlcnZlci9jb25zdGFudHNcIjtcbmNvbnN0IG1lcmdlTmV4dENsZXJrUHJvcHNXaXRoRW52ID0gKHByb3BzKSA9PiB7XG4gIHZhciBfYTtcbiAgcmV0dXJuIHtcbiAgICAuLi5wcm9wcyxcbiAgICBwdWJsaXNoYWJsZUtleTogcHJvcHMucHVibGlzaGFibGVLZXkgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfUFVCTElTSEFCTEVfS0VZIHx8IFwiXCIsXG4gICAgY2xlcmtKU1VybDogcHJvcHMuY2xlcmtKU1VybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19KU19VUkwsXG4gICAgY2xlcmtKU1ZlcnNpb246IHByb3BzLmNsZXJrSlNWZXJzaW9uIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX0pTX1ZFUlNJT04sXG4gICAgcHJveHlVcmw6IHByb3BzLnByb3h5VXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1BST1hZX1VSTCB8fCBcIlwiLFxuICAgIGRvbWFpbjogcHJvcHMuZG9tYWluIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX0RPTUFJTiB8fCBcIlwiLFxuICAgIGlzU2F0ZWxsaXRlOiBwcm9wcy5pc1NhdGVsbGl0ZSB8fCBpc1RydXRoeShwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19JU19TQVRFTExJVEUpLFxuICAgIHNpZ25JblVybDogcHJvcHMuc2lnbkluVXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1NJR05fSU5fVVJMIHx8IFwiXCIsXG4gICAgc2lnblVwVXJsOiBwcm9wcy5zaWduVXBVcmwgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfU0lHTl9VUF9VUkwgfHwgXCJcIixcbiAgICBzaWduSW5Gb3JjZVJlZGlyZWN0VXJsOiBwcm9wcy5zaWduSW5Gb3JjZVJlZGlyZWN0VXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1NJR05fSU5fRk9SQ0VfUkVESVJFQ1RfVVJMIHx8IFwiXCIsXG4gICAgc2lnblVwRm9yY2VSZWRpcmVjdFVybDogcHJvcHMuc2lnblVwRm9yY2VSZWRpcmVjdFVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19TSUdOX1VQX0ZPUkNFX1JFRElSRUNUX1VSTCB8fCBcIlwiLFxuICAgIHNpZ25JbkZhbGxiYWNrUmVkaXJlY3RVcmw6IHByb3BzLnNpZ25JbkZhbGxiYWNrUmVkaXJlY3RVcmwgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfU0lHTl9JTl9GQUxMQkFDS19SRURJUkVDVF9VUkwgfHwgXCJcIixcbiAgICBzaWduVXBGYWxsYmFja1JlZGlyZWN0VXJsOiBwcm9wcy5zaWduVXBGYWxsYmFja1JlZGlyZWN0VXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1NJR05fVVBfRkFMTEJBQ0tfUkVESVJFQ1RfVVJMIHx8IFwiXCIsXG4gICAgYWZ0ZXJTaWduSW5Vcmw6IHByb3BzLmFmdGVyU2lnbkluVXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX0FGVEVSX1NJR05fSU5fVVJMIHx8IFwiXCIsXG4gICAgYWZ0ZXJTaWduVXBVcmw6IHByb3BzLmFmdGVyU2lnblVwVXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX0FGVEVSX1NJR05fVVBfVVJMIHx8IFwiXCIsXG4gICAgdGVsZW1ldHJ5OiAoX2EgPSBwcm9wcy50ZWxlbWV0cnkpICE9IG51bGwgPyBfYSA6IHtcbiAgICAgIGRpc2FibGVkOiBpc1RydXRoeShwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19URUxFTUVUUllfRElTQUJMRUQpLFxuICAgICAgZGVidWc6IGlzVHJ1dGh5KHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1RFTEVNRVRSWV9ERUJVRylcbiAgICB9LFxuICAgIHNka01ldGFkYXRhOiBTREtfTUVUQURBVEFcbiAgfTtcbn07XG5leHBvcnQge1xuICBtZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudlxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTmV4dENsZXJrUHJvcHNXaXRoRW52LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/only-try.js":
/*!***************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/utils/only-try.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   onlyTry: () => (/* binding */ onlyTry)\n/* harmony export */ });\n\nconst onlyTry = (cb) => {\n  try {\n    cb();\n  } catch {\n  }\n};\n\n//# sourceMappingURL=only-try.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vdXRpbHMvb25seS10cnkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaWRkaGFudGd1cHRhL0RvY3VtZW50cy9wcm9qZWN0cy9mb3JnZXRhaS9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS91dGlscy9vbmx5LXRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay1CVVNZQTJCNC5qc1wiO1xuY29uc3Qgb25seVRyeSA9IChjYikgPT4ge1xuICB0cnkge1xuICAgIGNiKCk7XG4gIH0gY2F0Y2gge1xuICB9XG59O1xuZXhwb3J0IHtcbiAgb25seVRyeVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ubHktdHJ5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/only-try.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom.react-server.development.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/cjs/react-dom.react-server.development.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-dom.react-server.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function noop() {}\n    function getCrossOriginStringAs(as, input) {\n      if (\"font\" === as) return \"\";\n      if (\"string\" === typeof input)\n        return \"use-credentials\" === input ? input : \"\";\n    }\n    function getValueDescriptorExpectingObjectForWarning(thing) {\n      return null === thing\n        ? \"`null`\"\n        : void 0 === thing\n          ? \"`undefined`\"\n          : \"\" === thing\n            ? \"an empty string\"\n            : 'something with type \"' + typeof thing + '\"';\n    }\n    function getValueDescriptorExpectingEnumForWarning(thing) {\n      return null === thing\n        ? \"`null`\"\n        : void 0 === thing\n          ? \"`undefined`\"\n          : \"\" === thing\n            ? \"an empty string\"\n            : \"string\" === typeof thing\n              ? JSON.stringify(thing)\n              : \"number\" === typeof thing\n                ? \"`\" + thing + \"`\"\n                : 'something with type \"' + typeof thing + '\"';\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(middleware)/./node_modules/next/dist/compiled/react/react.react-server.js\"),\n      Internals = {\n        d: {\n          f: noop,\n          r: function () {\n            throw Error(\n              \"Invalid form element. requestFormReset must be passed a form that was rendered by React.\"\n            );\n          },\n          D: noop,\n          C: noop,\n          L: noop,\n          m: noop,\n          X: noop,\n          S: noop,\n          M: noop\n        },\n        p: 0,\n        findDOMNode: null\n      };\n    if (!React.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE)\n      throw Error(\n        'The \"react\" package in this environment is not configured correctly. The \"react-server\" condition must be enabled in any environment that runs React Server Components.'\n      );\n    (\"function\" === typeof Map &&\n      null != Map.prototype &&\n      \"function\" === typeof Map.prototype.forEach &&\n      \"function\" === typeof Set &&\n      null != Set.prototype &&\n      \"function\" === typeof Set.prototype.clear &&\n      \"function\" === typeof Set.prototype.forEach) ||\n      console.error(\n        \"React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills\"\n      );\n    exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =\n      Internals;\n    exports.preconnect = function (href, options) {\n      \"string\" === typeof href && href\n        ? null != options && \"object\" !== typeof options\n          ? console.error(\n              \"ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.\",\n              getValueDescriptorExpectingEnumForWarning(options)\n            )\n          : null != options &&\n            \"string\" !== typeof options.crossOrigin &&\n            console.error(\n              \"ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.\",\n              getValueDescriptorExpectingObjectForWarning(options.crossOrigin)\n            )\n        : console.error(\n            \"ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\",\n            getValueDescriptorExpectingObjectForWarning(href)\n          );\n      \"string\" === typeof href &&\n        (options\n          ? ((options = options.crossOrigin),\n            (options =\n              \"string\" === typeof options\n                ? \"use-credentials\" === options\n                  ? options\n                  : \"\"\n                : void 0))\n          : (options = null),\n        Internals.d.C(href, options));\n    };\n    exports.prefetchDNS = function (href) {\n      if (\"string\" !== typeof href || !href)\n        console.error(\n          \"ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\",\n          getValueDescriptorExpectingObjectForWarning(href)\n        );\n      else if (1 < arguments.length) {\n        var options = arguments[1];\n        \"object\" === typeof options && options.hasOwnProperty(\"crossOrigin\")\n          ? console.error(\n              \"ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.\",\n              getValueDescriptorExpectingEnumForWarning(options)\n            )\n          : console.error(\n              \"ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.\",\n              getValueDescriptorExpectingEnumForWarning(options)\n            );\n      }\n      \"string\" === typeof href && Internals.d.D(href);\n    };\n    exports.preinit = function (href, options) {\n      \"string\" === typeof href && href\n        ? null == options || \"object\" !== typeof options\n          ? console.error(\n              \"ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.\",\n              getValueDescriptorExpectingEnumForWarning(options)\n            )\n          : \"style\" !== options.as &&\n            \"script\" !== options.as &&\n            console.error(\n              'ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are \"style\" and \"script\".',\n              getValueDescriptorExpectingEnumForWarning(options.as)\n            )\n        : console.error(\n            \"ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\",\n            getValueDescriptorExpectingObjectForWarning(href)\n          );\n      if (\n        \"string\" === typeof href &&\n        options &&\n        \"string\" === typeof options.as\n      ) {\n        var as = options.as,\n          crossOrigin = getCrossOriginStringAs(as, options.crossOrigin),\n          integrity =\n            \"string\" === typeof options.integrity ? options.integrity : void 0,\n          fetchPriority =\n            \"string\" === typeof options.fetchPriority\n              ? options.fetchPriority\n              : void 0;\n        \"style\" === as\n          ? Internals.d.S(\n              href,\n              \"string\" === typeof options.precedence\n                ? options.precedence\n                : void 0,\n              {\n                crossOrigin: crossOrigin,\n                integrity: integrity,\n                fetchPriority: fetchPriority\n              }\n            )\n          : \"script\" === as &&\n            Internals.d.X(href, {\n              crossOrigin: crossOrigin,\n              integrity: integrity,\n              fetchPriority: fetchPriority,\n              nonce: \"string\" === typeof options.nonce ? options.nonce : void 0\n            });\n      }\n    };\n    exports.preinitModule = function (href, options) {\n      var encountered = \"\";\n      (\"string\" === typeof href && href) ||\n        (encountered +=\n          \" The `href` argument encountered was \" +\n          getValueDescriptorExpectingObjectForWarning(href) +\n          \".\");\n      void 0 !== options && \"object\" !== typeof options\n        ? (encountered +=\n            \" The `options` argument encountered was \" +\n            getValueDescriptorExpectingObjectForWarning(options) +\n            \".\")\n        : options &&\n          \"as\" in options &&\n          \"script\" !== options.as &&\n          (encountered +=\n            \" The `as` option encountered was \" +\n            getValueDescriptorExpectingEnumForWarning(options.as) +\n            \".\");\n      if (encountered)\n        console.error(\n          \"ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s\",\n          encountered\n        );\n      else\n        switch (\n          ((encountered =\n            options && \"string\" === typeof options.as ? options.as : \"script\"),\n          encountered)\n        ) {\n          case \"script\":\n            break;\n          default:\n            (encountered =\n              getValueDescriptorExpectingEnumForWarning(encountered)),\n              console.error(\n                'ReactDOM.preinitModule(): Currently the only supported \"as\" type for this function is \"script\" but received \"%s\" instead. This warning was generated for `href` \"%s\". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',\n                encountered,\n                href\n              );\n        }\n      if (\"string\" === typeof href)\n        if (\"object\" === typeof options && null !== options) {\n          if (null == options.as || \"script\" === options.as)\n            (encountered = getCrossOriginStringAs(\n              options.as,\n              options.crossOrigin\n            )),\n              Internals.d.M(href, {\n                crossOrigin: encountered,\n                integrity:\n                  \"string\" === typeof options.integrity\n                    ? options.integrity\n                    : void 0,\n                nonce:\n                  \"string\" === typeof options.nonce ? options.nonce : void 0\n              });\n        } else null == options && Internals.d.M(href);\n    };\n    exports.preload = function (href, options) {\n      var encountered = \"\";\n      (\"string\" === typeof href && href) ||\n        (encountered +=\n          \" The `href` argument encountered was \" +\n          getValueDescriptorExpectingObjectForWarning(href) +\n          \".\");\n      null == options || \"object\" !== typeof options\n        ? (encountered +=\n            \" The `options` argument encountered was \" +\n            getValueDescriptorExpectingObjectForWarning(options) +\n            \".\")\n        : (\"string\" === typeof options.as && options.as) ||\n          (encountered +=\n            \" The `as` option encountered was \" +\n            getValueDescriptorExpectingObjectForWarning(options.as) +\n            \".\");\n      encountered &&\n        console.error(\n          'ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel=\"preload\" as=\"...\" />` tag.%s',\n          encountered\n        );\n      if (\n        \"string\" === typeof href &&\n        \"object\" === typeof options &&\n        null !== options &&\n        \"string\" === typeof options.as\n      ) {\n        encountered = options.as;\n        var crossOrigin = getCrossOriginStringAs(\n          encountered,\n          options.crossOrigin\n        );\n        Internals.d.L(href, encountered, {\n          crossOrigin: crossOrigin,\n          integrity:\n            \"string\" === typeof options.integrity ? options.integrity : void 0,\n          nonce: \"string\" === typeof options.nonce ? options.nonce : void 0,\n          type: \"string\" === typeof options.type ? options.type : void 0,\n          fetchPriority:\n            \"string\" === typeof options.fetchPriority\n              ? options.fetchPriority\n              : void 0,\n          referrerPolicy:\n            \"string\" === typeof options.referrerPolicy\n              ? options.referrerPolicy\n              : void 0,\n          imageSrcSet:\n            \"string\" === typeof options.imageSrcSet\n              ? options.imageSrcSet\n              : void 0,\n          imageSizes:\n            \"string\" === typeof options.imageSizes\n              ? options.imageSizes\n              : void 0,\n          media: \"string\" === typeof options.media ? options.media : void 0\n        });\n      }\n    };\n    exports.preloadModule = function (href, options) {\n      var encountered = \"\";\n      (\"string\" === typeof href && href) ||\n        (encountered +=\n          \" The `href` argument encountered was \" +\n          getValueDescriptorExpectingObjectForWarning(href) +\n          \".\");\n      void 0 !== options && \"object\" !== typeof options\n        ? (encountered +=\n            \" The `options` argument encountered was \" +\n            getValueDescriptorExpectingObjectForWarning(options) +\n            \".\")\n        : options &&\n          \"as\" in options &&\n          \"string\" !== typeof options.as &&\n          (encountered +=\n            \" The `as` option encountered was \" +\n            getValueDescriptorExpectingObjectForWarning(options.as) +\n            \".\");\n      encountered &&\n        console.error(\n          'ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel=\"modulepreload\" as=\"...\" />` tag.%s',\n          encountered\n        );\n      \"string\" === typeof href &&\n        (options\n          ? ((encountered = getCrossOriginStringAs(\n              options.as,\n              options.crossOrigin\n            )),\n            Internals.d.m(href, {\n              as:\n                \"string\" === typeof options.as && \"script\" !== options.as\n                  ? options.as\n                  : void 0,\n              crossOrigin: encountered,\n              integrity:\n                \"string\" === typeof options.integrity\n                  ? options.integrity\n                  : void 0\n            }))\n          : Internals.d.m(href));\n    };\n    exports.version = \"19.1.0-canary-029e8bd6-20250306\";\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom.react-server.development.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/react-dom/react-dom.react-server.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/react-dom.react-server.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-dom.react-server.development.js */ \"(middleware)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom.react-server.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1kb20vcmVhY3QtZG9tLnJlYWN0LXNlcnZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsNkxBQXVFO0FBQ3pFIiwic291cmNlcyI6WyIvVXNlcnMvc2lkZGhhbnRndXB0YS9Eb2N1bWVudHMvcHJvamVjdHMvZm9yZ2V0YWkvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1kb20vcmVhY3QtZG9tLnJlYWN0LXNlcnZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnJlYWN0LXNlcnZlci5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5yZWFjdC1zZXJ2ZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/compiled/react-dom/react-dom.react-server.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-server-dom-webpack-server.edge.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \n true && function() {\n    function voidHandler() {}\n    function getIteratorFn(maybeIterable) {\n        if (null === maybeIterable || \"object\" !== typeof maybeIterable) return null;\n        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[\"@@iterator\"];\n        return \"function\" === typeof maybeIterable ? maybeIterable : null;\n    }\n    function _defineProperty(obj, key, value) {\n        key in obj ? Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: !0,\n            configurable: !0,\n            writable: !0\n        }) : obj[key] = value;\n        return obj;\n    }\n    function handleErrorInNextTick(error) {\n        setTimeoutOrImmediate(function() {\n            throw error;\n        });\n    }\n    function writeChunkAndReturn(destination, chunk) {\n        if (0 !== chunk.byteLength) if (2048 < chunk.byteLength) 0 < writtenBytes && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = new Uint8Array(2048), writtenBytes = 0), destination.enqueue(chunk);\n        else {\n            var allowableBytes = currentView.length - writtenBytes;\n            allowableBytes < chunk.byteLength && (0 === allowableBytes ? destination.enqueue(currentView) : (currentView.set(chunk.subarray(0, allowableBytes), writtenBytes), destination.enqueue(currentView), chunk = chunk.subarray(allowableBytes)), currentView = new Uint8Array(2048), writtenBytes = 0);\n            currentView.set(chunk, writtenBytes);\n            writtenBytes += chunk.byteLength;\n        }\n        return !0;\n    }\n    function stringToChunk(content) {\n        return textEncoder.encode(content);\n    }\n    function byteLengthOfChunk(chunk) {\n        return chunk.byteLength;\n    }\n    function closeWithError(destination, error) {\n        \"function\" === typeof destination.error ? destination.error(error) : destination.close();\n    }\n    function isClientReference(reference) {\n        return reference.$$typeof === CLIENT_REFERENCE_TAG$1;\n    }\n    function registerClientReferenceImpl(proxyImplementation, id, async) {\n        return Object.defineProperties(proxyImplementation, {\n            $$typeof: {\n                value: CLIENT_REFERENCE_TAG$1\n            },\n            $$id: {\n                value: id\n            },\n            $$async: {\n                value: async\n            }\n        });\n    }\n    function bind() {\n        var newFn = FunctionBind.apply(this, arguments);\n        if (this.$$typeof === SERVER_REFERENCE_TAG) {\n            null != arguments[0] && console.error('Cannot bind \"this\" of a Server Action. Pass null or undefined as the first argument to .bind().');\n            var args = ArraySlice.call(arguments, 1), $$typeof = {\n                value: SERVER_REFERENCE_TAG\n            }, $$id = {\n                value: this.$$id\n            };\n            args = {\n                value: this.$$bound ? this.$$bound.concat(args) : args\n            };\n            return Object.defineProperties(newFn, {\n                $$typeof: $$typeof,\n                $$id: $$id,\n                $$bound: args,\n                $$location: {\n                    value: this.$$location,\n                    configurable: !0\n                },\n                bind: {\n                    value: bind,\n                    configurable: !0\n                }\n            });\n        }\n        return newFn;\n    }\n    function getReference(target, name) {\n        switch(name){\n            case \"$$typeof\":\n                return target.$$typeof;\n            case \"$$id\":\n                return target.$$id;\n            case \"$$async\":\n                return target.$$async;\n            case \"name\":\n                return target.name;\n            case \"defaultProps\":\n                return;\n            case \"toJSON\":\n                return;\n            case Symbol.toPrimitive:\n                return Object.prototype[Symbol.toPrimitive];\n            case Symbol.toStringTag:\n                return Object.prototype[Symbol.toStringTag];\n            case \"__esModule\":\n                var moduleId = target.$$id;\n                target.default = registerClientReferenceImpl(function() {\n                    throw Error(\"Attempted to call the default export of \" + moduleId + \" from the server but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\");\n                }, target.$$id + \"#\", target.$$async);\n                return !0;\n            case \"then\":\n                if (target.then) return target.then;\n                if (target.$$async) return;\n                var clientReference = registerClientReferenceImpl({}, target.$$id, !0), proxy = new Proxy(clientReference, proxyHandlers$1);\n                target.status = \"fulfilled\";\n                target.value = proxy;\n                return target.then = registerClientReferenceImpl(function(resolve) {\n                    return Promise.resolve(resolve(proxy));\n                }, target.$$id + \"#then\", !1);\n        }\n        if (\"symbol\" === typeof name) throw Error(\"Cannot read Symbol exports. Only named exports are supported on a client module imported on the server.\");\n        clientReference = target[name];\n        clientReference || (clientReference = registerClientReferenceImpl(function() {\n            throw Error(\"Attempted to call \" + String(name) + \"() from the server but \" + String(name) + \" is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\");\n        }, target.$$id + \"#\" + name, target.$$async), Object.defineProperty(clientReference, \"name\", {\n            value: name\n        }), clientReference = target[name] = new Proxy(clientReference, deepProxyHandlers));\n        return clientReference;\n    }\n    function trimOptions(options) {\n        if (null == options) return null;\n        var hasProperties = !1, trimmed = {}, key;\n        for(key in options)null != options[key] && (hasProperties = !0, trimmed[key] = options[key]);\n        return hasProperties ? trimmed : null;\n    }\n    function prepareStackTrace(error, structuredStackTrace) {\n        error = (error.name || \"Error\") + \": \" + (error.message || \"\");\n        for(var i = 0; i < structuredStackTrace.length; i++)error += \"\\n    at \" + structuredStackTrace[i].toString();\n        return error;\n    }\n    function parseStackTrace(error, skipFrames) {\n        a: {\n            var previousPrepare = Error.prepareStackTrace;\n            Error.prepareStackTrace = prepareStackTrace;\n            try {\n                var stack = String(error.stack);\n                break a;\n            } finally{\n                Error.prepareStackTrace = previousPrepare;\n            }\n            stack = void 0;\n        }\n        stack.startsWith(\"Error: react-stack-top-frame\\n\") && (stack = stack.slice(29));\n        error = stack.indexOf(\"react-stack-bottom-frame\");\n        -1 !== error && (error = stack.lastIndexOf(\"\\n\", error));\n        -1 !== error && (stack = stack.slice(0, error));\n        stack = stack.split(\"\\n\");\n        for(error = []; skipFrames < stack.length; skipFrames++)if (previousPrepare = frameRegExp.exec(stack[skipFrames])) {\n            var name = previousPrepare[1] || \"\";\n            \"<anonymous>\" === name && (name = \"\");\n            var filename = previousPrepare[2] || previousPrepare[5] || \"\";\n            \"<anonymous>\" === filename && (filename = \"\");\n            error.push([\n                name,\n                filename,\n                +(previousPrepare[3] || previousPrepare[6]),\n                +(previousPrepare[4] || previousPrepare[7])\n            ]);\n        }\n        return error;\n    }\n    function createTemporaryReference(temporaryReferences, id) {\n        var reference = Object.defineProperties(function() {\n            throw Error(\"Attempted to call a temporary Client Reference from the server but it is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\");\n        }, {\n            $$typeof: {\n                value: TEMPORARY_REFERENCE_TAG\n            }\n        });\n        reference = new Proxy(reference, proxyHandlers);\n        temporaryReferences.set(reference, id);\n        return reference;\n    }\n    function noop$1() {}\n    function trackUsedThenable(thenableState, thenable, index) {\n        index = thenableState[index];\n        void 0 === index ? thenableState.push(thenable) : index !== thenable && (thenable.then(noop$1, noop$1), thenable = index);\n        switch(thenable.status){\n            case \"fulfilled\":\n                return thenable.value;\n            case \"rejected\":\n                throw thenable.reason;\n            default:\n                \"string\" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenableState = thenable, thenableState.status = \"pending\", thenableState.then(function(fulfilledValue) {\n                    if (\"pending\" === thenable.status) {\n                        var fulfilledThenable = thenable;\n                        fulfilledThenable.status = \"fulfilled\";\n                        fulfilledThenable.value = fulfilledValue;\n                    }\n                }, function(error) {\n                    if (\"pending\" === thenable.status) {\n                        var rejectedThenable = thenable;\n                        rejectedThenable.status = \"rejected\";\n                        rejectedThenable.reason = error;\n                    }\n                }));\n                switch(thenable.status){\n                    case \"fulfilled\":\n                        return thenable.value;\n                    case \"rejected\":\n                        throw thenable.reason;\n                }\n                suspendedThenable = thenable;\n                throw SuspenseException;\n        }\n    }\n    function getSuspendedThenable() {\n        if (null === suspendedThenable) throw Error(\"Expected a suspended thenable. This is a bug in React. Please file an issue.\");\n        var thenable = suspendedThenable;\n        suspendedThenable = null;\n        return thenable;\n    }\n    function getThenableStateAfterSuspending() {\n        var state = thenableState || [];\n        state._componentDebugInfo = currentComponentDebugInfo;\n        thenableState = currentComponentDebugInfo = null;\n        return state;\n    }\n    function unsupportedHook() {\n        throw Error(\"This Hook is not supported in Server Components.\");\n    }\n    function unsupportedRefresh() {\n        throw Error(\"Refreshing the cache is not supported in Server Components.\");\n    }\n    function unsupportedContext() {\n        throw Error(\"Cannot read a Client Context from a Server Component.\");\n    }\n    function resolveOwner() {\n        if (currentOwner) return currentOwner;\n        if (supportsComponentStorage) {\n            var owner = componentStorage.getStore();\n            if (owner) return owner;\n        }\n        return null;\n    }\n    function isObjectPrototype(object) {\n        if (!object) return !1;\n        var ObjectPrototype = Object.prototype;\n        if (object === ObjectPrototype) return !0;\n        if (getPrototypeOf(object)) return !1;\n        object = Object.getOwnPropertyNames(object);\n        for(var i = 0; i < object.length; i++)if (!(object[i] in ObjectPrototype)) return !1;\n        return !0;\n    }\n    function isSimpleObject(object) {\n        if (!isObjectPrototype(getPrototypeOf(object))) return !1;\n        for(var names = Object.getOwnPropertyNames(object), i = 0; i < names.length; i++){\n            var descriptor = Object.getOwnPropertyDescriptor(object, names[i]);\n            if (!descriptor || !descriptor.enumerable && (\"key\" !== names[i] && \"ref\" !== names[i] || \"function\" !== typeof descriptor.get)) return !1;\n        }\n        return !0;\n    }\n    function objectName(object) {\n        return Object.prototype.toString.call(object).replace(/^\\[object (.*)\\]$/, function(m, p0) {\n            return p0;\n        });\n    }\n    function describeKeyForErrorMessage(key) {\n        var encodedKey = JSON.stringify(key);\n        return '\"' + key + '\"' === encodedKey ? key : encodedKey;\n    }\n    function describeValueForErrorMessage(value) {\n        switch(typeof value){\n            case \"string\":\n                return JSON.stringify(10 >= value.length ? value : value.slice(0, 10) + \"...\");\n            case \"object\":\n                if (isArrayImpl(value)) return \"[...]\";\n                if (null !== value && value.$$typeof === CLIENT_REFERENCE_TAG) return \"client\";\n                value = objectName(value);\n                return \"Object\" === value ? \"{...}\" : value;\n            case \"function\":\n                return value.$$typeof === CLIENT_REFERENCE_TAG ? \"client\" : (value = value.displayName || value.name) ? \"function \" + value : \"function\";\n            default:\n                return String(value);\n        }\n    }\n    function describeElementType(type) {\n        if (\"string\" === typeof type) return type;\n        switch(type){\n            case REACT_SUSPENSE_TYPE:\n                return \"Suspense\";\n            case REACT_SUSPENSE_LIST_TYPE:\n                return \"SuspenseList\";\n        }\n        if (\"object\" === typeof type) switch(type.$$typeof){\n            case REACT_FORWARD_REF_TYPE:\n                return describeElementType(type.render);\n            case REACT_MEMO_TYPE:\n                return describeElementType(type.type);\n            case REACT_LAZY_TYPE:\n                var payload = type._payload;\n                type = type._init;\n                try {\n                    return describeElementType(type(payload));\n                } catch (x) {}\n        }\n        return \"\";\n    }\n    function describeObjectForErrorMessage(objectOrArray, expandedName) {\n        var objKind = objectName(objectOrArray);\n        if (\"Object\" !== objKind && \"Array\" !== objKind) return objKind;\n        var start = -1, length = 0;\n        if (isArrayImpl(objectOrArray)) if (jsxChildrenParents.has(objectOrArray)) {\n            var type = jsxChildrenParents.get(objectOrArray);\n            objKind = \"<\" + describeElementType(type) + \">\";\n            for(var i = 0; i < objectOrArray.length; i++){\n                var value = objectOrArray[i];\n                value = \"string\" === typeof value ? value : \"object\" === typeof value && null !== value ? \"{\" + describeObjectForErrorMessage(value) + \"}\" : \"{\" + describeValueForErrorMessage(value) + \"}\";\n                \"\" + i === expandedName ? (start = objKind.length, length = value.length, objKind += value) : objKind = 15 > value.length && 40 > objKind.length + value.length ? objKind + value : objKind + \"{...}\";\n            }\n            objKind += \"</\" + describeElementType(type) + \">\";\n        } else {\n            objKind = \"[\";\n            for(type = 0; type < objectOrArray.length; type++)0 < type && (objKind += \", \"), i = objectOrArray[type], i = \"object\" === typeof i && null !== i ? describeObjectForErrorMessage(i) : describeValueForErrorMessage(i), \"\" + type === expandedName ? (start = objKind.length, length = i.length, objKind += i) : objKind = 10 > i.length && 40 > objKind.length + i.length ? objKind + i : objKind + \"...\";\n            objKind += \"]\";\n        }\n        else if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) objKind = \"<\" + describeElementType(objectOrArray.type) + \"/>\";\n        else {\n            if (objectOrArray.$$typeof === CLIENT_REFERENCE_TAG) return \"client\";\n            if (jsxPropsParents.has(objectOrArray)) {\n                objKind = jsxPropsParents.get(objectOrArray);\n                objKind = \"<\" + (describeElementType(objKind) || \"...\");\n                type = Object.keys(objectOrArray);\n                for(i = 0; i < type.length; i++){\n                    objKind += \" \";\n                    value = type[i];\n                    objKind += describeKeyForErrorMessage(value) + \"=\";\n                    var _value2 = objectOrArray[value];\n                    var _substr2 = value === expandedName && \"object\" === typeof _value2 && null !== _value2 ? describeObjectForErrorMessage(_value2) : describeValueForErrorMessage(_value2);\n                    \"string\" !== typeof _value2 && (_substr2 = \"{\" + _substr2 + \"}\");\n                    value === expandedName ? (start = objKind.length, length = _substr2.length, objKind += _substr2) : objKind = 10 > _substr2.length && 40 > objKind.length + _substr2.length ? objKind + _substr2 : objKind + \"...\";\n                }\n                objKind += \">\";\n            } else {\n                objKind = \"{\";\n                type = Object.keys(objectOrArray);\n                for(i = 0; i < type.length; i++)0 < i && (objKind += \", \"), value = type[i], objKind += describeKeyForErrorMessage(value) + \": \", _value2 = objectOrArray[value], _value2 = \"object\" === typeof _value2 && null !== _value2 ? describeObjectForErrorMessage(_value2) : describeValueForErrorMessage(_value2), value === expandedName ? (start = objKind.length, length = _value2.length, objKind += _value2) : objKind = 10 > _value2.length && 40 > objKind.length + _value2.length ? objKind + _value2 : objKind + \"...\";\n                objKind += \"}\";\n            }\n        }\n        return void 0 === expandedName ? objKind : -1 < start && 0 < length ? (objectOrArray = \" \".repeat(start) + \"^\".repeat(length), \"\\n  \" + objKind + \"\\n  \" + objectOrArray) : \"\\n  \" + objKind;\n    }\n    function defaultFilterStackFrame(filename) {\n        return \"\" !== filename && !filename.startsWith(\"node:\") && !filename.includes(\"node_modules\");\n    }\n    function filterStackTrace(request, error, skipFrames) {\n        request = request.filterStackFrame;\n        error = parseStackTrace(error, skipFrames);\n        for(skipFrames = 0; skipFrames < error.length; skipFrames++){\n            var callsite = error[skipFrames], functionName = callsite[0], url = callsite[1];\n            if (url.startsWith(\"rsc://React/\")) {\n                var envIdx = url.indexOf(\"/\", 12), suffixIdx = url.lastIndexOf(\"?\");\n                -1 < envIdx && -1 < suffixIdx && (url = callsite[1] = url.slice(envIdx + 1, suffixIdx));\n            }\n            request(url, functionName) || (error.splice(skipFrames, 1), skipFrames--);\n        }\n        return error;\n    }\n    function patchConsole(consoleInst, methodName) {\n        var descriptor = Object.getOwnPropertyDescriptor(consoleInst, methodName);\n        if (descriptor && (descriptor.configurable || descriptor.writable) && \"function\" === typeof descriptor.value) {\n            var originalMethod = descriptor.value;\n            descriptor = Object.getOwnPropertyDescriptor(originalMethod, \"name\");\n            var wrapperMethod = function() {\n                var request = resolveRequest();\n                if ((\"assert\" !== methodName || !arguments[0]) && null !== request) {\n                    var stack = filterStackTrace(request, Error(\"react-stack-top-frame\"), 1);\n                    request.pendingChunks++;\n                    var owner = resolveOwner();\n                    emitConsoleChunk(request, methodName, owner, stack, arguments);\n                }\n                return originalMethod.apply(this, arguments);\n            };\n            descriptor && Object.defineProperty(wrapperMethod, \"name\", descriptor);\n            Object.defineProperty(consoleInst, methodName, {\n                value: wrapperMethod\n            });\n        }\n    }\n    function getCurrentStackInDEV() {\n        var owner = resolveOwner();\n        if (null === owner) return \"\";\n        try {\n            var info = \"\";\n            if (owner.owner || \"string\" !== typeof owner.name) {\n                for(; owner;){\n                    var ownerStack = owner.debugStack;\n                    if (null != ownerStack) {\n                        if (owner = owner.owner) {\n                            var JSCompiler_temp_const = info;\n                            var error = ownerStack, prevPrepareStackTrace = Error.prepareStackTrace;\n                            Error.prepareStackTrace = prepareStackTrace;\n                            var stack = error.stack;\n                            Error.prepareStackTrace = prevPrepareStackTrace;\n                            stack.startsWith(\"Error: react-stack-top-frame\\n\") && (stack = stack.slice(29));\n                            var idx = stack.indexOf(\"\\n\");\n                            -1 !== idx && (stack = stack.slice(idx + 1));\n                            idx = stack.indexOf(\"react-stack-bottom-frame\");\n                            -1 !== idx && (idx = stack.lastIndexOf(\"\\n\", idx));\n                            var JSCompiler_inline_result = -1 !== idx ? stack = stack.slice(0, idx) : \"\";\n                            info = JSCompiler_temp_const + (\"\\n\" + JSCompiler_inline_result);\n                        }\n                    } else break;\n                }\n                var JSCompiler_inline_result$jscomp$0 = info;\n            } else {\n                JSCompiler_temp_const = owner.name;\n                if (void 0 === prefix) try {\n                    throw Error();\n                } catch (x) {\n                    prefix = (error = x.stack.trim().match(/\\n( *(at )?)/)) && error[1] || \"\", suffix = -1 < x.stack.indexOf(\"\\n    at\") ? \" (<anonymous>)\" : -1 < x.stack.indexOf(\"@\") ? \"@unknown:0:0\" : \"\";\n                }\n                JSCompiler_inline_result$jscomp$0 = \"\\n\" + prefix + JSCompiler_temp_const + suffix;\n            }\n        } catch (x) {\n            JSCompiler_inline_result$jscomp$0 = \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n        }\n        return JSCompiler_inline_result$jscomp$0;\n    }\n    function defaultErrorHandler(error) {\n        console.error(error);\n    }\n    function defaultPostponeHandler() {}\n    function RequestInstance(type, model, bundlerConfig, onError, identifierPrefix, onPostpone, temporaryReferences, environmentName, filterStackFrame, onAllReady, onFatalError) {\n        if (null !== ReactSharedInternalsServer.A && ReactSharedInternalsServer.A !== DefaultAsyncDispatcher) throw Error(\"Currently React only supports one RSC renderer at a time.\");\n        ReactSharedInternalsServer.A = DefaultAsyncDispatcher;\n        ReactSharedInternalsServer.getCurrentStack = getCurrentStackInDEV;\n        var abortSet = new Set(), pingedTasks = [], hints = new Set();\n        this.type = type;\n        this.status = OPENING;\n        this.flushScheduled = !1;\n        this.destination = this.fatalError = null;\n        this.bundlerConfig = bundlerConfig;\n        this.cache = new Map();\n        this.pendingChunks = this.nextChunkId = 0;\n        this.hints = hints;\n        this.abortListeners = new Set();\n        this.abortableTasks = abortSet;\n        this.pingedTasks = pingedTasks;\n        this.completedImportChunks = [];\n        this.completedHintChunks = [];\n        this.completedRegularChunks = [];\n        this.completedErrorChunks = [];\n        this.writtenSymbols = new Map();\n        this.writtenClientReferences = new Map();\n        this.writtenServerReferences = new Map();\n        this.writtenObjects = new WeakMap();\n        this.temporaryReferences = temporaryReferences;\n        this.identifierPrefix = identifierPrefix || \"\";\n        this.identifierCount = 1;\n        this.taintCleanupQueue = [];\n        this.onError = void 0 === onError ? defaultErrorHandler : onError;\n        this.onPostpone = void 0 === onPostpone ? defaultPostponeHandler : onPostpone;\n        this.onAllReady = onAllReady;\n        this.onFatalError = onFatalError;\n        this.environmentName = void 0 === environmentName ? function() {\n            return \"Server\";\n        } : \"function\" !== typeof environmentName ? function() {\n            return environmentName;\n        } : environmentName;\n        this.filterStackFrame = void 0 === filterStackFrame ? defaultFilterStackFrame : filterStackFrame;\n        this.didWarnForKey = null;\n        type = createTask(this, model, null, !1, abortSet, null, null, null);\n        pingedTasks.push(type);\n    }\n    function noop() {}\n    function resolveRequest() {\n        if (currentRequest) return currentRequest;\n        if (supportsRequestStorage) {\n            var store = requestStorage.getStore();\n            if (store) return store;\n        }\n        return null;\n    }\n    function serializeThenable(request, task, thenable) {\n        var newTask = createTask(request, null, task.keyPath, task.implicitSlot, request.abortableTasks, task.debugOwner, task.debugStack, task.debugTask);\n        (task = thenable._debugInfo) && forwardDebugInfo(request, newTask.id, task);\n        switch(thenable.status){\n            case \"fulfilled\":\n                return newTask.model = thenable.value, pingTask(request, newTask), newTask.id;\n            case \"rejected\":\n                return erroredTask(request, newTask, thenable.reason), newTask.id;\n            default:\n                if (request.status === ABORTING) return request.abortableTasks.delete(newTask), newTask.status = ABORTED, task = stringify(serializeByValueID(request.fatalError)), emitModelChunk(request, newTask.id, task), newTask.id;\n                \"string\" !== typeof thenable.status && (thenable.status = \"pending\", thenable.then(function(fulfilledValue) {\n                    \"pending\" === thenable.status && (thenable.status = \"fulfilled\", thenable.value = fulfilledValue);\n                }, function(error) {\n                    \"pending\" === thenable.status && (thenable.status = \"rejected\", thenable.reason = error);\n                }));\n        }\n        thenable.then(function(value) {\n            newTask.model = value;\n            pingTask(request, newTask);\n        }, function(reason) {\n            newTask.status === PENDING$1 && (erroredTask(request, newTask, reason), enqueueFlush(request));\n        });\n        return newTask.id;\n    }\n    function serializeReadableStream(request, task, stream) {\n        function progress(entry) {\n            if (!aborted) if (entry.done) request.abortListeners.delete(abortStream), entry = streamTask.id.toString(16) + \":C\\n\", request.completedRegularChunks.push(stringToChunk(entry)), enqueueFlush(request), aborted = !0;\n            else try {\n                streamTask.model = entry.value, request.pendingChunks++, tryStreamTask(request, streamTask), enqueueFlush(request), reader.read().then(progress, error);\n            } catch (x$0) {\n                error(x$0);\n            }\n        }\n        function error(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortStream), erroredTask(request, streamTask, reason), enqueueFlush(request), reader.cancel(reason).then(error, error));\n        }\n        function abortStream(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortStream), erroredTask(request, streamTask, reason), enqueueFlush(request), reader.cancel(reason).then(error, error));\n        }\n        var supportsBYOB = stream.supportsBYOB;\n        if (void 0 === supportsBYOB) try {\n            stream.getReader({\n                mode: \"byob\"\n            }).releaseLock(), supportsBYOB = !0;\n        } catch (x) {\n            supportsBYOB = !1;\n        }\n        var reader = stream.getReader(), streamTask = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.debugOwner, task.debugStack, task.debugTask);\n        request.abortableTasks.delete(streamTask);\n        request.pendingChunks++;\n        task = streamTask.id.toString(16) + \":\" + (supportsBYOB ? \"r\" : \"R\") + \"\\n\";\n        request.completedRegularChunks.push(stringToChunk(task));\n        var aborted = !1;\n        request.abortListeners.add(abortStream);\n        reader.read().then(progress, error);\n        return serializeByValueID(streamTask.id);\n    }\n    function serializeAsyncIterable(request, task, iterable, iterator) {\n        function progress(entry) {\n            if (!aborted) if (entry.done) {\n                request.abortListeners.delete(abortIterable);\n                if (void 0 === entry.value) var endStreamRow = streamTask.id.toString(16) + \":C\\n\";\n                else try {\n                    var chunkId = outlineModel(request, entry.value);\n                    endStreamRow = streamTask.id.toString(16) + \":C\" + stringify(serializeByValueID(chunkId)) + \"\\n\";\n                } catch (x) {\n                    error(x);\n                    return;\n                }\n                request.completedRegularChunks.push(stringToChunk(endStreamRow));\n                enqueueFlush(request);\n                aborted = !0;\n            } else try {\n                streamTask.model = entry.value, request.pendingChunks++, tryStreamTask(request, streamTask), enqueueFlush(request), callIteratorInDEV(iterator, progress, error);\n            } catch (x$1) {\n                error(x$1);\n            }\n        }\n        function error(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortIterable), erroredTask(request, streamTask, reason), enqueueFlush(request), \"function\" === typeof iterator.throw && iterator.throw(reason).then(error, error));\n        }\n        function abortIterable(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortIterable), erroredTask(request, streamTask, reason), enqueueFlush(request), \"function\" === typeof iterator.throw && iterator.throw(reason).then(error, error));\n        }\n        var isIterator = iterable === iterator, streamTask = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.debugOwner, task.debugStack, task.debugTask);\n        request.abortableTasks.delete(streamTask);\n        request.pendingChunks++;\n        task = streamTask.id.toString(16) + \":\" + (isIterator ? \"x\" : \"X\") + \"\\n\";\n        request.completedRegularChunks.push(stringToChunk(task));\n        (iterable = iterable._debugInfo) && forwardDebugInfo(request, streamTask.id, iterable);\n        var aborted = !1;\n        request.abortListeners.add(abortIterable);\n        callIteratorInDEV(iterator, progress, error);\n        return serializeByValueID(streamTask.id);\n    }\n    function emitHint(request, code, model) {\n        model = stringify(model);\n        code = stringToChunk(\":H\" + code + model + \"\\n\");\n        request.completedHintChunks.push(code);\n        enqueueFlush(request);\n    }\n    function readThenable(thenable) {\n        if (\"fulfilled\" === thenable.status) return thenable.value;\n        if (\"rejected\" === thenable.status) throw thenable.reason;\n        throw thenable;\n    }\n    function createLazyWrapperAroundWakeable(wakeable) {\n        switch(wakeable.status){\n            case \"fulfilled\":\n            case \"rejected\":\n                break;\n            default:\n                \"string\" !== typeof wakeable.status && (wakeable.status = \"pending\", wakeable.then(function(fulfilledValue) {\n                    \"pending\" === wakeable.status && (wakeable.status = \"fulfilled\", wakeable.value = fulfilledValue);\n                }, function(error) {\n                    \"pending\" === wakeable.status && (wakeable.status = \"rejected\", wakeable.reason = error);\n                }));\n        }\n        var lazyType = {\n            $$typeof: REACT_LAZY_TYPE,\n            _payload: wakeable,\n            _init: readThenable\n        };\n        lazyType._debugInfo = wakeable._debugInfo || [];\n        return lazyType;\n    }\n    function callWithDebugContextInDEV(request, task, callback, arg) {\n        var componentDebugInfo = {\n            name: \"\",\n            env: task.environmentName,\n            key: null,\n            owner: task.debugOwner\n        };\n        componentDebugInfo.stack = null === task.debugStack ? null : filterStackTrace(request, task.debugStack, 1);\n        componentDebugInfo.debugStack = task.debugStack;\n        request = componentDebugInfo.debugTask = task.debugTask;\n        currentOwner = componentDebugInfo;\n        try {\n            return request ? request.run(callback.bind(null, arg)) : callback(arg);\n        } finally{\n            currentOwner = null;\n        }\n    }\n    function processServerComponentReturnValue(request, task, Component, result) {\n        if (\"object\" !== typeof result || null === result || isClientReference(result)) return result;\n        if (\"function\" === typeof result.then) return result.then(function(resolvedValue) {\n            \"object\" === typeof resolvedValue && null !== resolvedValue && resolvedValue.$$typeof === REACT_ELEMENT_TYPE && (resolvedValue._store.validated = 1);\n        }, voidHandler), \"fulfilled\" === result.status ? result.value : createLazyWrapperAroundWakeable(result);\n        result.$$typeof === REACT_ELEMENT_TYPE && (result._store.validated = 1);\n        var iteratorFn = getIteratorFn(result);\n        if (iteratorFn) {\n            var multiShot = _defineProperty({}, Symbol.iterator, function() {\n                var iterator = iteratorFn.call(result);\n                iterator !== result || \"[object GeneratorFunction]\" === Object.prototype.toString.call(Component) && \"[object Generator]\" === Object.prototype.toString.call(result) || callWithDebugContextInDEV(request, task, function() {\n                    console.error(\"Returning an Iterator from a Server Component is not supported since it cannot be looped over more than once. \");\n                });\n                return iterator;\n            });\n            multiShot._debugInfo = result._debugInfo;\n            return multiShot;\n        }\n        return \"function\" !== typeof result[ASYNC_ITERATOR] || \"function\" === typeof ReadableStream && result instanceof ReadableStream ? result : (multiShot = _defineProperty({}, ASYNC_ITERATOR, function() {\n            var iterator = result[ASYNC_ITERATOR]();\n            iterator !== result || \"[object AsyncGeneratorFunction]\" === Object.prototype.toString.call(Component) && \"[object AsyncGenerator]\" === Object.prototype.toString.call(result) || callWithDebugContextInDEV(request, task, function() {\n                console.error(\"Returning an AsyncIterator from a Server Component is not supported since it cannot be looped over more than once. \");\n            });\n            return iterator;\n        }), multiShot._debugInfo = result._debugInfo, multiShot);\n    }\n    function renderFunctionComponent(request, task, key, Component, props, validated) {\n        var prevThenableState = task.thenableState;\n        task.thenableState = null;\n        if (null === debugID) return outlineTask(request, task);\n        if (null !== prevThenableState) var componentDebugInfo = prevThenableState._componentDebugInfo;\n        else {\n            var componentDebugID = debugID;\n            componentDebugInfo = Component.displayName || Component.name || \"\";\n            var componentEnv = (0, request.environmentName)();\n            request.pendingChunks++;\n            componentDebugInfo = {\n                name: componentDebugInfo,\n                env: componentEnv,\n                key: key,\n                owner: task.debugOwner\n            };\n            componentDebugInfo.stack = null === task.debugStack ? null : filterStackTrace(request, task.debugStack, 1);\n            componentDebugInfo.props = props;\n            componentDebugInfo.debugStack = task.debugStack;\n            componentDebugInfo.debugTask = task.debugTask;\n            outlineComponentInfo(request, componentDebugInfo);\n            emitDebugChunk(request, componentDebugID, componentDebugInfo);\n            task.environmentName = componentEnv;\n            2 === validated && warnForMissingKey(request, key, componentDebugInfo, task.debugTask);\n        }\n        thenableIndexCounter = 0;\n        thenableState = prevThenableState;\n        currentComponentDebugInfo = componentDebugInfo;\n        props = supportsComponentStorage ? task.debugTask ? task.debugTask.run(componentStorage.run.bind(componentStorage, componentDebugInfo, callComponentInDEV, Component, props, componentDebugInfo)) : componentStorage.run(componentDebugInfo, callComponentInDEV, Component, props, componentDebugInfo) : task.debugTask ? task.debugTask.run(callComponentInDEV.bind(null, Component, props, componentDebugInfo)) : callComponentInDEV(Component, props, componentDebugInfo);\n        if (request.status === ABORTING) throw \"object\" !== typeof props || null === props || \"function\" !== typeof props.then || isClientReference(props) || props.then(voidHandler, voidHandler), null;\n        props = processServerComponentReturnValue(request, task, Component, props);\n        Component = task.keyPath;\n        validated = task.implicitSlot;\n        null !== key ? task.keyPath = null === Component ? key : Component + \",\" + key : null === Component && (task.implicitSlot = !0);\n        request = renderModelDestructive(request, task, emptyRoot, \"\", props);\n        task.keyPath = Component;\n        task.implicitSlot = validated;\n        return request;\n    }\n    function warnForMissingKey(request, key, componentDebugInfo, debugTask) {\n        function logKeyError() {\n            console.error('Each child in a list should have a unique \"key\" prop.%s%s See https://react.dev/link/warning-keys for more information.', \"\", \"\");\n        }\n        key = request.didWarnForKey;\n        null == key && (key = request.didWarnForKey = new WeakSet());\n        request = componentDebugInfo.owner;\n        if (null != request) {\n            if (key.has(request)) return;\n            key.add(request);\n        }\n        supportsComponentStorage ? debugTask ? debugTask.run(componentStorage.run.bind(componentStorage, componentDebugInfo, callComponentInDEV, logKeyError, null, componentDebugInfo)) : componentStorage.run(componentDebugInfo, callComponentInDEV, logKeyError, null, componentDebugInfo) : debugTask ? debugTask.run(callComponentInDEV.bind(null, logKeyError, null, componentDebugInfo)) : callComponentInDEV(logKeyError, null, componentDebugInfo);\n    }\n    function renderFragment(request, task, children) {\n        for(var i = 0; i < children.length; i++){\n            var child = children[i];\n            null === child || \"object\" !== typeof child || child.$$typeof !== REACT_ELEMENT_TYPE || null !== child.key || child._store.validated || (child._store.validated = 2);\n        }\n        if (null !== task.keyPath) return request = [\n            REACT_ELEMENT_TYPE,\n            REACT_FRAGMENT_TYPE,\n            task.keyPath,\n            {\n                children: children\n            },\n            null,\n            null,\n            0\n        ], task.implicitSlot ? [\n            request\n        ] : request;\n        if (i = children._debugInfo) {\n            if (null === debugID) return outlineTask(request, task);\n            forwardDebugInfo(request, debugID, i);\n            children = Array.from(children);\n        }\n        return children;\n    }\n    function renderAsyncFragment(request, task, children, getAsyncIterator) {\n        if (null !== task.keyPath) return request = [\n            REACT_ELEMENT_TYPE,\n            REACT_FRAGMENT_TYPE,\n            task.keyPath,\n            {\n                children: children\n            },\n            null,\n            null,\n            0\n        ], task.implicitSlot ? [\n            request\n        ] : request;\n        getAsyncIterator = getAsyncIterator.call(children);\n        return serializeAsyncIterable(request, task, children, getAsyncIterator);\n    }\n    function outlineTask(request, task) {\n        task = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.debugOwner, task.debugStack, task.debugTask);\n        retryTask(request, task);\n        return task.status === COMPLETED ? serializeByValueID(task.id) : \"$L\" + task.id.toString(16);\n    }\n    function renderElement(request, task, type, key, ref, props, validated) {\n        if (null !== ref && void 0 !== ref) throw Error(\"Refs cannot be used in Server Components, nor passed to Client Components.\");\n        jsxPropsParents.set(props, type);\n        \"object\" === typeof props.children && null !== props.children && jsxChildrenParents.set(props.children, type);\n        if (\"function\" !== typeof type || isClientReference(type) || type.$$typeof === TEMPORARY_REFERENCE_TAG) {\n            if (type === REACT_FRAGMENT_TYPE && null === key) return 2 === validated && (validated = {\n                name: \"Fragment\",\n                env: (0, request.environmentName)(),\n                key: key,\n                owner: task.debugOwner,\n                stack: null === task.debugStack ? null : filterStackTrace(request, task.debugStack, 1),\n                props: props,\n                debugStack: task.debugStack,\n                debugTask: task.debugTask\n            }, warnForMissingKey(request, key, validated, task.debugTask)), validated = task.implicitSlot, null === task.keyPath && (task.implicitSlot = !0), request = renderModelDestructive(request, task, emptyRoot, \"\", props.children), task.implicitSlot = validated, request;\n            if (null != type && \"object\" === typeof type && !isClientReference(type)) switch(type.$$typeof){\n                case REACT_LAZY_TYPE:\n                    type = callLazyInitInDEV(type);\n                    if (request.status === ABORTING) throw null;\n                    return renderElement(request, task, type, key, ref, props, validated);\n                case REACT_FORWARD_REF_TYPE:\n                    return renderFunctionComponent(request, task, key, type.render, props, validated);\n                case REACT_MEMO_TYPE:\n                    return renderElement(request, task, type.type, key, ref, props, validated);\n                case REACT_ELEMENT_TYPE:\n                    type._store.validated = 1;\n            }\n        } else return renderFunctionComponent(request, task, key, type, props, validated);\n        ref = task.keyPath;\n        null === key ? key = ref : null !== ref && (key = ref + \",\" + key);\n        null !== task.debugOwner && outlineComponentInfo(request, task.debugOwner);\n        request = [\n            REACT_ELEMENT_TYPE,\n            type,\n            key,\n            props,\n            task.debugOwner,\n            null === task.debugStack ? null : filterStackTrace(request, task.debugStack, 1),\n            validated\n        ];\n        task = task.implicitSlot && null !== key ? [\n            request\n        ] : request;\n        return task;\n    }\n    function pingTask(request, task) {\n        var pingedTasks = request.pingedTasks;\n        pingedTasks.push(task);\n        1 === pingedTasks.length && (request.flushScheduled = null !== request.destination, request.type === PRERENDER || request.status === OPENING ? scheduleMicrotask(function() {\n            return performWork(request);\n        }) : setTimeoutOrImmediate(function() {\n            return performWork(request);\n        }, 0));\n    }\n    function createTask(request, model, keyPath, implicitSlot, abortSet, debugOwner, debugStack, debugTask) {\n        request.pendingChunks++;\n        var id = request.nextChunkId++;\n        \"object\" !== typeof model || null === model || null !== keyPath || implicitSlot || request.writtenObjects.set(model, serializeByValueID(id));\n        var task = {\n            id: id,\n            status: PENDING$1,\n            model: model,\n            keyPath: keyPath,\n            implicitSlot: implicitSlot,\n            ping: function() {\n                return pingTask(request, task);\n            },\n            toJSON: function(parentPropertyName, value) {\n                var parent = this, originalValue = parent[parentPropertyName];\n                \"object\" !== typeof originalValue || originalValue === value || originalValue instanceof Date || callWithDebugContextInDEV(request, task, function() {\n                    \"Object\" !== objectName(originalValue) ? \"string\" === typeof jsxChildrenParents.get(parent) ? console.error(\"%s objects cannot be rendered as text children. Try formatting it using toString().%s\", objectName(originalValue), describeObjectForErrorMessage(parent, parentPropertyName)) : console.error(\"Only plain objects can be passed to Client Components from Server Components. %s objects are not supported.%s\", objectName(originalValue), describeObjectForErrorMessage(parent, parentPropertyName)) : console.error(\"Only plain objects can be passed to Client Components from Server Components. Objects with toJSON methods are not supported. Convert it manually to a simple value before passing it to props.%s\", describeObjectForErrorMessage(parent, parentPropertyName));\n                });\n                return renderModel(request, task, parent, parentPropertyName, value);\n            },\n            thenableState: null\n        };\n        task.environmentName = request.environmentName();\n        task.debugOwner = debugOwner;\n        task.debugStack = debugStack;\n        task.debugTask = debugTask;\n        abortSet.add(task);\n        return task;\n    }\n    function serializeByValueID(id) {\n        return \"$\" + id.toString(16);\n    }\n    function serializeNumber(number) {\n        return Number.isFinite(number) ? 0 === number && -Infinity === 1 / number ? \"$-0\" : number : Infinity === number ? \"$Infinity\" : -Infinity === number ? \"$-Infinity\" : \"$NaN\";\n    }\n    function encodeReferenceChunk(request, id, reference) {\n        request = stringify(reference);\n        id = id.toString(16) + \":\" + request + \"\\n\";\n        return stringToChunk(id);\n    }\n    function serializeClientReference(request, parent, parentPropertyName, clientReference) {\n        var clientReferenceKey = clientReference.$$async ? clientReference.$$id + \"#async\" : clientReference.$$id, writtenClientReferences = request.writtenClientReferences, existingId = writtenClientReferences.get(clientReferenceKey);\n        if (void 0 !== existingId) return parent[0] === REACT_ELEMENT_TYPE && \"1\" === parentPropertyName ? \"$L\" + existingId.toString(16) : serializeByValueID(existingId);\n        try {\n            var config = request.bundlerConfig, modulePath = clientReference.$$id;\n            existingId = \"\";\n            var resolvedModuleData = config[modulePath];\n            if (resolvedModuleData) existingId = resolvedModuleData.name;\n            else {\n                var idx = modulePath.lastIndexOf(\"#\");\n                -1 !== idx && (existingId = modulePath.slice(idx + 1), resolvedModuleData = config[modulePath.slice(0, idx)]);\n                if (!resolvedModuleData) throw Error('Could not find the module \"' + modulePath + '\" in the React Client Manifest. This is probably a bug in the React Server Components bundler.');\n            }\n            if (!0 === resolvedModuleData.async && !0 === clientReference.$$async) throw Error('The module \"' + modulePath + '\" is marked as an async ESM module but was loaded as a CJS proxy. This is probably a bug in the React Server Components bundler.');\n            var clientReferenceMetadata = !0 === resolvedModuleData.async || !0 === clientReference.$$async ? [\n                resolvedModuleData.id,\n                resolvedModuleData.chunks,\n                existingId,\n                1\n            ] : [\n                resolvedModuleData.id,\n                resolvedModuleData.chunks,\n                existingId\n            ];\n            request.pendingChunks++;\n            var importId = request.nextChunkId++, json = stringify(clientReferenceMetadata), row = importId.toString(16) + \":I\" + json + \"\\n\", processedChunk = stringToChunk(row);\n            request.completedImportChunks.push(processedChunk);\n            writtenClientReferences.set(clientReferenceKey, importId);\n            return parent[0] === REACT_ELEMENT_TYPE && \"1\" === parentPropertyName ? \"$L\" + importId.toString(16) : serializeByValueID(importId);\n        } catch (x) {\n            return request.pendingChunks++, parent = request.nextChunkId++, parentPropertyName = logRecoverableError(request, x, null), emitErrorChunk(request, parent, parentPropertyName, x), serializeByValueID(parent);\n        }\n    }\n    function outlineModel(request, value) {\n        value = createTask(request, value, null, !1, request.abortableTasks, null, null, null);\n        retryTask(request, value);\n        return value.id;\n    }\n    function serializeServerReference(request, serverReference) {\n        var writtenServerReferences = request.writtenServerReferences, existingId = writtenServerReferences.get(serverReference);\n        if (void 0 !== existingId) return \"$F\" + existingId.toString(16);\n        existingId = serverReference.$$bound;\n        existingId = null === existingId ? null : Promise.resolve(existingId);\n        var id = serverReference.$$id, location = null, error = serverReference.$$location;\n        error && (error = parseStackTrace(error, 1), 0 < error.length && (location = error[0]));\n        existingId = null !== location ? {\n            id: id,\n            bound: existingId,\n            name: \"function\" === typeof serverReference ? serverReference.name : \"\",\n            env: (0, request.environmentName)(),\n            location: location\n        } : {\n            id: id,\n            bound: existingId\n        };\n        request = outlineModel(request, existingId);\n        writtenServerReferences.set(serverReference, request);\n        return \"$F\" + request.toString(16);\n    }\n    function serializeLargeTextString(request, text) {\n        request.pendingChunks++;\n        var textId = request.nextChunkId++;\n        emitTextChunk(request, textId, text);\n        return serializeByValueID(textId);\n    }\n    function serializeMap(request, map) {\n        map = Array.from(map);\n        return \"$Q\" + outlineModel(request, map).toString(16);\n    }\n    function serializeFormData(request, formData) {\n        formData = Array.from(formData.entries());\n        return \"$K\" + outlineModel(request, formData).toString(16);\n    }\n    function serializeSet(request, set) {\n        set = Array.from(set);\n        return \"$W\" + outlineModel(request, set).toString(16);\n    }\n    function serializeTypedArray(request, tag, typedArray) {\n        request.pendingChunks++;\n        var bufferId = request.nextChunkId++;\n        emitTypedArrayChunk(request, bufferId, tag, typedArray);\n        return serializeByValueID(bufferId);\n    }\n    function serializeBlob(request, blob) {\n        function progress(entry) {\n            if (!aborted) if (entry.done) request.abortListeners.delete(abortBlob), aborted = !0, pingTask(request, newTask);\n            else return model.push(entry.value), reader.read().then(progress).catch(error);\n        }\n        function error(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortBlob), erroredTask(request, newTask, reason), enqueueFlush(request), reader.cancel(reason).then(error, error));\n        }\n        function abortBlob(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortBlob), erroredTask(request, newTask, reason), enqueueFlush(request), reader.cancel(reason).then(error, error));\n        }\n        var model = [\n            blob.type\n        ], newTask = createTask(request, model, null, !1, request.abortableTasks, null, null, null), reader = blob.stream().getReader(), aborted = !1;\n        request.abortListeners.add(abortBlob);\n        reader.read().then(progress).catch(error);\n        return \"$B\" + newTask.id.toString(16);\n    }\n    function renderModel(request, task, parent, key, value) {\n        var prevKeyPath = task.keyPath, prevImplicitSlot = task.implicitSlot;\n        try {\n            return renderModelDestructive(request, task, parent, key, value);\n        } catch (thrownValue) {\n            parent = task.model;\n            parent = \"object\" === typeof parent && null !== parent && (parent.$$typeof === REACT_ELEMENT_TYPE || parent.$$typeof === REACT_LAZY_TYPE);\n            if (request.status === ABORTING) return task.status = ABORTED, task = request.fatalError, parent ? \"$L\" + task.toString(16) : serializeByValueID(task);\n            key = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;\n            if (\"object\" === typeof key && null !== key && \"function\" === typeof key.then) return request = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.debugOwner, task.debugStack, task.debugTask), value = request.ping, key.then(value, value), request.thenableState = getThenableStateAfterSuspending(), task.keyPath = prevKeyPath, task.implicitSlot = prevImplicitSlot, parent ? \"$L\" + request.id.toString(16) : serializeByValueID(request.id);\n            task.keyPath = prevKeyPath;\n            task.implicitSlot = prevImplicitSlot;\n            request.pendingChunks++;\n            prevKeyPath = request.nextChunkId++;\n            task = logRecoverableError(request, key, task);\n            emitErrorChunk(request, prevKeyPath, task, key);\n            return parent ? \"$L\" + prevKeyPath.toString(16) : serializeByValueID(prevKeyPath);\n        }\n    }\n    function renderModelDestructive(request, task, parent, parentPropertyName, value) {\n        task.model = value;\n        if (value === REACT_ELEMENT_TYPE) return \"$\";\n        if (null === value) return null;\n        if (\"object\" === typeof value) {\n            switch(value.$$typeof){\n                case REACT_ELEMENT_TYPE:\n                    var elementReference = null, _writtenObjects = request.writtenObjects;\n                    if (null === task.keyPath && !task.implicitSlot) {\n                        var _existingReference = _writtenObjects.get(value);\n                        if (void 0 !== _existingReference) if (modelRoot === value) modelRoot = null;\n                        else return _existingReference;\n                        else -1 === parentPropertyName.indexOf(\":\") && (_existingReference = _writtenObjects.get(parent), void 0 !== _existingReference && (elementReference = _existingReference + \":\" + parentPropertyName, _writtenObjects.set(value, elementReference)));\n                    }\n                    if (_existingReference = value._debugInfo) {\n                        if (null === debugID) return outlineTask(request, task);\n                        forwardDebugInfo(request, debugID, _existingReference);\n                    }\n                    _existingReference = value.props;\n                    var refProp = _existingReference.ref;\n                    task.debugOwner = value._owner;\n                    task.debugStack = value._debugStack;\n                    task.debugTask = value._debugTask;\n                    request = renderElement(request, task, value.type, value.key, void 0 !== refProp ? refProp : null, _existingReference, value._store.validated);\n                    \"object\" === typeof request && null !== request && null !== elementReference && (_writtenObjects.has(request) || _writtenObjects.set(request, elementReference));\n                    return request;\n                case REACT_LAZY_TYPE:\n                    task.thenableState = null;\n                    elementReference = callLazyInitInDEV(value);\n                    if (request.status === ABORTING) throw null;\n                    if (_writtenObjects = value._debugInfo) {\n                        if (null === debugID) return outlineTask(request, task);\n                        forwardDebugInfo(request, debugID, _writtenObjects);\n                    }\n                    return renderModelDestructive(request, task, emptyRoot, \"\", elementReference);\n                case REACT_LEGACY_ELEMENT_TYPE:\n                    throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\\n- Multiple copies of the \"react\" package is used.\\n- A library pre-bundled an old copy of \"react\" or \"react/jsx-runtime\".\\n- A compiler tries to \"inline\" JSX instead of using the runtime.');\n            }\n            if (isClientReference(value)) return serializeClientReference(request, parent, parentPropertyName, value);\n            if (void 0 !== request.temporaryReferences && (elementReference = request.temporaryReferences.get(value), void 0 !== elementReference)) return \"$T\" + elementReference;\n            elementReference = request.writtenObjects;\n            _writtenObjects = elementReference.get(value);\n            if (\"function\" === typeof value.then) {\n                if (void 0 !== _writtenObjects) {\n                    if (null !== task.keyPath || task.implicitSlot) return \"$@\" + serializeThenable(request, task, value).toString(16);\n                    if (modelRoot === value) modelRoot = null;\n                    else return _writtenObjects;\n                }\n                request = \"$@\" + serializeThenable(request, task, value).toString(16);\n                elementReference.set(value, request);\n                return request;\n            }\n            if (void 0 !== _writtenObjects) if (modelRoot === value) modelRoot = null;\n            else return _writtenObjects;\n            else if (-1 === parentPropertyName.indexOf(\":\") && (_writtenObjects = elementReference.get(parent), void 0 !== _writtenObjects)) {\n                _existingReference = parentPropertyName;\n                if (isArrayImpl(parent) && parent[0] === REACT_ELEMENT_TYPE) switch(parentPropertyName){\n                    case \"1\":\n                        _existingReference = \"type\";\n                        break;\n                    case \"2\":\n                        _existingReference = \"key\";\n                        break;\n                    case \"3\":\n                        _existingReference = \"props\";\n                        break;\n                    case \"4\":\n                        _existingReference = \"_owner\";\n                }\n                elementReference.set(value, _writtenObjects + \":\" + _existingReference);\n            }\n            if (isArrayImpl(value)) return renderFragment(request, task, value);\n            if (value instanceof Map) return serializeMap(request, value);\n            if (value instanceof Set) return serializeSet(request, value);\n            if (\"function\" === typeof FormData && value instanceof FormData) return serializeFormData(request, value);\n            if (value instanceof Error) return serializeErrorValue(request, value);\n            if (value instanceof ArrayBuffer) return serializeTypedArray(request, \"A\", new Uint8Array(value));\n            if (value instanceof Int8Array) return serializeTypedArray(request, \"O\", value);\n            if (value instanceof Uint8Array) return serializeTypedArray(request, \"o\", value);\n            if (value instanceof Uint8ClampedArray) return serializeTypedArray(request, \"U\", value);\n            if (value instanceof Int16Array) return serializeTypedArray(request, \"S\", value);\n            if (value instanceof Uint16Array) return serializeTypedArray(request, \"s\", value);\n            if (value instanceof Int32Array) return serializeTypedArray(request, \"L\", value);\n            if (value instanceof Uint32Array) return serializeTypedArray(request, \"l\", value);\n            if (value instanceof Float32Array) return serializeTypedArray(request, \"G\", value);\n            if (value instanceof Float64Array) return serializeTypedArray(request, \"g\", value);\n            if (value instanceof BigInt64Array) return serializeTypedArray(request, \"M\", value);\n            if (value instanceof BigUint64Array) return serializeTypedArray(request, \"m\", value);\n            if (value instanceof DataView) return serializeTypedArray(request, \"V\", value);\n            if (\"function\" === typeof Blob && value instanceof Blob) return serializeBlob(request, value);\n            if (elementReference = getIteratorFn(value)) return elementReference = elementReference.call(value), elementReference === value ? \"$i\" + outlineModel(request, Array.from(elementReference)).toString(16) : renderFragment(request, task, Array.from(elementReference));\n            if (\"function\" === typeof ReadableStream && value instanceof ReadableStream) return serializeReadableStream(request, task, value);\n            elementReference = value[ASYNC_ITERATOR];\n            if (\"function\" === typeof elementReference) return renderAsyncFragment(request, task, value, elementReference);\n            if (value instanceof Date) return \"$D\" + value.toJSON();\n            elementReference = getPrototypeOf(value);\n            if (elementReference !== ObjectPrototype && (null === elementReference || null !== getPrototypeOf(elementReference))) throw Error(\"Only plain objects, and a few built-ins, can be passed to Client Components from Server Components. Classes or null prototypes are not supported.\" + describeObjectForErrorMessage(parent, parentPropertyName));\n            if (\"Object\" !== objectName(value)) callWithDebugContextInDEV(request, task, function() {\n                console.error(\"Only plain objects can be passed to Client Components from Server Components. %s objects are not supported.%s\", objectName(value), describeObjectForErrorMessage(parent, parentPropertyName));\n            });\n            else if (!isSimpleObject(value)) callWithDebugContextInDEV(request, task, function() {\n                console.error(\"Only plain objects can be passed to Client Components from Server Components. Classes or other objects with methods are not supported.%s\", describeObjectForErrorMessage(parent, parentPropertyName));\n            });\n            else if (Object.getOwnPropertySymbols) {\n                var symbols = Object.getOwnPropertySymbols(value);\n                0 < symbols.length && callWithDebugContextInDEV(request, task, function() {\n                    console.error(\"Only plain objects can be passed to Client Components from Server Components. Objects with symbol properties like %s are not supported.%s\", symbols[0].description, describeObjectForErrorMessage(parent, parentPropertyName));\n                });\n            }\n            return value;\n        }\n        if (\"string\" === typeof value) return \"Z\" === value[value.length - 1] && parent[parentPropertyName] instanceof Date ? \"$D\" + value : 1024 <= value.length && null !== byteLengthOfChunk ? serializeLargeTextString(request, value) : \"$\" === value[0] ? \"$\" + value : value;\n        if (\"boolean\" === typeof value) return value;\n        if (\"number\" === typeof value) return serializeNumber(value);\n        if (\"undefined\" === typeof value) return \"$undefined\";\n        if (\"function\" === typeof value) {\n            if (isClientReference(value)) return serializeClientReference(request, parent, parentPropertyName, value);\n            if (value.$$typeof === SERVER_REFERENCE_TAG) return serializeServerReference(request, value);\n            if (void 0 !== request.temporaryReferences && (request = request.temporaryReferences.get(value), void 0 !== request)) return \"$T\" + request;\n            if (value.$$typeof === TEMPORARY_REFERENCE_TAG) throw Error(\"Could not reference an opaque temporary reference. This is likely due to misconfiguring the temporaryReferences options on the server.\");\n            if (/^on[A-Z]/.test(parentPropertyName)) throw Error(\"Event handlers cannot be passed to Client Component props.\" + describeObjectForErrorMessage(parent, parentPropertyName) + \"\\nIf you need interactivity, consider converting part of this to a Client Component.\");\n            if (jsxChildrenParents.has(parent) || jsxPropsParents.has(parent) && \"children\" === parentPropertyName) throw request = value.displayName || value.name || \"Component\", Error(\"Functions are not valid as a child of Client Components. This may happen if you return \" + request + \" instead of <\" + request + \" /> from render. Or maybe you meant to call this function rather than return it.\" + describeObjectForErrorMessage(parent, parentPropertyName));\n            throw Error('Functions cannot be passed directly to Client Components unless you explicitly expose it by marking it with \"use server\". Or maybe you meant to call this function rather than return it.' + describeObjectForErrorMessage(parent, parentPropertyName));\n        }\n        if (\"symbol\" === typeof value) {\n            task = request.writtenSymbols;\n            elementReference = task.get(value);\n            if (void 0 !== elementReference) return serializeByValueID(elementReference);\n            elementReference = value.description;\n            if (Symbol.for(elementReference) !== value) throw Error(\"Only global symbols received from Symbol.for(...) can be passed to Client Components. The symbol Symbol.for(\" + (value.description + \") cannot be found among global symbols.\") + describeObjectForErrorMessage(parent, parentPropertyName));\n            request.pendingChunks++;\n            _writtenObjects = request.nextChunkId++;\n            emitSymbolChunk(request, _writtenObjects, elementReference);\n            task.set(value, _writtenObjects);\n            return serializeByValueID(_writtenObjects);\n        }\n        if (\"bigint\" === typeof value) return \"$n\" + value.toString(10);\n        throw Error(\"Type \" + typeof value + \" is not supported in Client Component props.\" + describeObjectForErrorMessage(parent, parentPropertyName));\n    }\n    function logRecoverableError(request, error, task) {\n        var prevRequest = currentRequest;\n        currentRequest = null;\n        try {\n            var onError = request.onError;\n            var errorDigest = null !== task ? supportsRequestStorage ? requestStorage.run(void 0, callWithDebugContextInDEV, request, task, onError, error) : callWithDebugContextInDEV(request, task, onError, error) : supportsRequestStorage ? requestStorage.run(void 0, onError, error) : onError(error);\n        } finally{\n            currentRequest = prevRequest;\n        }\n        if (null != errorDigest && \"string\" !== typeof errorDigest) throw Error('onError returned something with a type other than \"string\". onError should return a string and may return null or undefined but must not return anything else. It received something of type \"' + typeof errorDigest + '\" instead');\n        return errorDigest || \"\";\n    }\n    function fatalError(request, error) {\n        var onFatalError = request.onFatalError;\n        onFatalError(error);\n        null !== request.destination ? (request.status = CLOSED, closeWithError(request.destination, error)) : (request.status = CLOSING, request.fatalError = error);\n    }\n    function serializeErrorValue(request, error) {\n        var name = \"Error\", env = (0, request.environmentName)();\n        try {\n            name = error.name;\n            var message = String(error.message);\n            var stack = filterStackTrace(request, error, 0);\n            var errorEnv = error.environmentName;\n            \"string\" === typeof errorEnv && (env = errorEnv);\n        } catch (x) {\n            message = \"An error occurred but serializing the error message failed.\", stack = [];\n        }\n        return \"$Z\" + outlineModel(request, {\n            name: name,\n            message: message,\n            stack: stack,\n            env: env\n        }).toString(16);\n    }\n    function emitErrorChunk(request, id, digest, error) {\n        var name = \"Error\", env = (0, request.environmentName)();\n        try {\n            if (error instanceof Error) {\n                name = error.name;\n                var message = String(error.message);\n                var stack = filterStackTrace(request, error, 0);\n                var errorEnv = error.environmentName;\n                \"string\" === typeof errorEnv && (env = errorEnv);\n            } else message = \"object\" === typeof error && null !== error ? describeObjectForErrorMessage(error) : String(error), stack = [];\n        } catch (x) {\n            message = \"An error occurred but serializing the error message failed.\", stack = [];\n        }\n        digest = {\n            digest: digest,\n            name: name,\n            message: message,\n            stack: stack,\n            env: env\n        };\n        id = id.toString(16) + \":E\" + stringify(digest) + \"\\n\";\n        id = stringToChunk(id);\n        request.completedErrorChunks.push(id);\n    }\n    function emitSymbolChunk(request, id, name) {\n        id = encodeReferenceChunk(request, id, \"$S\" + name);\n        request.completedImportChunks.push(id);\n    }\n    function emitModelChunk(request, id, json) {\n        id = id.toString(16) + \":\" + json + \"\\n\";\n        id = stringToChunk(id);\n        request.completedRegularChunks.push(id);\n    }\n    function emitDebugChunk(request, id, debugInfo) {\n        var counter = {\n            objectLimit: 500\n        };\n        debugInfo = stringify(debugInfo, function(parentPropertyName, value) {\n            return renderConsoleValue(request, counter, this, parentPropertyName, value);\n        });\n        id = id.toString(16) + \":D\" + debugInfo + \"\\n\";\n        id = stringToChunk(id);\n        request.completedRegularChunks.push(id);\n    }\n    function outlineComponentInfo(request, componentInfo) {\n        if (!request.writtenObjects.has(componentInfo)) {\n            null != componentInfo.owner && outlineComponentInfo(request, componentInfo.owner);\n            var objectLimit = 10;\n            null != componentInfo.stack && (objectLimit += componentInfo.stack.length);\n            objectLimit = {\n                objectLimit: objectLimit\n            };\n            var componentDebugInfo = {\n                name: componentInfo.name,\n                env: componentInfo.env,\n                key: componentInfo.key,\n                owner: componentInfo.owner\n            };\n            componentDebugInfo.stack = componentInfo.stack;\n            componentDebugInfo.props = componentInfo.props;\n            objectLimit = outlineConsoleValue(request, objectLimit, componentDebugInfo);\n            request.writtenObjects.set(componentInfo, serializeByValueID(objectLimit));\n        }\n    }\n    function emitTypedArrayChunk(request, id, tag, typedArray) {\n        request.pendingChunks++;\n        var buffer = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n        typedArray = 2048 < typedArray.byteLength ? buffer.slice() : buffer;\n        buffer = typedArray.byteLength;\n        id = id.toString(16) + \":\" + tag + buffer.toString(16) + \",\";\n        id = stringToChunk(id);\n        request.completedRegularChunks.push(id, typedArray);\n    }\n    function emitTextChunk(request, id, text) {\n        if (null === byteLengthOfChunk) throw Error(\"Existence of byteLengthOfChunk should have already been checked. This is a bug in React.\");\n        request.pendingChunks++;\n        text = stringToChunk(text);\n        var binaryLength = text.byteLength;\n        id = id.toString(16) + \":T\" + binaryLength.toString(16) + \",\";\n        id = stringToChunk(id);\n        request.completedRegularChunks.push(id, text);\n    }\n    function renderConsoleValue(request, counter, parent, parentPropertyName, value) {\n        if (null === value) return null;\n        if (value === REACT_ELEMENT_TYPE) return \"$\";\n        if (\"object\" === typeof value) {\n            if (isClientReference(value)) return serializeClientReference(request, parent, parentPropertyName, value);\n            if (void 0 !== request.temporaryReferences && (parent = request.temporaryReferences.get(value), void 0 !== parent)) return \"$T\" + parent;\n            parent = request.writtenObjects.get(value);\n            if (void 0 !== parent) return parent;\n            if (0 >= counter.objectLimit && !doNotLimit.has(value)) return \"$Y\";\n            counter.objectLimit--;\n            switch(value.$$typeof){\n                case REACT_ELEMENT_TYPE:\n                    null != value._owner && outlineComponentInfo(request, value._owner);\n                    \"object\" === typeof value.type && null !== value.type && doNotLimit.add(value.type);\n                    \"object\" === typeof value.key && null !== value.key && doNotLimit.add(value.key);\n                    doNotLimit.add(value.props);\n                    null !== value._owner && doNotLimit.add(value._owner);\n                    counter = null;\n                    if (null != value._debugStack) for(counter = filterStackTrace(request, value._debugStack, 1), doNotLimit.add(counter), request = 0; request < counter.length; request++)doNotLimit.add(counter[request]);\n                    return [\n                        REACT_ELEMENT_TYPE,\n                        value.type,\n                        value.key,\n                        value.props,\n                        value._owner,\n                        counter,\n                        value._store.validated\n                    ];\n            }\n            if (\"function\" === typeof value.then) {\n                switch(value.status){\n                    case \"fulfilled\":\n                        return \"$@\" + outlineConsoleValue(request, counter, value.value).toString(16);\n                    case \"rejected\":\n                        return counter = value.reason, request.pendingChunks++, value = request.nextChunkId++, emitErrorChunk(request, value, \"\", counter), \"$@\" + value.toString(16);\n                }\n                return \"$@\";\n            }\n            if (isArrayImpl(value)) return value;\n            if (value instanceof Map) {\n                value = Array.from(value);\n                counter.objectLimit++;\n                for(parent = 0; parent < value.length; parent++){\n                    var entry = value[parent];\n                    doNotLimit.add(entry);\n                    parentPropertyName = entry[0];\n                    entry = entry[1];\n                    \"object\" === typeof parentPropertyName && null !== parentPropertyName && doNotLimit.add(parentPropertyName);\n                    \"object\" === typeof entry && null !== entry && doNotLimit.add(entry);\n                }\n                return \"$Q\" + outlineConsoleValue(request, counter, value).toString(16);\n            }\n            if (value instanceof Set) {\n                value = Array.from(value);\n                counter.objectLimit++;\n                for(parent = 0; parent < value.length; parent++)parentPropertyName = value[parent], \"object\" === typeof parentPropertyName && null !== parentPropertyName && doNotLimit.add(parentPropertyName);\n                return \"$W\" + outlineConsoleValue(request, counter, value).toString(16);\n            }\n            return \"function\" === typeof FormData && value instanceof FormData ? serializeFormData(request, value) : value instanceof Error ? serializeErrorValue(request, value) : value instanceof ArrayBuffer ? serializeTypedArray(request, \"A\", new Uint8Array(value)) : value instanceof Int8Array ? serializeTypedArray(request, \"O\", value) : value instanceof Uint8Array ? serializeTypedArray(request, \"o\", value) : value instanceof Uint8ClampedArray ? serializeTypedArray(request, \"U\", value) : value instanceof Int16Array ? serializeTypedArray(request, \"S\", value) : value instanceof Uint16Array ? serializeTypedArray(request, \"s\", value) : value instanceof Int32Array ? serializeTypedArray(request, \"L\", value) : value instanceof Uint32Array ? serializeTypedArray(request, \"l\", value) : value instanceof Float32Array ? serializeTypedArray(request, \"G\", value) : value instanceof Float64Array ? serializeTypedArray(request, \"g\", value) : value instanceof BigInt64Array ? serializeTypedArray(request, \"M\", value) : value instanceof BigUint64Array ? serializeTypedArray(request, \"m\", value) : value instanceof DataView ? serializeTypedArray(request, \"V\", value) : \"function\" === typeof Blob && value instanceof Blob ? serializeBlob(request, value) : getIteratorFn(value) ? Array.from(value) : value;\n        }\n        if (\"string\" === typeof value) return \"Z\" === value[value.length - 1] && parent[parentPropertyName] instanceof Date ? \"$D\" + value : 1024 <= value.length ? serializeLargeTextString(request, value) : \"$\" === value[0] ? \"$\" + value : value;\n        if (\"boolean\" === typeof value) return value;\n        if (\"number\" === typeof value) return serializeNumber(value);\n        if (\"undefined\" === typeof value) return \"$undefined\";\n        if (\"function\" === typeof value) return isClientReference(value) ? serializeClientReference(request, parent, parentPropertyName, value) : void 0 !== request.temporaryReferences && (request = request.temporaryReferences.get(value), void 0 !== request) ? \"$T\" + request : \"$E(\" + (Function.prototype.toString.call(value) + \")\");\n        if (\"symbol\" === typeof value) {\n            counter = request.writtenSymbols.get(value);\n            if (void 0 !== counter) return serializeByValueID(counter);\n            counter = value.description;\n            request.pendingChunks++;\n            value = request.nextChunkId++;\n            emitSymbolChunk(request, value, counter);\n            return serializeByValueID(value);\n        }\n        return \"bigint\" === typeof value ? \"$n\" + value.toString(10) : value instanceof Date ? \"$D\" + value.toJSON() : \"unknown type \" + typeof value;\n    }\n    function outlineConsoleValue(request, counter, model) {\n        function replacer(parentPropertyName, value) {\n            try {\n                return renderConsoleValue(request, counter, this, parentPropertyName, value);\n            } catch (x) {\n                return \"Unknown Value: React could not send it from the server.\\n\" + x.message;\n            }\n        }\n        \"object\" === typeof model && null !== model && doNotLimit.add(model);\n        try {\n            var json = stringify(model, replacer);\n        } catch (x) {\n            json = stringify(\"Unknown Value: React could not send it from the server.\\n\" + x.message);\n        }\n        request.pendingChunks++;\n        model = request.nextChunkId++;\n        json = model.toString(16) + \":\" + json + \"\\n\";\n        json = stringToChunk(json);\n        request.completedRegularChunks.push(json);\n        return model;\n    }\n    function emitConsoleChunk(request, methodName, owner, stackTrace, args) {\n        function replacer(parentPropertyName, value) {\n            try {\n                return renderConsoleValue(request, counter, this, parentPropertyName, value);\n            } catch (x) {\n                return \"Unknown Value: React could not send it from the server.\\n\" + x.message;\n            }\n        }\n        var counter = {\n            objectLimit: 500\n        };\n        null != owner && outlineComponentInfo(request, owner);\n        var env = (0, request.environmentName)(), payload = [\n            methodName,\n            stackTrace,\n            owner,\n            env\n        ];\n        payload.push.apply(payload, args);\n        try {\n            var json = stringify(payload, replacer);\n        } catch (x) {\n            json = stringify([\n                methodName,\n                stackTrace,\n                owner,\n                env,\n                \"Unknown Value: React could not send it from the server.\",\n                x\n            ], replacer);\n        }\n        methodName = stringToChunk(\":W\" + json + \"\\n\");\n        request.completedRegularChunks.push(methodName);\n    }\n    function forwardDebugInfo(request, id, debugInfo) {\n        for(var i = 0; i < debugInfo.length; i++)\"number\" !== typeof debugInfo[i].time && (request.pendingChunks++, \"string\" === typeof debugInfo[i].name && outlineComponentInfo(request, debugInfo[i]), emitDebugChunk(request, id, debugInfo[i]));\n    }\n    function emitChunk(request, task, value) {\n        var id = task.id;\n        \"string\" === typeof value && null !== byteLengthOfChunk ? emitTextChunk(request, id, value) : value instanceof ArrayBuffer ? emitTypedArrayChunk(request, id, \"A\", new Uint8Array(value)) : value instanceof Int8Array ? emitTypedArrayChunk(request, id, \"O\", value) : value instanceof Uint8Array ? emitTypedArrayChunk(request, id, \"o\", value) : value instanceof Uint8ClampedArray ? emitTypedArrayChunk(request, id, \"U\", value) : value instanceof Int16Array ? emitTypedArrayChunk(request, id, \"S\", value) : value instanceof Uint16Array ? emitTypedArrayChunk(request, id, \"s\", value) : value instanceof Int32Array ? emitTypedArrayChunk(request, id, \"L\", value) : value instanceof Uint32Array ? emitTypedArrayChunk(request, id, \"l\", value) : value instanceof Float32Array ? emitTypedArrayChunk(request, id, \"G\", value) : value instanceof Float64Array ? emitTypedArrayChunk(request, id, \"g\", value) : value instanceof BigInt64Array ? emitTypedArrayChunk(request, id, \"M\", value) : value instanceof BigUint64Array ? emitTypedArrayChunk(request, id, \"m\", value) : value instanceof DataView ? emitTypedArrayChunk(request, id, \"V\", value) : (value = stringify(value, task.toJSON), emitModelChunk(request, task.id, value));\n    }\n    function erroredTask(request, task, error) {\n        request.abortableTasks.delete(task);\n        task.status = ERRORED$1;\n        var digest = logRecoverableError(request, error, task);\n        emitErrorChunk(request, task.id, digest, error);\n    }\n    function retryTask(request, task) {\n        if (task.status === PENDING$1) {\n            var prevDebugID = debugID;\n            task.status = RENDERING;\n            try {\n                modelRoot = task.model;\n                debugID = task.id;\n                var resolvedModel = renderModelDestructive(request, task, emptyRoot, \"\", task.model);\n                debugID = null;\n                modelRoot = resolvedModel;\n                task.keyPath = null;\n                task.implicitSlot = !1;\n                var currentEnv = (0, request.environmentName)();\n                currentEnv !== task.environmentName && (request.pendingChunks++, emitDebugChunk(request, task.id, {\n                    env: currentEnv\n                }));\n                if (\"object\" === typeof resolvedModel && null !== resolvedModel) request.writtenObjects.set(resolvedModel, serializeByValueID(task.id)), emitChunk(request, task, resolvedModel);\n                else {\n                    var json = stringify(resolvedModel);\n                    emitModelChunk(request, task.id, json);\n                }\n                request.abortableTasks.delete(task);\n                task.status = COMPLETED;\n            } catch (thrownValue) {\n                if (request.status === ABORTING) {\n                    request.abortableTasks.delete(task);\n                    task.status = ABORTED;\n                    var model = stringify(serializeByValueID(request.fatalError));\n                    emitModelChunk(request, task.id, model);\n                } else {\n                    var x = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;\n                    if (\"object\" === typeof x && null !== x && \"function\" === typeof x.then) {\n                        task.status = PENDING$1;\n                        task.thenableState = getThenableStateAfterSuspending();\n                        var ping = task.ping;\n                        x.then(ping, ping);\n                    } else erroredTask(request, task, x);\n                }\n            } finally{\n                debugID = prevDebugID;\n            }\n        }\n    }\n    function tryStreamTask(request, task) {\n        var prevDebugID = debugID;\n        debugID = null;\n        try {\n            emitChunk(request, task, task.model);\n        } finally{\n            debugID = prevDebugID;\n        }\n    }\n    function performWork(request) {\n        var prevDispatcher = ReactSharedInternalsServer.H;\n        ReactSharedInternalsServer.H = HooksDispatcher;\n        var prevRequest = currentRequest;\n        currentRequest$1 = currentRequest = request;\n        var hadAbortableTasks = 0 < request.abortableTasks.size;\n        try {\n            var pingedTasks = request.pingedTasks;\n            request.pingedTasks = [];\n            for(var i = 0; i < pingedTasks.length; i++)retryTask(request, pingedTasks[i]);\n            null !== request.destination && flushCompletedChunks(request, request.destination);\n            if (hadAbortableTasks && 0 === request.abortableTasks.size) {\n                var onAllReady = request.onAllReady;\n                onAllReady();\n            }\n        } catch (error) {\n            logRecoverableError(request, error, null), fatalError(request, error);\n        } finally{\n            ReactSharedInternalsServer.H = prevDispatcher, currentRequest$1 = null, currentRequest = prevRequest;\n        }\n    }\n    function flushCompletedChunks(request, destination) {\n        currentView = new Uint8Array(2048);\n        writtenBytes = 0;\n        try {\n            for(var importsChunks = request.completedImportChunks, i = 0; i < importsChunks.length; i++)if (request.pendingChunks--, !writeChunkAndReturn(destination, importsChunks[i])) {\n                request.destination = null;\n                i++;\n                break;\n            }\n            importsChunks.splice(0, i);\n            var hintChunks = request.completedHintChunks;\n            for(i = 0; i < hintChunks.length; i++)if (!writeChunkAndReturn(destination, hintChunks[i])) {\n                request.destination = null;\n                i++;\n                break;\n            }\n            hintChunks.splice(0, i);\n            var regularChunks = request.completedRegularChunks;\n            for(i = 0; i < regularChunks.length; i++)if (request.pendingChunks--, !writeChunkAndReturn(destination, regularChunks[i])) {\n                request.destination = null;\n                i++;\n                break;\n            }\n            regularChunks.splice(0, i);\n            var errorChunks = request.completedErrorChunks;\n            for(i = 0; i < errorChunks.length; i++)if (request.pendingChunks--, !writeChunkAndReturn(destination, errorChunks[i])) {\n                request.destination = null;\n                i++;\n                break;\n            }\n            errorChunks.splice(0, i);\n        } finally{\n            request.flushScheduled = !1, currentView && 0 < writtenBytes && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = null, writtenBytes = 0);\n        }\n        0 === request.pendingChunks && (request.status = CLOSED, destination.close(), request.destination = null);\n    }\n    function startWork(request) {\n        request.flushScheduled = null !== request.destination;\n        supportsRequestStorage ? scheduleMicrotask(function() {\n            requestStorage.run(request, performWork, request);\n        }) : scheduleMicrotask(function() {\n            return performWork(request);\n        });\n        setTimeoutOrImmediate(function() {\n            request.status === OPENING && (request.status = 11);\n        }, 0);\n    }\n    function enqueueFlush(request) {\n        !1 === request.flushScheduled && 0 === request.pingedTasks.length && null !== request.destination && (request.flushScheduled = !0, setTimeoutOrImmediate(function() {\n            request.flushScheduled = !1;\n            var destination = request.destination;\n            destination && flushCompletedChunks(request, destination);\n        }, 0));\n    }\n    function startFlowing(request, destination) {\n        if (request.status === CLOSING) request.status = CLOSED, closeWithError(destination, request.fatalError);\n        else if (request.status !== CLOSED && null === request.destination) {\n            request.destination = destination;\n            try {\n                flushCompletedChunks(request, destination);\n            } catch (error) {\n                logRecoverableError(request, error, null), fatalError(request, error);\n            }\n        }\n    }\n    function abort(request, reason) {\n        try {\n            11 >= request.status && (request.status = ABORTING);\n            var abortableTasks = request.abortableTasks;\n            if (0 < abortableTasks.size) {\n                var error = void 0 === reason ? Error(\"The render was aborted by the server without a reason.\") : \"object\" === typeof reason && null !== reason && \"function\" === typeof reason.then ? Error(\"The render was aborted by the server with a promise.\") : reason, digest = logRecoverableError(request, error, null), _errorId2 = request.nextChunkId++;\n                request.fatalError = _errorId2;\n                request.pendingChunks++;\n                emitErrorChunk(request, _errorId2, digest, error);\n                abortableTasks.forEach(function(task) {\n                    if (task.status !== RENDERING) {\n                        task.status = ABORTED;\n                        var ref = serializeByValueID(_errorId2);\n                        task = encodeReferenceChunk(request, task.id, ref);\n                        request.completedErrorChunks.push(task);\n                    }\n                });\n                abortableTasks.clear();\n                var onAllReady = request.onAllReady;\n                onAllReady();\n            }\n            var abortListeners = request.abortListeners;\n            if (0 < abortListeners.size) {\n                var _error = void 0 === reason ? Error(\"The render was aborted by the server without a reason.\") : \"object\" === typeof reason && null !== reason && \"function\" === typeof reason.then ? Error(\"The render was aborted by the server with a promise.\") : reason;\n                abortListeners.forEach(function(callback) {\n                    return callback(_error);\n                });\n                abortListeners.clear();\n            }\n            null !== request.destination && flushCompletedChunks(request, request.destination);\n        } catch (error$2) {\n            logRecoverableError(request, error$2, null), fatalError(request, error$2);\n        }\n    }\n    function resolveServerReference(bundlerConfig, id) {\n        var name = \"\", resolvedModuleData = bundlerConfig[id];\n        if (resolvedModuleData) name = resolvedModuleData.name;\n        else {\n            var idx = id.lastIndexOf(\"#\");\n            -1 !== idx && (name = id.slice(idx + 1), resolvedModuleData = bundlerConfig[id.slice(0, idx)]);\n            if (!resolvedModuleData) throw Error('Could not find the module \"' + id + '\" in the React Server Manifest. This is probably a bug in the React Server Components bundler.');\n        }\n        return resolvedModuleData.async ? [\n            resolvedModuleData.id,\n            resolvedModuleData.chunks,\n            name,\n            1\n        ] : [\n            resolvedModuleData.id,\n            resolvedModuleData.chunks,\n            name\n        ];\n    }\n    function requireAsyncModule(id) {\n        var promise = globalThis.__next_require__(id);\n        if (\"function\" !== typeof promise.then || \"fulfilled\" === promise.status) return null;\n        promise.then(function(value) {\n            promise.status = \"fulfilled\";\n            promise.value = value;\n        }, function(reason) {\n            promise.status = \"rejected\";\n            promise.reason = reason;\n        });\n        return promise;\n    }\n    function ignoreReject() {}\n    function preloadModule(metadata) {\n        for(var chunks = metadata[1], promises = [], i = 0; i < chunks.length;){\n            var chunkId = chunks[i++];\n            chunks[i++];\n            var entry = chunkCache.get(chunkId);\n            if (void 0 === entry) {\n                entry = __webpack_require__.e(chunkId);\n                promises.push(entry);\n                var resolve = chunkCache.set.bind(chunkCache, chunkId, null);\n                entry.then(resolve, ignoreReject);\n                chunkCache.set(chunkId, entry);\n            } else null !== entry && promises.push(entry);\n        }\n        return 4 === metadata.length ? 0 === promises.length ? requireAsyncModule(metadata[0]) : Promise.all(promises).then(function() {\n            return requireAsyncModule(metadata[0]);\n        }) : 0 < promises.length ? Promise.all(promises) : null;\n    }\n    function requireModule(metadata) {\n        var moduleExports = globalThis.__next_require__(metadata[0]);\n        if (4 === metadata.length && \"function\" === typeof moduleExports.then) if (\"fulfilled\" === moduleExports.status) moduleExports = moduleExports.value;\n        else throw moduleExports.reason;\n        return \"*\" === metadata[2] ? moduleExports : \"\" === metadata[2] ? moduleExports.__esModule ? moduleExports.default : moduleExports : moduleExports[metadata[2]];\n    }\n    function Chunk(status, value, reason, response) {\n        this.status = status;\n        this.value = value;\n        this.reason = reason;\n        this._response = response;\n    }\n    function createPendingChunk(response) {\n        return new Chunk(\"pending\", null, null, response);\n    }\n    function wakeChunk(listeners, value) {\n        for(var i = 0; i < listeners.length; i++)(0, listeners[i])(value);\n    }\n    function triggerErrorOnChunk(chunk, error) {\n        if (\"pending\" !== chunk.status && \"blocked\" !== chunk.status) chunk.reason.error(error);\n        else {\n            var listeners = chunk.reason;\n            chunk.status = \"rejected\";\n            chunk.reason = error;\n            null !== listeners && wakeChunk(listeners, error);\n        }\n    }\n    function resolveModelChunk(chunk, value, id) {\n        if (\"pending\" !== chunk.status) chunk = chunk.reason, \"C\" === value[0] ? chunk.close(\"C\" === value ? '\"$undefined\"' : value.slice(1)) : chunk.enqueueModel(value);\n        else {\n            var resolveListeners = chunk.value, rejectListeners = chunk.reason;\n            chunk.status = \"resolved_model\";\n            chunk.value = value;\n            chunk.reason = id;\n            if (null !== resolveListeners) switch(initializeModelChunk(chunk), chunk.status){\n                case \"fulfilled\":\n                    wakeChunk(resolveListeners, chunk.value);\n                    break;\n                case \"pending\":\n                case \"blocked\":\n                case \"cyclic\":\n                    if (chunk.value) for(value = 0; value < resolveListeners.length; value++)chunk.value.push(resolveListeners[value]);\n                    else chunk.value = resolveListeners;\n                    if (chunk.reason) {\n                        if (rejectListeners) for(value = 0; value < rejectListeners.length; value++)chunk.reason.push(rejectListeners[value]);\n                    } else chunk.reason = rejectListeners;\n                    break;\n                case \"rejected\":\n                    rejectListeners && wakeChunk(rejectListeners, chunk.reason);\n            }\n        }\n    }\n    function createResolvedIteratorResultChunk(response, value, done) {\n        return new Chunk(\"resolved_model\", (done ? '{\"done\":true,\"value\":' : '{\"done\":false,\"value\":') + value + \"}\", -1, response);\n    }\n    function resolveIteratorResultChunk(chunk, value, done) {\n        resolveModelChunk(chunk, (done ? '{\"done\":true,\"value\":' : '{\"done\":false,\"value\":') + value + \"}\", -1);\n    }\n    function loadServerReference$1(response, id, bound, parentChunk, parentObject, key) {\n        var serverReference = resolveServerReference(response._bundlerConfig, id);\n        id = preloadModule(serverReference);\n        if (bound) bound = Promise.all([\n            bound,\n            id\n        ]).then(function(_ref) {\n            _ref = _ref[0];\n            var fn = requireModule(serverReference);\n            return fn.bind.apply(fn, [\n                null\n            ].concat(_ref));\n        });\n        else if (id) bound = Promise.resolve(id).then(function() {\n            return requireModule(serverReference);\n        });\n        else return requireModule(serverReference);\n        bound.then(createModelResolver(parentChunk, parentObject, key, !1, response, createModel, []), createModelReject(parentChunk));\n        return null;\n    }\n    function reviveModel(response, parentObj, parentKey, value, reference) {\n        if (\"string\" === typeof value) return parseModelString(response, parentObj, parentKey, value, reference);\n        if (\"object\" === typeof value && null !== value) if (void 0 !== reference && void 0 !== response._temporaryReferences && response._temporaryReferences.set(value, reference), Array.isArray(value)) for(var i = 0; i < value.length; i++)value[i] = reviveModel(response, value, \"\" + i, value[i], void 0 !== reference ? reference + \":\" + i : void 0);\n        else for(i in value)hasOwnProperty.call(value, i) && (parentObj = void 0 !== reference && -1 === i.indexOf(\":\") ? reference + \":\" + i : void 0, parentObj = reviveModel(response, value, i, value[i], parentObj), void 0 !== parentObj ? value[i] = parentObj : delete value[i]);\n        return value;\n    }\n    function initializeModelChunk(chunk) {\n        var prevChunk = initializingChunk, prevBlocked = initializingChunkBlockedModel;\n        initializingChunk = chunk;\n        initializingChunkBlockedModel = null;\n        var rootReference = -1 === chunk.reason ? void 0 : chunk.reason.toString(16), resolvedModel = chunk.value;\n        chunk.status = \"cyclic\";\n        chunk.value = null;\n        chunk.reason = null;\n        try {\n            var rawModel = JSON.parse(resolvedModel), value = reviveModel(chunk._response, {\n                \"\": rawModel\n            }, \"\", rawModel, rootReference);\n            if (null !== initializingChunkBlockedModel && 0 < initializingChunkBlockedModel.deps) initializingChunkBlockedModel.value = value, chunk.status = \"blocked\";\n            else {\n                var resolveListeners = chunk.value;\n                chunk.status = \"fulfilled\";\n                chunk.value = value;\n                null !== resolveListeners && wakeChunk(resolveListeners, value);\n            }\n        } catch (error) {\n            chunk.status = \"rejected\", chunk.reason = error;\n        } finally{\n            initializingChunk = prevChunk, initializingChunkBlockedModel = prevBlocked;\n        }\n    }\n    function reportGlobalError(response, error) {\n        response._closed = !0;\n        response._closedReason = error;\n        response._chunks.forEach(function(chunk) {\n            \"pending\" === chunk.status && triggerErrorOnChunk(chunk, error);\n        });\n    }\n    function getChunk(response, id) {\n        var chunks = response._chunks, chunk = chunks.get(id);\n        chunk || (chunk = response._formData.get(response._prefix + id), chunk = null != chunk ? new Chunk(\"resolved_model\", chunk, id, response) : response._closed ? new Chunk(\"rejected\", null, response._closedReason, response) : createPendingChunk(response), chunks.set(id, chunk));\n        return chunk;\n    }\n    function createModelResolver(chunk, parentObject, key, cyclic, response, map, path) {\n        if (initializingChunkBlockedModel) {\n            var blocked = initializingChunkBlockedModel;\n            cyclic || blocked.deps++;\n        } else blocked = initializingChunkBlockedModel = {\n            deps: cyclic ? 0 : 1,\n            value: null\n        };\n        return function(value) {\n            for(var i = 1; i < path.length; i++)value = value[path[i]];\n            parentObject[key] = map(response, value);\n            \"\" === key && null === blocked.value && (blocked.value = parentObject[key]);\n            blocked.deps--;\n            0 === blocked.deps && \"blocked\" === chunk.status && (value = chunk.value, chunk.status = \"fulfilled\", chunk.value = blocked.value, null !== value && wakeChunk(value, blocked.value));\n        };\n    }\n    function createModelReject(chunk) {\n        return function(error) {\n            return triggerErrorOnChunk(chunk, error);\n        };\n    }\n    function getOutlinedModel(response, reference, parentObject, key, map) {\n        reference = reference.split(\":\");\n        var id = parseInt(reference[0], 16);\n        id = getChunk(response, id);\n        switch(id.status){\n            case \"resolved_model\":\n                initializeModelChunk(id);\n        }\n        switch(id.status){\n            case \"fulfilled\":\n                parentObject = id.value;\n                for(key = 1; key < reference.length; key++)parentObject = parentObject[reference[key]];\n                return map(response, parentObject);\n            case \"pending\":\n            case \"blocked\":\n            case \"cyclic\":\n                var parentChunk = initializingChunk;\n                id.then(createModelResolver(parentChunk, parentObject, key, \"cyclic\" === id.status, response, map, reference), createModelReject(parentChunk));\n                return null;\n            default:\n                throw id.reason;\n        }\n    }\n    function createMap(response, model) {\n        return new Map(model);\n    }\n    function createSet(response, model) {\n        return new Set(model);\n    }\n    function extractIterator(response, model) {\n        return model[Symbol.iterator]();\n    }\n    function createModel(response, model) {\n        return model;\n    }\n    function parseTypedArray(response, reference, constructor, bytesPerElement, parentObject, parentKey) {\n        reference = parseInt(reference.slice(2), 16);\n        reference = response._formData.get(response._prefix + reference);\n        reference = constructor === ArrayBuffer ? reference.arrayBuffer() : reference.arrayBuffer().then(function(buffer) {\n            return new constructor(buffer);\n        });\n        bytesPerElement = initializingChunk;\n        reference.then(createModelResolver(bytesPerElement, parentObject, parentKey, !1, response, createModel, []), createModelReject(bytesPerElement));\n        return null;\n    }\n    function resolveStream(response, id, stream, controller) {\n        var chunks = response._chunks;\n        stream = new Chunk(\"fulfilled\", stream, controller, response);\n        chunks.set(id, stream);\n        response = response._formData.getAll(response._prefix + id);\n        for(id = 0; id < response.length; id++)chunks = response[id], \"C\" === chunks[0] ? controller.close(\"C\" === chunks ? '\"$undefined\"' : chunks.slice(1)) : controller.enqueueModel(chunks);\n    }\n    function parseReadableStream(response, reference, type) {\n        reference = parseInt(reference.slice(2), 16);\n        var controller = null;\n        type = new ReadableStream({\n            type: type,\n            start: function(c) {\n                controller = c;\n            }\n        });\n        var previousBlockedChunk = null;\n        resolveStream(response, reference, type, {\n            enqueueModel: function(json) {\n                if (null === previousBlockedChunk) {\n                    var chunk = new Chunk(\"resolved_model\", json, -1, response);\n                    initializeModelChunk(chunk);\n                    \"fulfilled\" === chunk.status ? controller.enqueue(chunk.value) : (chunk.then(function(v) {\n                        return controller.enqueue(v);\n                    }, function(e) {\n                        return controller.error(e);\n                    }), previousBlockedChunk = chunk);\n                } else {\n                    chunk = previousBlockedChunk;\n                    var _chunk = createPendingChunk(response);\n                    _chunk.then(function(v) {\n                        return controller.enqueue(v);\n                    }, function(e) {\n                        return controller.error(e);\n                    });\n                    previousBlockedChunk = _chunk;\n                    chunk.then(function() {\n                        previousBlockedChunk === _chunk && (previousBlockedChunk = null);\n                        resolveModelChunk(_chunk, json, -1);\n                    });\n                }\n            },\n            close: function() {\n                if (null === previousBlockedChunk) controller.close();\n                else {\n                    var blockedChunk = previousBlockedChunk;\n                    previousBlockedChunk = null;\n                    blockedChunk.then(function() {\n                        return controller.close();\n                    });\n                }\n            },\n            error: function(error) {\n                if (null === previousBlockedChunk) controller.error(error);\n                else {\n                    var blockedChunk = previousBlockedChunk;\n                    previousBlockedChunk = null;\n                    blockedChunk.then(function() {\n                        return controller.error(error);\n                    });\n                }\n            }\n        });\n        return type;\n    }\n    function asyncIterator() {\n        return this;\n    }\n    function createIterator(next) {\n        next = {\n            next: next\n        };\n        next[ASYNC_ITERATOR] = asyncIterator;\n        return next;\n    }\n    function parseAsyncIterable(response, reference, iterator) {\n        reference = parseInt(reference.slice(2), 16);\n        var buffer = [], closed = !1, nextWriteIndex = 0, iterable = _defineProperty({}, ASYNC_ITERATOR, function() {\n            var nextReadIndex = 0;\n            return createIterator(function(arg) {\n                if (void 0 !== arg) throw Error(\"Values cannot be passed to next() of AsyncIterables passed to Client Components.\");\n                if (nextReadIndex === buffer.length) {\n                    if (closed) return new Chunk(\"fulfilled\", {\n                        done: !0,\n                        value: void 0\n                    }, null, response);\n                    buffer[nextReadIndex] = createPendingChunk(response);\n                }\n                return buffer[nextReadIndex++];\n            });\n        });\n        iterator = iterator ? iterable[ASYNC_ITERATOR]() : iterable;\n        resolveStream(response, reference, iterator, {\n            enqueueModel: function(value) {\n                nextWriteIndex === buffer.length ? buffer[nextWriteIndex] = createResolvedIteratorResultChunk(response, value, !1) : resolveIteratorResultChunk(buffer[nextWriteIndex], value, !1);\n                nextWriteIndex++;\n            },\n            close: function(value) {\n                closed = !0;\n                nextWriteIndex === buffer.length ? buffer[nextWriteIndex] = createResolvedIteratorResultChunk(response, value, !0) : resolveIteratorResultChunk(buffer[nextWriteIndex], value, !0);\n                for(nextWriteIndex++; nextWriteIndex < buffer.length;)resolveIteratorResultChunk(buffer[nextWriteIndex++], '\"$undefined\"', !0);\n            },\n            error: function(error) {\n                closed = !0;\n                for(nextWriteIndex === buffer.length && (buffer[nextWriteIndex] = createPendingChunk(response)); nextWriteIndex < buffer.length;)triggerErrorOnChunk(buffer[nextWriteIndex++], error);\n            }\n        });\n        return iterator;\n    }\n    function parseModelString(response, obj, key, value, reference) {\n        if (\"$\" === value[0]) {\n            switch(value[1]){\n                case \"$\":\n                    return value.slice(1);\n                case \"@\":\n                    return obj = parseInt(value.slice(2), 16), getChunk(response, obj);\n                case \"F\":\n                    return value = value.slice(2), value = getOutlinedModel(response, value, obj, key, createModel), loadServerReference$1(response, value.id, value.bound, initializingChunk, obj, key);\n                case \"T\":\n                    if (void 0 === reference || void 0 === response._temporaryReferences) throw Error(\"Could not reference an opaque temporary reference. This is likely due to misconfiguring the temporaryReferences options on the server.\");\n                    return createTemporaryReference(response._temporaryReferences, reference);\n                case \"Q\":\n                    return value = value.slice(2), getOutlinedModel(response, value, obj, key, createMap);\n                case \"W\":\n                    return value = value.slice(2), getOutlinedModel(response, value, obj, key, createSet);\n                case \"K\":\n                    obj = value.slice(2);\n                    var formPrefix = response._prefix + obj + \"_\", data = new FormData();\n                    response._formData.forEach(function(entry, entryKey) {\n                        entryKey.startsWith(formPrefix) && data.append(entryKey.slice(formPrefix.length), entry);\n                    });\n                    return data;\n                case \"i\":\n                    return value = value.slice(2), getOutlinedModel(response, value, obj, key, extractIterator);\n                case \"I\":\n                    return Infinity;\n                case \"-\":\n                    return \"$-0\" === value ? -0 : -Infinity;\n                case \"N\":\n                    return NaN;\n                case \"u\":\n                    return;\n                case \"D\":\n                    return new Date(Date.parse(value.slice(2)));\n                case \"n\":\n                    return BigInt(value.slice(2));\n            }\n            switch(value[1]){\n                case \"A\":\n                    return parseTypedArray(response, value, ArrayBuffer, 1, obj, key);\n                case \"O\":\n                    return parseTypedArray(response, value, Int8Array, 1, obj, key);\n                case \"o\":\n                    return parseTypedArray(response, value, Uint8Array, 1, obj, key);\n                case \"U\":\n                    return parseTypedArray(response, value, Uint8ClampedArray, 1, obj, key);\n                case \"S\":\n                    return parseTypedArray(response, value, Int16Array, 2, obj, key);\n                case \"s\":\n                    return parseTypedArray(response, value, Uint16Array, 2, obj, key);\n                case \"L\":\n                    return parseTypedArray(response, value, Int32Array, 4, obj, key);\n                case \"l\":\n                    return parseTypedArray(response, value, Uint32Array, 4, obj, key);\n                case \"G\":\n                    return parseTypedArray(response, value, Float32Array, 4, obj, key);\n                case \"g\":\n                    return parseTypedArray(response, value, Float64Array, 8, obj, key);\n                case \"M\":\n                    return parseTypedArray(response, value, BigInt64Array, 8, obj, key);\n                case \"m\":\n                    return parseTypedArray(response, value, BigUint64Array, 8, obj, key);\n                case \"V\":\n                    return parseTypedArray(response, value, DataView, 1, obj, key);\n                case \"B\":\n                    return obj = parseInt(value.slice(2), 16), response._formData.get(response._prefix + obj);\n            }\n            switch(value[1]){\n                case \"R\":\n                    return parseReadableStream(response, value, void 0);\n                case \"r\":\n                    return parseReadableStream(response, value, \"bytes\");\n                case \"X\":\n                    return parseAsyncIterable(response, value, !1);\n                case \"x\":\n                    return parseAsyncIterable(response, value, !0);\n            }\n            value = value.slice(1);\n            return getOutlinedModel(response, value, obj, key, createModel);\n        }\n        return value;\n    }\n    function createResponse(bundlerConfig, formFieldPrefix, temporaryReferences) {\n        var backingFormData = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : new FormData(), chunks = new Map();\n        return {\n            _bundlerConfig: bundlerConfig,\n            _prefix: formFieldPrefix,\n            _formData: backingFormData,\n            _chunks: chunks,\n            _closed: !1,\n            _closedReason: null,\n            _temporaryReferences: temporaryReferences\n        };\n    }\n    function close(response) {\n        reportGlobalError(response, Error(\"Connection closed.\"));\n    }\n    function loadServerReference(bundlerConfig, id, bound) {\n        var serverReference = resolveServerReference(bundlerConfig, id);\n        bundlerConfig = preloadModule(serverReference);\n        return bound ? Promise.all([\n            bound,\n            bundlerConfig\n        ]).then(function(_ref) {\n            _ref = _ref[0];\n            var fn = requireModule(serverReference);\n            return fn.bind.apply(fn, [\n                null\n            ].concat(_ref));\n        }) : bundlerConfig ? Promise.resolve(bundlerConfig).then(function() {\n            return requireModule(serverReference);\n        }) : Promise.resolve(requireModule(serverReference));\n    }\n    function decodeBoundActionMetaData(body, serverManifest, formFieldPrefix) {\n        body = createResponse(serverManifest, formFieldPrefix, void 0, body);\n        close(body);\n        body = getChunk(body, 0);\n        body.then(function() {});\n        if (\"fulfilled\" !== body.status) throw body.reason;\n        return body.value;\n    }\n    var ReactDOM = __webpack_require__(/*! react-dom */ \"(middleware)/./node_modules/next/dist/compiled/react-dom/react-dom.react-server.js\"), React = __webpack_require__(/*! react */ \"(middleware)/./node_modules/next/dist/compiled/react/react.react-server.js\"), REACT_LEGACY_ELEMENT_TYPE = Symbol.for(\"react.element\"), REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"), REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"), REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"), REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"), REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"), REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"), REACT_MEMO_TYPE = Symbol.for(\"react.memo\"), REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"), REACT_MEMO_CACHE_SENTINEL = Symbol.for(\"react.memo_cache_sentinel\");\n    Symbol.for(\"react.postpone\");\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator, ASYNC_ITERATOR = Symbol.asyncIterator, LocalPromise = Promise, scheduleMicrotask = \"function\" === typeof queueMicrotask ? queueMicrotask : function(callback) {\n        LocalPromise.resolve(null).then(callback).catch(handleErrorInNextTick);\n    }, currentView = null, writtenBytes = 0, textEncoder = new TextEncoder(), CLIENT_REFERENCE_TAG$1 = Symbol.for(\"react.client.reference\"), SERVER_REFERENCE_TAG = Symbol.for(\"react.server.reference\"), FunctionBind = Function.prototype.bind, ArraySlice = Array.prototype.slice, PROMISE_PROTOTYPE = Promise.prototype, deepProxyHandlers = {\n        get: function(target, name) {\n            switch(name){\n                case \"$$typeof\":\n                    return target.$$typeof;\n                case \"$$id\":\n                    return target.$$id;\n                case \"$$async\":\n                    return target.$$async;\n                case \"name\":\n                    return target.name;\n                case \"displayName\":\n                    return;\n                case \"defaultProps\":\n                    return;\n                case \"toJSON\":\n                    return;\n                case Symbol.toPrimitive:\n                    return Object.prototype[Symbol.toPrimitive];\n                case Symbol.toStringTag:\n                    return Object.prototype[Symbol.toStringTag];\n                case \"Provider\":\n                    throw Error(\"Cannot render a Client Context Provider on the Server. Instead, you can export a Client Component wrapper that itself renders a Client Context Provider.\");\n                case \"then\":\n                    throw Error(\"Cannot await or return from a thenable. You cannot await a client module from a server component.\");\n            }\n            throw Error(\"Cannot access \" + (String(target.name) + \".\" + String(name)) + \" on the server. You cannot dot into a client module from a server component. You can only pass the imported name through.\");\n        },\n        set: function() {\n            throw Error(\"Cannot assign to a client module from a server module.\");\n        }\n    }, proxyHandlers$1 = {\n        get: function(target, name) {\n            return getReference(target, name);\n        },\n        getOwnPropertyDescriptor: function(target, name) {\n            var descriptor = Object.getOwnPropertyDescriptor(target, name);\n            descriptor || (descriptor = {\n                value: getReference(target, name),\n                writable: !1,\n                configurable: !1,\n                enumerable: !1\n            }, Object.defineProperty(target, name, descriptor));\n            return descriptor;\n        },\n        getPrototypeOf: function() {\n            return PROMISE_PROTOTYPE;\n        },\n        set: function() {\n            throw Error(\"Cannot assign to a client module from a server module.\");\n        }\n    }, ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, previousDispatcher = ReactDOMSharedInternals.d;\n    ReactDOMSharedInternals.d = {\n        f: previousDispatcher.f,\n        r: previousDispatcher.r,\n        D: function(href) {\n            if (\"string\" === typeof href && href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"D|\" + href;\n                    hints.has(key) || (hints.add(key), emitHint(request, \"D\", href));\n                } else previousDispatcher.D(href);\n            }\n        },\n        C: function(href, crossOrigin) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"C|\" + (null == crossOrigin ? \"null\" : crossOrigin) + \"|\" + href;\n                    hints.has(key) || (hints.add(key), \"string\" === typeof crossOrigin ? emitHint(request, \"C\", [\n                        href,\n                        crossOrigin\n                    ]) : emitHint(request, \"C\", href));\n                } else previousDispatcher.C(href, crossOrigin);\n            }\n        },\n        L: function(href, as, options) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"L\";\n                    if (\"image\" === as && options) {\n                        var imageSrcSet = options.imageSrcSet, imageSizes = options.imageSizes, uniquePart = \"\";\n                        \"string\" === typeof imageSrcSet && \"\" !== imageSrcSet ? (uniquePart += \"[\" + imageSrcSet + \"]\", \"string\" === typeof imageSizes && (uniquePart += \"[\" + imageSizes + \"]\")) : uniquePart += \"[][]\" + href;\n                        key += \"[image]\" + uniquePart;\n                    } else key += \"[\" + as + \"]\" + href;\n                    hints.has(key) || (hints.add(key), (options = trimOptions(options)) ? emitHint(request, \"L\", [\n                        href,\n                        as,\n                        options\n                    ]) : emitHint(request, \"L\", [\n                        href,\n                        as\n                    ]));\n                } else previousDispatcher.L(href, as, options);\n            }\n        },\n        m: function(href, options) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"m|\" + href;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"m\", [\n                        href,\n                        options\n                    ]) : emitHint(request, \"m\", href);\n                }\n                previousDispatcher.m(href, options);\n            }\n        },\n        X: function(src, options) {\n            if (\"string\" === typeof src) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"X|\" + src;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"X\", [\n                        src,\n                        options\n                    ]) : emitHint(request, \"X\", src);\n                }\n                previousDispatcher.X(src, options);\n            }\n        },\n        S: function(href, precedence, options) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"S|\" + href;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"S\", [\n                        href,\n                        \"string\" === typeof precedence ? precedence : 0,\n                        options\n                    ]) : \"string\" === typeof precedence ? emitHint(request, \"S\", [\n                        href,\n                        precedence\n                    ]) : emitHint(request, \"S\", href);\n                }\n                previousDispatcher.S(href, precedence, options);\n            }\n        },\n        M: function(src, options) {\n            if (\"string\" === typeof src) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"M|\" + src;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"M\", [\n                        src,\n                        options\n                    ]) : emitHint(request, \"M\", src);\n                }\n                previousDispatcher.M(src, options);\n            }\n        }\n    };\n    var frameRegExp = /^ {3} at (?:(.+) \\((?:(.+):(\\d+):(\\d+)|<anonymous>)\\)|(?:async )?(.+):(\\d+):(\\d+)|<anonymous>)$/, supportsRequestStorage = \"function\" === typeof AsyncLocalStorage, requestStorage = supportsRequestStorage ? new AsyncLocalStorage() : null, supportsComponentStorage = supportsRequestStorage, componentStorage = supportsComponentStorage ? new AsyncLocalStorage() : null;\n    \"object\" === typeof async_hooks ? async_hooks.createHook : function() {\n        return {\n            enable: function() {},\n            disable: function() {}\n        };\n    };\n    \"object\" === typeof async_hooks ? async_hooks.executionAsyncId : null;\n    var TEMPORARY_REFERENCE_TAG = Symbol.for(\"react.temporary.reference\"), proxyHandlers = {\n        get: function(target, name) {\n            switch(name){\n                case \"$$typeof\":\n                    return target.$$typeof;\n                case \"name\":\n                    return;\n                case \"displayName\":\n                    return;\n                case \"defaultProps\":\n                    return;\n                case \"toJSON\":\n                    return;\n                case Symbol.toPrimitive:\n                    return Object.prototype[Symbol.toPrimitive];\n                case Symbol.toStringTag:\n                    return Object.prototype[Symbol.toStringTag];\n                case \"Provider\":\n                    throw Error(\"Cannot render a Client Context Provider on the Server. Instead, you can export a Client Component wrapper that itself renders a Client Context Provider.\");\n            }\n            throw Error(\"Cannot access \" + String(name) + \" on the server. You cannot dot into a temporary client reference from a server component. You can only pass the value through to the client.\");\n        },\n        set: function() {\n            throw Error(\"Cannot assign to a temporary client reference from a server module.\");\n        }\n    }, SuspenseException = Error(\"Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\\n\\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`.\"), suspendedThenable = null, currentRequest$1 = null, thenableIndexCounter = 0, thenableState = null, currentComponentDebugInfo = null, HooksDispatcher = {\n        readContext: unsupportedContext,\n        use: function(usable) {\n            if (null !== usable && \"object\" === typeof usable || \"function\" === typeof usable) {\n                if (\"function\" === typeof usable.then) {\n                    var index = thenableIndexCounter;\n                    thenableIndexCounter += 1;\n                    null === thenableState && (thenableState = []);\n                    return trackUsedThenable(thenableState, usable, index);\n                }\n                usable.$$typeof === REACT_CONTEXT_TYPE && unsupportedContext();\n            }\n            if (isClientReference(usable)) {\n                if (null != usable.value && usable.value.$$typeof === REACT_CONTEXT_TYPE) throw Error(\"Cannot read a Client Context from a Server Component.\");\n                throw Error(\"Cannot use() an already resolved Client Reference.\");\n            }\n            throw Error(\"An unsupported type was passed to use(): \" + String(usable));\n        },\n        useCallback: function(callback) {\n            return callback;\n        },\n        useContext: unsupportedContext,\n        useEffect: unsupportedHook,\n        useImperativeHandle: unsupportedHook,\n        useLayoutEffect: unsupportedHook,\n        useInsertionEffect: unsupportedHook,\n        useMemo: function(nextCreate) {\n            return nextCreate();\n        },\n        useReducer: unsupportedHook,\n        useRef: unsupportedHook,\n        useState: unsupportedHook,\n        useDebugValue: function() {},\n        useDeferredValue: unsupportedHook,\n        useTransition: unsupportedHook,\n        useSyncExternalStore: unsupportedHook,\n        useId: function() {\n            if (null === currentRequest$1) throw Error(\"useId can only be used while React is rendering\");\n            var id = currentRequest$1.identifierCount++;\n            return \":\" + currentRequest$1.identifierPrefix + \"S\" + id.toString(32) + \":\";\n        },\n        useHostTransitionStatus: unsupportedHook,\n        useFormState: unsupportedHook,\n        useActionState: unsupportedHook,\n        useOptimistic: unsupportedHook,\n        useMemoCache: function(size) {\n            for(var data = Array(size), i = 0; i < size; i++)data[i] = REACT_MEMO_CACHE_SENTINEL;\n            return data;\n        },\n        useCacheRefresh: function() {\n            return unsupportedRefresh;\n        }\n    }, currentOwner = null, DefaultAsyncDispatcher = {\n        getCacheForType: function(resourceType) {\n            var cache = (cache = resolveRequest()) ? cache.cache : new Map();\n            var entry = cache.get(resourceType);\n            void 0 === entry && (entry = resourceType(), cache.set(resourceType, entry));\n            return entry;\n        }\n    };\n    DefaultAsyncDispatcher.getOwner = resolveOwner;\n    var ReactSharedInternalsServer = React.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;\n    if (!ReactSharedInternalsServer) throw Error('The \"react\" package in this environment is not configured correctly. The \"react-server\" condition must be enabled in any environment that runs React Server Components.');\n    var prefix, suffix;\n    new (\"function\" === typeof WeakMap ? WeakMap : Map)();\n    var callComponent = {\n        \"react-stack-bottom-frame\": function(Component, props, componentDebugInfo) {\n            currentOwner = componentDebugInfo;\n            try {\n                return Component(props, void 0);\n            } finally{\n                currentOwner = null;\n            }\n        }\n    }, callComponentInDEV = callComponent[\"react-stack-bottom-frame\"].bind(callComponent), callLazyInit = {\n        \"react-stack-bottom-frame\": function(lazy) {\n            var init = lazy._init;\n            return init(lazy._payload);\n        }\n    }, callLazyInitInDEV = callLazyInit[\"react-stack-bottom-frame\"].bind(callLazyInit), callIterator = {\n        \"react-stack-bottom-frame\": function(iterator, progress, error) {\n            iterator.next().then(progress, error);\n        }\n    }, callIteratorInDEV = callIterator[\"react-stack-bottom-frame\"].bind(callIterator), isArrayImpl = Array.isArray, getPrototypeOf = Object.getPrototypeOf, jsxPropsParents = new WeakMap(), jsxChildrenParents = new WeakMap(), CLIENT_REFERENCE_TAG = Symbol.for(\"react.client.reference\"), doNotLimit = new WeakSet();\n    \"object\" === typeof console && null !== console && (patchConsole(console, \"assert\"), patchConsole(console, \"debug\"), patchConsole(console, \"dir\"), patchConsole(console, \"dirxml\"), patchConsole(console, \"error\"), patchConsole(console, \"group\"), patchConsole(console, \"groupCollapsed\"), patchConsole(console, \"groupEnd\"), patchConsole(console, \"info\"), patchConsole(console, \"log\"), patchConsole(console, \"table\"), patchConsole(console, \"trace\"), patchConsole(console, \"warn\"));\n    var ObjectPrototype = Object.prototype, stringify = JSON.stringify, PENDING$1 = 0, COMPLETED = 1, ABORTED = 3, ERRORED$1 = 4, RENDERING = 5, OPENING = 10, ABORTING = 12, CLOSING = 13, CLOSED = 14, PRERENDER = 21, currentRequest = null, debugID = null, modelRoot = !1, emptyRoot = {}, chunkCache = new Map(), hasOwnProperty = Object.prototype.hasOwnProperty;\n    Chunk.prototype = Object.create(Promise.prototype);\n    Chunk.prototype.then = function(resolve, reject) {\n        switch(this.status){\n            case \"resolved_model\":\n                initializeModelChunk(this);\n        }\n        switch(this.status){\n            case \"fulfilled\":\n                resolve(this.value);\n                break;\n            case \"pending\":\n            case \"blocked\":\n            case \"cyclic\":\n                resolve && (null === this.value && (this.value = []), this.value.push(resolve));\n                reject && (null === this.reason && (this.reason = []), this.reason.push(reject));\n                break;\n            default:\n                reject(this.reason);\n        }\n    };\n    var initializingChunk = null, initializingChunkBlockedModel = null;\n    exports.createClientModuleProxy = function(moduleId) {\n        moduleId = registerClientReferenceImpl({}, moduleId, !1);\n        return new Proxy(moduleId, proxyHandlers$1);\n    };\n    exports.createTemporaryReferenceSet = function() {\n        return new WeakMap();\n    };\n    exports.decodeAction = function(body, serverManifest) {\n        var formData = new FormData(), action = null;\n        body.forEach(function(value, key) {\n            key.startsWith(\"$ACTION_\") ? key.startsWith(\"$ACTION_REF_\") ? (value = \"$ACTION_\" + key.slice(12) + \":\", value = decodeBoundActionMetaData(body, serverManifest, value), action = loadServerReference(serverManifest, value.id, value.bound)) : key.startsWith(\"$ACTION_ID_\") && (value = key.slice(11), action = loadServerReference(serverManifest, value, null)) : formData.append(key, value);\n        });\n        return null === action ? null : action.then(function(fn) {\n            return fn.bind(null, formData);\n        });\n    };\n    exports.decodeFormState = function(actionResult, body, serverManifest) {\n        var keyPath = body.get(\"$ACTION_KEY\");\n        if (\"string\" !== typeof keyPath) return Promise.resolve(null);\n        var metaData = null;\n        body.forEach(function(value, key) {\n            key.startsWith(\"$ACTION_REF_\") && (value = \"$ACTION_\" + key.slice(12) + \":\", metaData = decodeBoundActionMetaData(body, serverManifest, value));\n        });\n        if (null === metaData) return Promise.resolve(null);\n        var referenceId = metaData.id;\n        return Promise.resolve(metaData.bound).then(function(bound) {\n            return null === bound ? null : [\n                actionResult,\n                keyPath,\n                referenceId,\n                bound.length - 1\n            ];\n        });\n    };\n    exports.decodeReply = function(body, webpackMap, options) {\n        if (\"string\" === typeof body) {\n            var form = new FormData();\n            form.append(\"0\", body);\n            body = form;\n        }\n        body = createResponse(webpackMap, \"\", options ? options.temporaryReferences : void 0, body);\n        webpackMap = getChunk(body, 0);\n        close(body);\n        return webpackMap;\n    };\n    exports.decodeReplyFromAsyncIterable = function(iterable, webpackMap, options) {\n        function progress(entry) {\n            if (entry.done) close(response$jscomp$0);\n            else {\n                entry = entry.value;\n                var name = entry[0];\n                entry = entry[1];\n                if (\"string\" === typeof entry) {\n                    var response = response$jscomp$0;\n                    response._formData.append(name, entry);\n                    var prefix = response._prefix;\n                    name.startsWith(prefix) && (response = response._chunks, name = +name.slice(prefix.length), (prefix = response.get(name)) && resolveModelChunk(prefix, entry, name));\n                } else response$jscomp$0._formData.append(name, entry);\n                iterator.next().then(progress, error);\n            }\n        }\n        function error(reason) {\n            reportGlobalError(response$jscomp$0, reason);\n            \"function\" === typeof iterator.throw && iterator.throw(reason).then(error, error);\n        }\n        var iterator = iterable[ASYNC_ITERATOR](), response$jscomp$0 = createResponse(webpackMap, \"\", options ? options.temporaryReferences : void 0);\n        iterator.next().then(progress, error);\n        return getChunk(response$jscomp$0, 0);\n    };\n    exports.registerClientReference = function(proxyImplementation, id, exportName) {\n        return registerClientReferenceImpl(proxyImplementation, id + \"#\" + exportName, !1);\n    };\n    exports.registerServerReference = function(reference, id, exportName) {\n        return Object.defineProperties(reference, {\n            $$typeof: {\n                value: SERVER_REFERENCE_TAG\n            },\n            $$id: {\n                value: null === exportName ? id : id + \"#\" + exportName,\n                configurable: !0\n            },\n            $$bound: {\n                value: null,\n                configurable: !0\n            },\n            $$location: {\n                value: Error(\"react-stack-top-frame\"),\n                configurable: !0\n            },\n            bind: {\n                value: bind,\n                configurable: !0\n            }\n        });\n    };\n    // This is a patch added by Next.js\n    const setTimeoutOrImmediate = typeof globalThis['set' + 'Immediate'] === 'function' && // edge runtime sandbox defines a stub for setImmediate\n    // (see 'addStub' in packages/next/src/server/web/sandbox/context.ts)\n    // but it's made non-enumerable, so we can detect it\n    globalThis.propertyIsEnumerable('setImmediate') ? globalThis['set' + 'Immediate'] : setTimeout;\n    exports.renderToReadableStream = function(model, webpackMap, options) {\n        var request = new RequestInstance(20, model, webpackMap, options ? options.onError : void 0, options ? options.identifierPrefix : void 0, options ? options.onPostpone : void 0, options ? options.temporaryReferences : void 0, options ? options.environmentName : void 0, options ? options.filterStackFrame : void 0, noop, noop);\n        if (options && options.signal) {\n            var signal = options.signal;\n            if (signal.aborted) abort(request, signal.reason);\n            else {\n                var listener = function() {\n                    abort(request, signal.reason);\n                    signal.removeEventListener(\"abort\", listener);\n                };\n                signal.addEventListener(\"abort\", listener);\n            }\n        }\n        return new ReadableStream({\n            type: \"bytes\",\n            start: function() {\n                startWork(request);\n            },\n            pull: function(controller) {\n                startFlowing(request, controller);\n            },\n            cancel: function(reason) {\n                request.destination = null;\n                abort(request, reason);\n            }\n        }, {\n            highWaterMark: 0\n        });\n    };\n    exports.unstable_prerender = function(model, webpackMap, options) {\n        return new Promise(function(resolve, reject) {\n            var request = new RequestInstance(PRERENDER, model, webpackMap, options ? options.onError : void 0, options ? options.identifierPrefix : void 0, options ? options.onPostpone : void 0, options ? options.temporaryReferences : void 0, options ? options.environmentName : void 0, options ? options.filterStackFrame : void 0, function() {\n                var stream = new ReadableStream({\n                    type: \"bytes\",\n                    start: function() {\n                        startWork(request);\n                    },\n                    pull: function(controller) {\n                        startFlowing(request, controller);\n                    },\n                    cancel: function(reason) {\n                        request.destination = null;\n                        abort(request, reason);\n                    }\n                }, {\n                    highWaterMark: 0\n                });\n                resolve({\n                    prelude: stream\n                });\n            }, reject);\n            if (options && options.signal) {\n                var signal = options.signal;\n                if (signal.aborted) abort(request, signal.reason);\n                else {\n                    var listener = function() {\n                        abort(request, signal.reason);\n                        signal.removeEventListener(\"abort\", listener);\n                    };\n                    signal.addEventListener(\"abort\", listener);\n                }\n            }\n            startWork(request);\n        });\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar s;\nif (false) {} else {\n  s = __webpack_require__(/*! ./cjs/react-server-dom-webpack-server.edge.development.js */ \"(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js\");\n}\n\nexports.renderToReadableStream = s.renderToReadableStream;\nexports.decodeReply = s.decodeReply;\nexports.decodeReplyFromAsyncIterable = s.decodeReplyFromAsyncIterable;\nexports.decodeAction = s.decodeAction;\nexports.decodeFormState = s.decodeFormState;\nexports.registerServerReference = s.registerServerReference;\nexports.registerClientReference = s.registerClientReference;\nexports.createClientModuleProxy = s.createClientModuleProxy;\nexports.createTemporaryReferenceSet = s.createTemporaryReferenceSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1zZXJ2ZXItZG9tLXdlYnBhY2svc2VydmVyLmVkZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQSxJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLE1BQU0sbUJBQU8sQ0FBQyxrTUFBMkQ7QUFDekU7O0FBRUEsOEJBQThCO0FBQzlCLG1CQUFtQjtBQUNuQixvQ0FBb0M7QUFDcEMsb0JBQW9CO0FBQ3BCLHVCQUF1QjtBQUN2QiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQixtQ0FBbUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaWRkaGFudGd1cHRhL0RvY3VtZW50cy9wcm9qZWN0cy9mb3JnZXRhaS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LXNlcnZlci1kb20td2VicGFjay9zZXJ2ZXIuZWRnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBzO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgcyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LXNlcnZlci1kb20td2VicGFjay1zZXJ2ZXIuZWRnZS5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBzID0gcmVxdWlyZSgnLi9janMvcmVhY3Qtc2VydmVyLWRvbS13ZWJwYWNrLXNlcnZlci5lZGdlLmRldmVsb3BtZW50LmpzJyk7XG59XG5cbmV4cG9ydHMucmVuZGVyVG9SZWFkYWJsZVN0cmVhbSA9IHMucmVuZGVyVG9SZWFkYWJsZVN0cmVhbTtcbmV4cG9ydHMuZGVjb2RlUmVwbHkgPSBzLmRlY29kZVJlcGx5O1xuZXhwb3J0cy5kZWNvZGVSZXBseUZyb21Bc3luY0l0ZXJhYmxlID0gcy5kZWNvZGVSZXBseUZyb21Bc3luY0l0ZXJhYmxlO1xuZXhwb3J0cy5kZWNvZGVBY3Rpb24gPSBzLmRlY29kZUFjdGlvbjtcbmV4cG9ydHMuZGVjb2RlRm9ybVN0YXRlID0gcy5kZWNvZGVGb3JtU3RhdGU7XG5leHBvcnRzLnJlZ2lzdGVyU2VydmVyUmVmZXJlbmNlID0gcy5yZWdpc3RlclNlcnZlclJlZmVyZW5jZTtcbmV4cG9ydHMucmVnaXN0ZXJDbGllbnRSZWZlcmVuY2UgPSBzLnJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlO1xuZXhwb3J0cy5jcmVhdGVDbGllbnRNb2R1bGVQcm94eSA9IHMuY3JlYXRlQ2xpZW50TW9kdWxlUHJveHk7XG5leHBvcnRzLmNyZWF0ZVRlbXBvcmFyeVJlZmVyZW5jZVNldCA9IHMuY3JlYXRlVGVtcG9yYXJ5UmVmZXJlbmNlU2V0O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/server-only/empty.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/compiled/server-only/empty.js ***!
  \**************************************************************/
/***/ (() => {



/***/ })

});